\input texinfo
@c %**start of header
@setfilename paxutils.info
@settitle pax Utilities
@c %**end of header

@c ======================================================================
@c This document has three levels of rendition: PUBLISH, DISTRIB or PROOF,
@c as decided by @set symbols.  The PUBLISH rendition tries to be clean.
@c Most users prefer more information, even if it is not fully revised,
@c so DISTRIB is the default for tar distributions.  The PROOF rendition
@c also shows all FIXMEs, for when we work on the manual.
@c ======================================================================

@ifclear PUBLISH
@ifclear DISTRIB
@ifclear PROOF
@set DISTRIB
@end ifclear
@end ifclear
@end ifclear

@ifset PUBLISH
@smallbook
@set RENDITION The book, version
@end ifset

@ifset DISTRIB
@finalout
@set RENDITION FTP release, version
@end ifset

@ifset PROOF
@finalout
@set RENDITION Proofreading edition
@end ifset

@macro FIXME{string}
@allow-recursion
@quote-arg
@ifset PROOF
@strong{<FIXME>} \string\ @strong{</>}
@end ifset

@end macro

@set absolute-names @w{@kbd{--absolute-names}} (@kbd{-P})
@set after-date @w{@kbd{--after-date=@var{date}}} (@w{@kbd{--newer=@var{date}}}, @kbd{-N @var{date}})
@set append @w{@kbd{--append}} (@kbd{-r})
@set atime-preserve @w{@kbd{--atime-preserve}}
@set backup @w{@kbd{--backup}[=@var{method}]}
@set block-number @w{@kbd{--block-number}} (@kbd{-R})
@set blocking-factor @w{@kbd{--blocking-factor=@var{blocks}}} (@kbd{-b @var{blocks}})
@set checkpoint @w{@kbd{--checkpoint}}
@set compare @w{@kbd{--compare}} (@w{@kbd{--diff}}, @kbd{-d})
@set compress @w{@kbd{--compress}} (@kbd{-Z})
@set concatenate @w{@kbd{--concatenate}} (@w{@kbd{--catenate}}, @kbd{-A})
@set create @w{@kbd{--create}} (@kbd{-c})
@set delete @w{@kbd{--delete}}
@set dereference @w{@kbd{--dereference}} (@kbd{-h})
@set directory @w{@kbd{--directory=@var{directory}}} (@kbd{-C @var{directory}})
@set exclude @w{@kbd{--exclude=@var{pattern}}}
@set exclude-from @w{@kbd{--exclude-from=@var{file-of-patterns}}} (@kbd{-X @var{file-of-patterns}})
@set extract @w{@kbd{--extract}} (@w{@kbd{--get}}, @kbd{-x})
@set file @w{@kbd{--file=@var{archive-name}}} (@kbd{-f @var{archive-name}})
@set files-from @w{@kbd{--files-from=@var{file-of-names}}} (@kbd{-T @var{file-of-names}})
@set force-local @w{@kbd{--force-local}}
@set group @w{@kbd{--group=@var{group}}}
@set gzip @w{@kbd{--gzip}} (@kbd{-z})
@set help @w{@kbd{--help}}
@set ignore-failed-read @w{@kbd{--ignore-failed-read}}
@set ignore-zeros @w{@kbd{--ignore-zeros}} (@kbd{-i})
@set incremental @w{@kbd{--incremental}} (@kbd{-G})
@set info-script @w{@kbd{--info-script=@var{script-name}}} (@w{@kbd{--new-volume-script=@var{script-name}}}, @kbd{-F @var{script-name}})
@set interactive @w{@kbd{--interactive}} (@w{@kbd{--confirmation}}, @kbd{-w})
@set keep-old-files @w{@kbd{--keep-old-files}} (@kbd{-k})
@set label @w{@kbd{--label=@var{archive-label}}} (@kbd{-V @var{archive-label}})
@set list @w{@kbd{--list}} (@kbd{-t})
@set listed-incremental @w{@kbd{--listed-incremental=@var{snapshot-file}}} (@kbd{-g @var{snapshot-file}})
@set mode @w{@kbd{--mode=@var{permissions}}}
@set multi-volume @w{@kbd{--multi-volume}} (@kbd{-M})
@set name-prefix @w{@kbd{--name-prefix=@var{prefix}}}
@set newer-mtime @w{@kbd{--newer-mtime=@var{date}}}
@set no-attributes @w{@kbd{--no-attributes}}
@set no-recursion @w{@kbd{--no-recursion}}
@set null @w{@kbd{--null}}
@set numeric-owner @w{@kbd{--numeric-owner}}
@set old-archive @w{@kbd{--old-archive}} (@kbd{-o})
@set one-file-system @w{@kbd{--one-file-system}} (@kbd{-l})
@set owner @w{@kbd{--owner=@var{user}}}
@set posix @w{@kbd{--posix}}
@set quick @w{@kbd{--quick}}
@set preserve @w{@kbd{--preserve}}
@set read-full-records @w{@kbd{--read-full-records}} (@kbd{-B})
@set record-size @w{@kbd{--record-size=@var{size}}}
@set recursive-unlink @w{@kbd{--recursive-unlink}}
@set remove-files @w{@kbd{--remove-files}}
@set rsh-command @kbd{rsh-command=@var{command}}
@set same-order @w{@kbd{--same-order}} (@w{@kbd{--preserve-order}}, @kbd{-s})
@set same-owner @w{@kbd{--same-owner}}
@set same-permissions @w{@kbd{--same-permissions}} (@w{@kbd{--preserve-permissions}}, @kbd{-p})
@set show-omitted-dirs @w{@kbd{--show-omitted-dirs}}
@set sparse @w{@kbd{--sparse}} (@kbd{-S})
@set starting-file @w{@kbd{--starting-file=@var{name}}} (@kbd{-K @var{name}})
@set suffix @w{@kbd{--suffix=@var{suffix}}}
@set tape-length @w{@kbd{--tape-length=@var{KBytes}}} (@kbd{-L @var{KBytes}})
@set to-stdout @w{@kbd{--to-stdout}} (@kbd{-O})
@set totals @w{@kbd{--totals}}
@set touch @w{@kbd{--touch}} (@kbd{-m})
@set unlink-first @w{@kbd{--unlink-first}} (@kbd{-U})
@set update @w{@kbd{--update}} (@kbd{-u})
@set use-compress-program @w{@kbd{--use-compress-program=@var{program}}}
@set verbose @w{@kbd{--verbose}} (@kbd{-v})
@set verify @w{@kbd{--verify}} (@kbd{-W})
@set version @w{@kbd{--version}}
@set volno-file @w{@kbd{--volno-file=@var{file-of-number}}}

@include version.texi

@c Put everything in one index (arbitrarily chosen to be the concept index).
@syncodeindex fn cp
@syncodeindex ky cp
@syncodeindex pg cp
@syncodeindex vr cp

@defindex op
@syncodeindex op cp

@ifinfo
@format
START-INFO-DIR-ENTRY
* pax utilities: (paxutils).	pax and other archiving utilities.
* cpio: (paxutils)cpio invocation.		Handling cpio archives.
* pax: (paxutils)pax invocation.		The POSIX archiver.
* tar: (paxutils)tar invocation.		Making tape (or disk) archives.
* mt: (paxutils)mt invocation.			Basic tape positioning.
* rmt: (paxutils)rmt invocation.		The remote tape facility.
END-INFO-DIR-ENTRY
@end format
@end ifinfo

@ifinfo
This file documents @code{paxutils} @value{VERSION}.

Copyright (C) 1992, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Foundation.
@end ifinfo

@setchapternewpage odd

@shorttitlepage @code{pax} Utilities

@titlepage
@title pax Utilities
@subtitle @value{RENDITION} @value{VERSION}, @value{UPDATED}
@author John Gilmore and others

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 1992, 1994, 1995, 1996, 1997, 1998 Free Software
Foundation, Inc.

Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
@end titlepage

@ifinfo

@node Top, Introduction, (dir), (dir)
@top

This file documents @code{pax} utilities.  @code{cpio}, @code{pax}
and @code{tar} are tools used to store, backup, and transport files
within archives.  These tools are able to create and extract archives.
@code{cpio} is also able to directly copy many files from one place to
another.  Some accessory tools allow to do basic tape positionning and
handling, either locally or remotely.

Most of the manual, as it stands, specifically describes @code{tar}.
This comes from the fact that it results from a quick merge of a small
@code{cpio} document within a relatively bigger @code{tar} manual.  It also
account for the fact that @code{tar} is currently much more complex than
the other tools.  We expect that such things might tend to reequilibrate
themselves, as time and maintenance goes, as the tools in @code{pax}
utilities will influence each other.

This manual documents the release @value{VERSION} of @code{pax} utilities.

@menu
* Introduction::                Introduction
* cpio Tutorial::               Tutorial introduction to @code{cpio}
* tar Tutorial::                Tutorial introduction to @code{tar}
* cpio invocation::             Invoking @code{cpio}
* pax invocation::              Invoking @code{pax}
* tar invocation::              Invoking @code{tar}
* Subcommands::                 @code{tar} subcommands
* Choosing::                    Choosing files and names for @code{tar}
* Formats::                     Controlling the archive format
* Media::                       Tapes and other archive media
* Backups::                     Performing backups and restoring files
* All options::                 All @code{tar} options
* Date input formats::          Date input formats
* Archive format::              Format of archive files
* Index::                       Index

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Book contents::               What this book contains
* Definitions::                 Some definitions
* What cpio does::              What @code{cpio} does
* What pax does::               What @code{pax} does
* What tar does::               What @code{tar} does
* Stylistic conventions::       Stylistic conventions
* Authors::                     @code{tar} authors
* Reports::                     Reporting bugs or suggestions

Tutorial Introduction to @code{tar}

* Assumptions::                 Assumptions this tutorial makes
* Simplified invokation::       The structure of a @code{tar} command
* Basic tar options::           @code{tar} subcommands and options
* create list extract tutorial::  The three most frequently used subcommands
* file verbose help::           Three frequently used options
* create tutorial::             How to create archives
* list tutorial::               How to list archives
* extract tutorial::            How to extract members from an archive
* Looking ahead::               Looking ahead: The rest of this manual

Three Frequently Used Options

* file tutorial::               The @kbd{--file} option
* verbose tutorial::            The @kbd{--verbose} option
* help tutorial::               Getting help: Using the @kbd{--help} option

How to Create Archives

* prepare for examples::        Preparing a practice directory for examples
* Creating the archive tutorial::  Creating the archive
* create verbose::              Running @kbd{--create} with @kbd{--verbose}
* Short create::                Short forms with @kbd{--create}
* create dir tutorial::         Archiving directories

How to List Archives

* absolute tutorial::           Specifying member names correctly
* Listing directories::         Listing the contents of a stored directory

How to Extract Members from an Archive

* Extracting archives::         Extracting an entire archive
* Extracting files::            Extracting specific files
* Extracting directories::      Extracting files that are directories
* Failing commands::            Commands that will fail
* Two mistakes::                Two dangerous mistakes

Invoking @code{cpio}

* Copy-out mode::               Copy-out mode
* Copy-in mode::                Copy-in mode
* Copy-pass mode::              Copy-pass mode
* cpio Options::                Options for @code{cpio}

Invoking @code{tar}

* Synopsis::                    General synopsis of @code{tar}
* Using options::               Using @code{tar} options
* Styles::                      The three option styles
* Documentation and help::      Documentation and troubleshooting
* interactive::                 Asking for confirmation during subcommands

The Three Option Styles

* Long options::                Long option style
* Short options::               Short option style
* Old style::                   Old option style
* Mixing::                      Mixing option styles

Documentation and Troubleshooting

* version::                     Knowing the @code{tar} version
* help::                        Getting help: Using the @kbd{--help} option
* verbose::                     The @kbd{--verbose} option
* checkpoint::                  Being warned of all directories
* show-omitted-dirs::           Being warned of skipped directories
* totals::                      Sizeing the amount of data written
* block-number::                Adding physical addresses to messages

@code{tar} Subcommands

* list::                        How to list archives
* extract::                     How to extract members from an archive
* create::                      The three most frequently used subcommands
* Applications::                Other uses for @code{tar}

How to List Archives

* Reading::                     Options to help read archives
* compare::                     Comparing members with the file system

Options to Help Read Archives

* read-full-records::           Reading full records
* ignore-zeros::                Ignoring blocks of zeros
* ignore-failed-read::          Ignoring read failures

How to Extract Members from an Archive

* extract options::             Options used for extraction
* Writing::                     Changing how @code{tar} writes files
* Preventing overwrite::        Options to prevent overwriting files
* Unlinking::                   Options to destroy files
* Attributes::                  Handling file attributes
* Scarce::                      Coping with scarce resources

Options to Prevent Overwriting Files

* keep-old-files::              Keeping old files
* to-stdout::                   Writing to standard output
* backup::                      Backup options
* suffix::                      Deciding the backup file suffixes

Options to Destroy Files

* unlink-first::                Removing files prior to extraction
* recursive-unlink::            Removing whole directories

Handling File Attributes

* touch::                       Setting modification times
* same-owner::                  Restoring file ownership
* same-permissions::            Setting access permissions
* no-attributes::               Leaving file attributes alone

Coping with Scarce Resources

* starting-file::               Starting file
* same-order::                  Same order
* preserve::                    Preserving permissions and order

How to Create Archives

* name-prefix::                 Using name prefixes
* atime-preserve::              Preserving last access time
* remove-files::                Removing files
* append::                      How to add files to existing archives
* update::                      Updating an archive

How to Add Files to Existing Archives

* Appending files::             Appending files to an archive
* Multiple files::              Multiple files with the same name

Updating an Archive

* How to update::               How to update members of an archive
* Unsuitability of update::     Updating does not always work

Other @code{tar} Usages

* concatenate::                 Combining archives with @code{tar}
* Using cat with archives::     Combining archives with @code{cat}
* delete::                      Removing archive members from an archive

Combining Archives with @code{tar}

* Using cat with archives::     Combining archives with @code{cat}

Choosing Files and Names for @code{tar}

* file::                        Three frequently used options
* Selecting Archive Members::   Selecting archive members
* Exclusions::                  Excluding files by name
* Time criteria::               Time based exclusions
* Walking::                     Walking through directories
* Relative::                    Relative notations for file names

Choosing and Naming Archive Files

* Using file::                  Using the @kbd{--file} option
* Standard archive::            Archive on standard input or output
* lmh::                         Abbreviating drive and density
* Remote::                      Accessing a remote drive
* force-local::                 Inhibiting remote access
* rsh-command::                 Selecting the remote access mechanism
* rmt invocation::              How @code{rmt} works

Selecting Archive Members

* files-from::                  Reading names from a file
* find with files-from::        Using @code{find} to generate a list of files
* null::                        @code{NUL} terminated file names

Excluding Files by Name

* exclude::                     Excluding some files
* exclude-from::                Handling a lot of exclusions
* Wildcards::                   Wildcard patterns and matching
* Problems with exclude::       Problems with using the @code{exclude} options

Time Based Exclusions

* after-date::                  Operating only on new files
* newer-mtime::                 Operating only on altered files

Walking through Directories

* no-recursion::                Descending into directories
* one-file-system::             Crossing filesystem boundaries

Relative Notations for File Names

* directory::                   Changing the working directory
* absolute-names::              Absolute file names

Controlling the Archive Format

* Portability::                 Making @code{tar} archives more portable
* Forced fields::               Options to preset file attributes
* Compression::                 Using less space through compression
* Other formats::               Other non-@code{tar} formats

Making @code{tar} Archives More Portable

* Portable names::              Portable names
* dereference::                 Symbolic links
* old-archive::                 Old V7 archives
* posix::                       @code{tar} and POSIX @code{tar}
* Checksumming::                Checksumming problems

Options to Preset File Attributes

* mode::                        Presetting permissions
* owner::                       Forcing a given owner
* group::                       Forcing a given group
* numeric-owner::               Using numeric owner and group

Using Less Space through Compression

* Archive compression::         Compressing the whole archive
* Member compression::          Compressing individual members

Compressing the Whole Archive

* gzip::                        Using @code{gzip} compression
* compress::                    Using @code{compress} compression
* use-compress-program::        Using other compression programs

Compressing Individual Members

* sparse::                      Archiving sparse files

Other non-@code{tar} formats

* cpio::                        Tutorial introduction to @code{cpio}
* zip::                         Comparison of @code{tar} and @code{zip}

Tapes and Other Archive Media

* Blocking::                    Blocking
* Many on one::                 Many archives on one tape
* One on many::                 Using multiple tapes
* Being careful::               Being even more careful
* Other tape considerations::   Other tape considerations

Blocking

* Blocks and records::          Blocks and records
* blocking-factor::             Setting the blocking factor
* record-size::                 Setting a record size
* Media types::                 Per-Media blocking considerations
* Reblocking::                  Automatic reblocking

Many Archives on One Tape

* Tape positioning::            Tape positions and tape marks
* mt invocation::               The @code{mt} utility

Using Multiple Tapes

* Multi-volume archives::       Archives longer than one tape or disk
* multi-volume::                Using multi-volume mode
* tape-length::                 Announcing the tape length
* info-script::                 Taking actions at volume switching
* volno-file::                  Changing the volume number in prompts

Being Even More Careful

* label::                       Including labels in the archive
* verify::                      Verifying data as it is stored
* Write protection::            Write protection

Performing Backups and Restoring Files

* incremental listed-incremental::  The incremental options
* Backup levels::               Levels of backups
* Backup parameters::           Setting parameters for backups and restoration
* Scripted backups::            Using the backup scripts
* Scripted restoration::        Using the restore script

The Incremental Options

* incremental::                 The incremental options
* listed-incremental::          Backing up with a snapshot list

Levels of Backups

* Full dumps::                  Using @code{tar} to perform full dumps
* Incremental dumps::           Using @code{tar} to perform incremental dumps

Setting Parameters for Backups and Restoration

* backup-specs example::        An example text of @file{backup-specs}
* Script syntax::               Syntax for @file{backup-specs}

All @code{tar} Options

* Subcommand summary::          Subcommands
* Option summary::              @code{tar} options
* Short option summary::        Short options cross-reference

Date Input Formats

* General date syntax::         General date syntax
* Calendar date item::          Calendar date item
* Time of day item::            Time of day item
* Timezone item::               Timezone item
* Day of week item::            Day of week item
* Relative item in date strings::  Relative item in date strings
* Pure numbers in date strings::  Pure numbers in date strings
* Authors of getdate::          Authors of @code{getdate}

Format of Archive Files

* tar-h::                       The C description of a header block
* Standard format::             The standard format
* Extended format::             Extensions to the archive format

@end detailmenu
@end menu

@end ifinfo

@node Introduction, cpio Tutorial, Top, Top
@chapter Introduction

Welcome to the @code{pax} Utilities manual.  Most tools in this collection
are used to create and manipulate files (@dfn{archives}), which are actually
collections of many other files.  The utilities provide users with an
organized and systematic method for controlling a large amount of data.
Other tools are meant to manoeuvre magnetic tapes.

@menu
* Book contents::               What this book contains
* Definitions::                 Some definitions
* What cpio does::              What @code{cpio} does
* What pax does::               What @code{pax} does
* What tar does::               What @code{tar} does
* Stylistic conventions::       Stylistic conventions
* Authors::                     @code{tar} authors
* Reports::                     Reporting bugs or suggestions
@end menu

@node Book contents, Definitions, Introduction, Introduction
@section What this book contains

This chapter introduces you to various terms that will recur throughout the
book.  It also tells you who has worked on @code{tar} and its documentation,
and where you should send bug reports or comments.

The second chapter is a tutorial (@pxref{tar Tutorial}) which provides a
gentle introduction for people who are new to using @code{tar}.  It is meant
to be self-contained, not requiring any reading from subsequent chapters to
make sense.  It moves from topic to topic in a logical, progressive order,
building on information already explained.  The tutorial introduces the
three most frequently used subcommands (@value{create}, @value{list},
and @value{extract}) as well as a few frequently used options.

Each remaining chapter presents everything that needs to be said about
a specific topic.  These, taken altogether, should offer a complete
reference manual for @code{tar} (they do not refer to the tutorial chapter).
The entire book, including the tutorial, assumes that the reader understands
some basic concepts of using a Unix-type operating system.

The third chapter presents @code{tar} options and option syntax.  The fourth
chapter presents all @code{tar} subcommands, as well as many options more
specifically related to particular @code{tar} subcommands.  Other chapters
explain how one chooses files and entry names on which @code{tar} operates
and how one selects the format and portability of generated
archives.  The final chapters concentrate on magnetic media used for archiving,
and discuss how backups can be generated and restored.

One appendix (@pxref{Date input formats}) exists in its entirety in
other GNU manuals, and is mostly self-contained.  Another appendix
(@pxref{Archive format}), which details the format of the archive file
generated by @code{tar}, contains a long quotation taken directly from the
@code{tar} sources.

@node Definitions, What cpio does, Book contents, Introduction
@section Some definitions

@cindex archive
@cindex tar archive
The @code{tar} program is used to create and manipulate @code{tar}
archives.  An @dfn{archive} is a single file which contains the contents
of many files, while still identifying the name of each file, its
owner, and so forth.@footnote{In addition, archives record access
permissions, user and group, size in bytes, and last modification time.
Some archives also record the file names in each archived directory, as
well as other file and directory information.}  You can use @code{tar}
to @dfn{create} a new archive in a specified directory.

@cindex member
@cindex archive member
@cindex file name
@cindex member name
The files inside an archive are called @dfn{members}.  Within this
manual, we use the term @dfn{file} to refer only to files accessible in
the normal ways (by @code{ls}, @code{cat}, and so forth), and the term
@dfn{member} to refer only to the members of an archive.  Similarly, a
@dfn{file name} is the name of a file, as it resides in the filesystem,
and a @dfn{member name} is the name of an archive member within the
archive.

@cindex extraction
@cindex unpacking
The term @dfn{extraction} refers to the process of copying an archive
member (or multiple members) into in the filesystem as a file (or files).  Extracting
all the members of an archive is often called @dfn{extracting the
archive}.  The term @dfn{unpack} can also be used to refer to the
extraction of many or all the members of an archive.  Extracting an
archive does not destroy the archive's structure, just as creating an
archive does not destroy the copies of the files that exist outside of
the archive.  You may also @dfn{list} the members in a given archive
(this is often thought of as ``printing'' them to the standard output,
or the command line), or @dfn{append} members to a pre-existing archive.
All of these tasks can be performed using @code{tar} subcommands.

@node What cpio does, What pax does, Definitions, Introduction
@section What @code{cpio} does
@cindex cpio

The @code{cpio} program copies files into or out of a @code{cpio}
or @code{tar} archive.  The archive can be another file on the disk,
a magnetic tape, or a pipe.

@code{cpio} supports the following archive formats: binary, old ASCII,
new ASCII, crc, HPUX binary, HPUX old ASCII, old @code{tar}, and POSIX.1
@code{tar}.  The @code{tar} format is provided for compatibility with the
@code{tar} program.  By default, @code{cpio} creates binary format archives,
for compatibility with older @code{cpio} programs.  When extracting from
archives, @code{cpio} automatically recognizes which kind of archive it
is reading and can read archives created on machines with a different
byte-order.

@node What pax does, What tar does, What cpio does, Introduction
@section What @code{pax} does
@cindex pax

The @code{pax} program is the archiving utility specified and mandated by
POSIX.  It handles @code{cpio} or @code{tar} archives, using a different
user interface.  This program is not really available yet in @code{pax}
utilities: it only received little testing so far, and some required
functionnalities are still to be written.

@node What tar does, Stylistic conventions, What pax does, Introduction
@section What @code{tar} does
@cindex tar
The @code{tar} program allows the creation of @code{tar}
archives, as well as various other kinds of manipulation.  For example,
you can use @code{tar} on previously created archives to extract files,
to store additional files, or to update or list files which were already
stored.

Initially, @code{tar} archives were used to store files conveniently on
magnetic tape.  The name @samp{tar} comes from this use; it stands for
@strong{t}ape @strong{ar}chiver.  Despite the utility's name, @code{tar}
can direct its output to other available devices, files, or other programs (using
pipes).  @code{tar} can even access remote devices or files (as archives).

You can use @code{tar} archives in many ways.  We want to stress a few
of them: storage, backup, and transportation.

@table @asis
@item Storage
Often, @code{tar} archives are used to store related files for convenient
file transfer over a network.  While preparing it for distribution, software
is often bundled into @code{tar} archives, so that all the files relating
to a particular program (or set of related programs) can be transferred
as a single unit.

A magnetic tape can store several files in sequence.  However, the tape
has no names for these files; it only knows their relative position on
the tape.  One way to store several files on one tape and retain their
names is by creating a @code{tar} archive.  Even when the basic transfer
mechanism can keep track of names, as FTP can, the nuisance of handling
multiple files, directories, and multiple links makes @code{tar}
archives useful.

Archive files are also used for long-term storage.  You can think of
this as transportation from the present into the future.  (It is a
science-fiction idiom that you can move through time as well as in
space; the idea here is that @code{tar} can be used to move archives in
all dimensions, even time!)

@item Backup
Because the archive created by @code{tar} is capable of preserving file
information and directory structure, @code{tar} is commonly used for
performing full and incremental backups of disks.  A backup puts a
collection of files (possibly pertaining to many users and
projects) together on a disk or a tape.  This guards against accidental
destruction of the information in those files.  @code{tar} has
special features that allow it to be used to make incremental and full
dumps of all the files in a filesystem.

@item Transportation
You can create an archive on one system, transfer it to another system,
and extract the contents there.  This allows you to transport a group of
files from one system to another.
@end table

@node Stylistic conventions, Authors, What tar does, Introduction
@section Stylistic conventions

Conventionally, @code{tar} archives are given names ending with
@samp{.tar}.  This is not necessary for @code{tar} to operate properly,
but this manual follows that convention in order to accustom readers to
it and to make examples clearer.

@cindex tar file
@cindex entry
@cindex tar entry
Often, people refer to @code{tar} archives as ``@code{tar} files'', and
archive members as ``files'' or ``entries''.  For people familiar with
the operation of @code{tar}, this causes no difficulty.  However, in
this manual, we consistently refer to ``archives'' and ``archive
members'' to make learning to use @code{tar} easier for novice users.

@iftex
In the examples, @samp{$} represents a typical shell prompt.  It precedes
lines you should type; to make this more clear, any text meant to be
written by you is shown in @kbd{this font}, as opposed to lines which
represent the computer's response; those lines are shown in @code{this
font}, or sometimes @samp{like this}.
@end iftex

@ifinfo
In the examples, @samp{$} represents a typical shell prompt.  It
precedes lines you should type; to make this more clear, those lines as
well as the lines which represent the computer's response are shown in
@kbd{like this}.
@end ifinfo

Although long option names are more easily learned and read, short options
are still so widely used that we cannot ignore them.  So that you can become
familiar with both styles at once, this manual usually repeats both the long
(mnemonic) and short (abbreviated) option names whenever referring them,
as well as within examples.  Many options do not have a short version.

@node Authors, Reports, Stylistic conventions, Introduction
@section @code{tar} authors

The @code{tar} program in @code{paxutils} evolved out of a project
 originally written and maintained by John Gilmore (under
the name @w{@code{PD TAR}}).  The project started in 1985-08, and was offered
to the FSF in 1985-09 with the agreement that later FSF contributions
to @w{@code{PD TAR}} were to be public domain rather than copylefted.
The result was posted to @file{mod.sources} in 1986-10.  This version
had the three main subcommands (old and short style options), supported
both V7 format and a draft of P1003, archive compression, remote dumps
(using @w{@code{rsh dd}} instead of @code{rmt}), big blocking, and clean
end-of-file blocks, and was designed to be fast.  Written and initially
debugged on a Sun Workstation running 4.2BSD, @w{@code{PD TAR}} was
soon ported to Xenix, Unisoft, Vax 4.2BSD, utzoonix, USG, Masscomp,
Minix, and MS-DOS systems (VMS, Mac, Atari, and Amiga were added later).
Another version was posted to @file{comp.sources.unix} in 1987-11, and
was presented on the Sun User Group in 1987-12 as @code{sugtar}.

In 1988-02, the FSF asked Jay Fenlason to implement arbitrarily long file
names, append and update subcommands, multi-volume
support, and verify and backup features.  After having received John's
permission to do so in 1988-09, the FSF published a forked, copylefted
version named @code{gnutar} in 1990-01.  While @w{@code{PD TAR}}
continued to evolve
in parallel, unidentified derivatives were distributed separately without
sources, to the point that John decided in 1992-01, as a maintainer, that
the public domain status of @w{@code{PD TAR}} was @emph{unfortunate}.
In 1992-05, John wrote that it had been a mistake.  Later, in 1994-11, John
suggested that we merge @w{@code{PD TAR}} definitively into @code{gnutar}.

The sparse file processing in @code{tar}, added for the FSF by Joy Kendall
(1989-06 to 1989-08), has been the subject of much debate, as it directly
conflicts with the POSIX @code{prefix} field.@footnote{In 1988-03, Jay
Fenlason was notified of the impending existence of this @code{prefix}
field.  As J@"org Schilling (the @code{star} author)
once put it: @cite{I would call this a hard violation of the standard.}}

The FSF package has been maintained by Jay Fenlason (1988-02 to 1991-01) and
Michael Bushnell@footnote{In 1992, an enthusiastic teacher and his students
promised a new @code{tar} to the FSF, including curses, Athena and Motif
interfaces, wholly automated archives, multi-platform parallel tapes, all
backup formats, etc.  The FSF got totally seduced, and stopped all @code{tar}
development and most maintenance while waiting for the Wonder, which of
course, never came.} (1991-01 to 1993-03), with occasional interventions
from David J. MacKenzie.  Since 1994-06, Fran@,{c}ois Pinard has been maintaining it
with the help of numerous and kind users.  Let me stress that @code{tar}
is a collective work, and owes much to all those people who reported
problems, offered solutions and other insights, or shared their thoughts
and suggestions.  An impressive, yet only partial, list of those contributors
can be found in the @file{THANKS} file from the @code{tar} distribution.

Jay Fenlason put together a draft of a @code{tar} manual, borrowing notes
from the original @code{man} page from John Gilmore.  This draft was
distributed in @code{tar} versions 1.04 through 1.10, then withdrawn in
version 1.11, for Michael Bushnell and Amy Gorin to work on a revamped
version meant for the FSF, including a tutorial.  For version 1.11.8,
Fran@,{c}ois Pinard put a manual together by merging information from
all these sources.  For the FSF, Melissa Weisshaus later started an
overhaul of the manual, and so did Daniel Hagerty.  Another merge yielded
the manual you are now reading.  People contributed to specific aspects,
like Karl Berry for dates, @FIXME{Dan Hagerty for backups,} Eli Zaretskii
for MS-DOS, and surely others.  The title page of this manual
was once a bit crowded with too many authors, so I (Fran@,{c}ois)
decided for simplicity.  The title page now bears the sole name of John
Gilmore.  I chose to pay that simple tribute to John's involvement behind
the existence of this @code{tar}.@footnote{Readers often infer the author
of a program from the author of its manual.  The current distribution, and
even its documentation, is still in the spirit of the original @w{@code{PD
TAR}} incentive.  So, although many people contributed, John Gilmore remains
the real spiritual author for this package.}

The @code{cpio} program included in @code{paxutils} has been originally
written by Phil Nelson in the summer of 1988, and further maintained by
David MacKenzie up to 1992-11.  John Oleynick took over the @code{cpio}
distribution until 1996-01.  Tom Tromey worked on @code{cpio} from 1995-10
until 1998-05, that is, until it was merged with @code{tar} to create this
@code{paxutils} package.  The parts of this manual pertaining to @code{cpio},
including the @code{cpio} tutorial, have been written by Robert Carleton.

The @code{pax} program was added to the @code{cpio} distribution by Tom
Tromey in 1995-10, and was brought into @code{paxutils} together with
@code{cpio} and @code{mt}.

@node Reports, , Authors, Introduction
@section Reporting bugs or suggestions

@cindex bug reports
@cindex reporting bugs
If you find problems or have suggestions about this program or manual,
please report them to @email{paxutils-bugs@@iro.umontreal.ca}.@footnote{Even
though John Gilmore is the original author of @code{tar}, as he is no
longer actively involved in its maintenance, he now prefers to be left
out of @code{paxutils}-related email.}  You may also write directly, and less
officially, to @email{pinard@@iro.umontreal.ca}.  However, be warned that
bug reports are public by nature; they may be transmitted to other
maintainers or read by people interested in @code{tar} development.

A good bug report precisely explains your input, what you expected, what
you got, and why this is wrong: in fact, it should help us (that is,
the maintainer and those helping him) to see through your eyes.  If you
think it might be useful, also send the necessary files and a recipe
for reproducing the problem, carefully explaining what we should look at
and understand.  Even though we prefer small files, large files are sometimes
necessary; please make special, prior arrangements with us in such cases.
Be aware that some mailers mangle data, so @code{uuencode}, @code{shar},
or MIME methods are usually required.

You may expect an acknowledgement for your report soon after we receive it,
and then some more information later, after we have worked on it.  Due to
the difficult nature of many problems and the general work overload, it may take
a long while before you get a definitive reply.  The @file{BACKLOG} file,
in the distribution, summarizes all pending mail and reports about @code{tar}.

Even though we prefer reports about the latest version of @code{tar}, this is
not a strict requirement.  The command @kbd{tar --version} should tell you
which version you have.  The canonical distribution points for the version
documented in this manual, and the main GNU copy of this distribution, are:

@example
ftp://ftp.iro.umontreal.ca/pub/tar/tar-@value{VERSION}.tar.gz
ftp://ftp.gnu.org/pub/gnu/tar-@value{VERSION}.tar.gz
@end example

@noindent
You can also get @code{tar} from the numerous GNU mirrors around the world.
At the canonical distribution point, you might sometimes stumble on
prereleases (which should normally not have a GNU copy).  Pretest releases
always have a letter suffixing the version numbers.  Please do @emph{not}
redistribute these, as they are meant for pretesting only.  You ought to
understand that prereleases might not be as stable as true releases, and
that problems may be expected with them.  You may fetch pretest releases,
of course, but then, you should understand the collaborative spirit of
pretesting.

@node cpio Tutorial, tar Tutorial, Introduction, Top
@chapter Tutorial introduction to @code{cpio}
@cindex creating a cpio archive
@cindex extracting a cpio archive
@cindex copying directory structures
@cindex passing directory structures

The @code{cpio} program performs three primary functions.  Copying files to
an archive, extracting files from an archive, and passing files to another
directory tree.  An archive can be a file on disk, one or more floppy disks,
or one or more tapes.

When creating an archive, @code{cpio} takes the list of files to be processed
from the standard input, and then sends the archive to the standard output,
or to the device defined by the @kbd{-F} option.  @xref{Copy-out mode}.
Usually @code{find} or @code{ls} is used to provide this list to the
standard input.  In the following example you can see the possibilities
for archiving the contents of a single directory.

@example
@cartouche
% ls | cpio -ov > directory.cpio
@end cartouche
@end example

The @kbd{-o} option creates the archive, and the @kbd{-v} option prints
the names of the files archived as they are added.  Notice that the options
can be put together after a single @samp{-} or can be placed separately
on the command line.  The @samp{>} redirects the @code{cpio} output to
the file @file{directory.cpio}.

If you wanted to archive an entire directory tree, the find command can
provide the file list to @code{cpio}:

@example
@cartouche
% find . -print -depth | cpio -ov > tree.cpio
@end cartouche
@end example

This will take all the files in the current directory, the directories
below and place them in the archive @file{tree.cpio}.  Again the @kbd{-o}
creates an archive, and the @kbd{-v} option shows you the name of the
files as they are archived.  @xref{Copy-out mode}.  Using the @samp{.}
in the @code{find} statement will give you more flexibility when doing
restores, as it will save file names with a relative path vice a hard
wired, absolute path.  The @kbd{-depth} option forces @code{find} to
print of the entries in a directory before printing the directory itself.
This limits the effects of restrictive directory permissions by printing
the directory entries in a directory before the directory name itself.

Extracting an archive requires a bit more thought because @code{cpio}
will not create directories by default.  Another characteristic is that
it will not overwrite existing files unless you tell it to.

@example
@cartouche
% cpio -iv < directory.cpio
@end cartouche
@end example

This will retrieve the files archived in the file @file{directory.cpio}
and place them in the present directory.  The @kbd{-i} option extracts
the archive and the @kbd{-v} shows the file names as they are extracted.
If you are dealing with an archived directory tree, you need to use the
@kbd{-d} option to create directories as necessary, something like:

@example
@cartouche
% cpio -idv < tree.cpio
@end cartouche
@end example

This will take the contents of the archive @file{tree.cpio} and extract
it to the current directory.  If you try to extract the files on top of
files of the same name that already exist (and have the same or later
modification time) @code{cpio} will not extract the file unless told to
do so by the @kbd{-u} option.  @xref{Copy-in mode}.

In copy-pass mode, @code{cpio} copies files from one directory tree to
another, combining the copy-out and copy-in steps without actually using
an archive.  It reads the list of files to copy from the standard input;
the directory into which it will copy them is given as a non-option argument.
@xref{Copy-pass mode}.

@example
@cartouche
% find . -depth -print0 | cpio --null -pvd new-dir
@end cartouche
@end example

The example shows copying the files of the present directory, and
sub-directories to a new directory called new-dir.  Some new options are the
@kbd{-print0} available with GNU @code{find}, combined with the @kbd{--null}
option of @code{cpio}.  These two options act together to send file names between
find and @code{cpio}, even if special characters are embedded in the file names.
Another is @kbd{-p}, which tells @code{cpio} to pass the files it finds to the
directory @file{new-dir}.

@node tar Tutorial, cpio invocation, cpio Tutorial, Top
@chapter Tutorial introduction to @code{tar}

This chapter guides you through some basic examples of three @code{tar}
subcommands: @value{create}, @value{list}, and @value{extract}.  If
you already know how to use some other version of @code{tar}, then you
may not need to read this chapter.  This chapter omits most complicated
details about how @code{tar} works.

@menu
* Assumptions::                 Assumptions this tutorial makes
* Simplified invokation::       The structure of a @code{tar} command
* Basic tar options::           @code{tar} subcommands and options
* create list extract tutorial::  The three most frequently used subcommands
* file verbose help::           Three frequently used options
* create tutorial::             How to create archives
* list tutorial::               How to list archives
* extract tutorial::            How to extract members from an archive
* Looking ahead::               Looking ahead: The rest of this manual
@end menu

@node Assumptions, Simplified invokation, tar Tutorial, tar Tutorial
@section Assumptions this tutorial makes

This chapter is paced to allow beginners to learn about @code{tar}
slowly.  At the same time, we will try to cover all the basic aspects of
these three subcommands.  In order to accomplish both of these tasks, we
have made certain assumptions about your knowledge before reading this
manual, and the hardware you will be using:

@itemize @bullet
@item
Before you start to work through this tutorial, you should understand
what the terms ``archive'' and ``archive member'' mean
(@pxref{Definitions}).  In addition, you should understand something
about how Unix-type operating systems work, and you should know how to
use some basic utilities.  For example, you should know how to create,
list, copy, rename, edit, and delete files and directories; how to
change between directories; and how to figure out where you are in the
filesystem.  You should have some basic understanding of directory
structure and how files are named according to which directory they are
in.  You should understand concepts such as standard output and standard
input, what various definitions of the term ``argument'' mean, the
differences between relative and absolute path names, and the file
permission system.

@item
This manual assumes that you are working from your own home directory
(unless we state otherwise).  In this tutorial, you will create a directory
to practice @code{tar} commands in.  When we show path names, we will
assume that those paths are relative to your home directory.  All of my
examples are in a subdirectory of the directory named by that path name;
the subdirectory is called @file{practice}.

@item
In general, we show examples of archives which exist on (or can be
written to, or worked with from) a directory on a hard disk.  In most
cases, you could write those archives to, or work with them on, any other
device, such as a tape drive.  However, some of the later examples in
the tutorial and next chapter will not work on tape drives.
Additionally, working with tapes is much more complicated than working
with hard disks.  For these reasons, the tutorial does not cover working
with tape drives.  @xref{Media}, for complete information on using
@code{tar} archives with tape drives.

@end itemize

@node Simplified invokation, Basic tar options, Assumptions, tar Tutorial
@section The structure of a @code{tar} command

A @code{tar} command has this basic structure:

@smallexample
$ tar @var{subcommand} @var{option} @var{option} @dots{} @var{file} @var{file} @dots{}
@end smallexample

We will explain the various component parts of this command in the
rest of this chapter.  For more detailed information about the
structure of a @code{tar} command and how to invoke
@code{tar}, please see @ref{tar invocation}.

@node Basic tar options, create list extract tutorial, Simplified invokation, tar Tutorial
@section @code{tar} subcommands and options

@code{tar} can take a variety of arguments which specify and define
the actions it will have perform on a particular set of files or
an archive.  The arguments to @code{tar} fall into one of two classes:
options and non-options.  Options start with one or two dashes (@kbd{-}),
except for the very first argument following @kbd{tar} on the command line:
this argument always provides options, even if it does not start with a dash.

Some options fall into a class called @dfn{subcommands}; exactly one of
these is both allowed and required for any instance of using @code{tar};
you may @emph{not} specify more than one.  People sometimes speak of them
as @dfn{operating modes}.  You are in a particular operating mode when you
have specified the subcommand which calls for that mode; there are eight
subcommands in total, and thus there are eight operating modes.

The other arguments fall into the class known as @dfn{options}.  You are
not required to specify any options, and you are allowed to specify more
than one at a time (depending on the way you are using @code{tar} at
that time).  Some options are used so frequently, and are so useful for
helping you type commands more carefully, that they are effectively
``required''.  We will discuss them in this chapter.

You can write most of the @code{tar} subcommands and options in any of
three forms: long (mnemonic) form, short form, and old style.  Some of
the subcommands and options have no short or ``old'' forms; however, the
subcommands and options which we will cover in this tutorial have
corresponding abbreviations.  @FIXME{Make sure this is still the case,
at the end.}  We will indicate those abbreviations appropriately to get
you used to seeing them.  (Note that the ``old style'' option forms
exist in @code{tar} for compatibility with Unix @code{tar}.  We
present a full discussion of this way of writing options and subcommands
in @ref{Old style}, and we discuss the other two styles of
writing options in @ref{Long options} and @ref{Short options}.)

In the examples and in the text of this tutorial, we usually use the
long forms of subcommands and options; but the ``short'' forms produce
the same result and can make typing long @code{tar} commands easier.
For example, instead of typing

@smallexample
$ @kbd{tar --create --verbose --file=afiles.tar apple angst aspic}
@end smallexample

@noindent
you can type
@smallexample
$ @kbd{tar -c -v -f afiles.tar apple angst aspic}
@end smallexample

@noindent
or even
@smallexample
$ @kbd{tar -cvf afiles.tar apple angst aspic}
@end smallexample

@noindent
For more information on option syntax, see @ref{Styles}.  In
discussions in the text, when we name an option by its long form, we
also give the corresponding short option in parentheses.

The term ``option'' can be confusing at times, since ``subcommands''
are often lumped in with the actual, @emph{optional} ``options'' in
certain general class statements.  For example, we just talked about
``short and long forms of options and subcommands''.  However,
experienced @code{tar} users often refer to these by shorthand terms
such as ``short and long forms of options''.  This term assumes that
the ``subcommands'' are included as well.  Context will help you determine
which definition of ``options'' to use.

Similarly, the term ``command'' can be confusing, as it is often used in
two different ways.  People sometimes refer to @code{tar} ``commands''.
The term, @code{tar} @dfn{commands}, refers to the various
@emph{subcommands}.  However, you will also sometimes hear the term
``the @code{tar} command''.  When the word ``command'' is used
specifically like this, a person is usually referring to the whole line,
not the @code{tar} @emph{subcommand}.  Again, use context to figure out
which of the meanings the speaker intends.

@FIXME{We thought we knew about tar, but after reading the last two
paragraphs, we are now totally confused.  Options are actually subcommands,
subcommands are sometimes commands and sometimes command lines...HEEEELP!!!
We might just throw this away.}

@node create list extract tutorial, file verbose help, Basic tar options, tar Tutorial
@section The three most frequently used subcommands

Here are the three most frequently used subcommands (both short and long
forms), as well as a brief description of their meanings.  The rest of
this chapter will cover how to use these subcommands in detail.  We will
present the rest of the subcommands in the next chapter.

@table @asis
@item @value{create}
Create a new @code{tar} archive.
@item @value{list}
List the contents of an archive.
@item @value{extract}
Extract one or more members from an archive.
@end table

@node file verbose help, create tutorial, create list extract tutorial, tar Tutorial
@section Three frequently used options

To understand how to run @code{tar} in the three operating modes listed
previously, you also need to understand how to use two of the options to
@code{tar}: @value{file} (which takes an archive file as an argument)
and @value{verbose}.  (You are usually not @emph{required} to specify
either of these options when you run @code{tar}, but they can be very
useful in making things more clear and helping you avoid errors.)  A third
option, @value{help}, gives a brief list of subcommands and options.
Unlike other @code{tar} options, @value{help} is not run under any
operating mode; in this sense, it is more like a subcommand, except that
it does not act on any @code{tar} archive.

@menu
* file tutorial::               The @kbd{--file} option
* verbose tutorial::            The @kbd{--verbose} option
* help tutorial::               Getting help: Using the @kbd{--help} option
@end menu

@node file tutorial, verbose tutorial, file verbose help, file verbose help
@subsection The @kbd{--file} option

The @value{file} option specifies the name of an archive file.

You can specify an argument for the @value{file} option whenever you
use @code{tar}; this option determines the name of the archive file that
@code{tar} will work on.

If you don't specify this argument, then @code{tar} will use a default,
usually standard output or standard input, or some physical tape drive
attached to your machine.  If there is no tape drive attached, or the
default is not meaningful, then @code{tar} will print an error message.
The error message might look roughly like one of the following:

@smallexample
tar: can't open /dev/rmt8 : No such device or address
tar: can't open /dev/rsmt0 : I/O error
@end smallexample

@noindent
Thus, to avoid this sort of confusion, we recommend that you always
specify an archive file name by using @value{file} when writing your
@code{tar} commands.  For more information on using the @value{file}
option, see @ref{file}.

@node verbose tutorial, help tutorial, file tutorial, file verbose help
@subsection The @kbd{--verbose} option

The @value{verbose} option shows the files being worked on as @code{tar}
is running.

@value{verbose} shows details about the results of running
@code{tar}.  This can be especially useful when the results might not be
obvious.  For example, if you want to see the progress of @code{tar} as
it writes files into the archive, you can use the @value{verbose}
option.  In the beginning, you may find it useful to use
@value{verbose} at all times; when you are more accustomed to
@code{tar}, you will likely want to use it at certain times but not at
others.  We will use @value{verbose} at times to help make something
clear, and we will give many examples both using and not using
@value{verbose} to show the differences.

Sometimes, a single instance of @value{verbose} on the command line
will show a full, @code{ls}-style listing of an archive or files,
giving sizes, owners, and similar information.  Other times,
@value{verbose} will only show files or members that the particular
subcommand is operating on at the time.  In the latter case, you can
use @value{verbose} twice in a command to get a listing such as that
in the former case.  For example, instead of saying

@smallexample
$ @kbd{tar -cvf afiles.tar apple angst aspic}
@end smallexample

@noindent
above, you might say

@smallexample
$ @kbd{tar -cvvf afiles.tar apple angst aspic}
@end smallexample

@noindent
This works equally well using short or long forms of options.  Using long
forms, you would simply write out the option twice, like this:

@smallexample
$ @kbd{tar --create --verbose --verbose @dots{}}
@end smallexample

@noindent
Note that you must double the hyphens properly each time.

Later in the tutorial, we will give examples using @w{@kbd{--verbose
--verbose}}.

@node help tutorial, , verbose tutorial, file verbose help
@subsection Getting help: Using the @kbd{--help} option

The @value{help} option to @code{tar} prints out a summary list of all
options available for the current version of @code{tar} on your system.
There is no abbreviation for this option.

@node create tutorial, list tutorial, file verbose help, tar Tutorial
@section How to create archives

One of the basic subcommands of @code{tar} is @value{create}, which
you use to create a @code{tar} archive.  We will explain
@value{create} first because, in order to learn about the other
subcommands, you will find it useful to have an archive available to
practice on.

To make this as easy as possible, you will first create a directory
containing three files (eventually you will create more practice files).
Then, we will show you how to create an @emph{archive} (inside the new
directory).  Both the directory and the archive are specifically for
you to practice on.  The rest of this chapter and the next chapter will
show many examples using this directory and the files you will create:
some of those files may be other directories and other archives.

The three files you will archive in this example are called
@file{blues}, @file{folk}, and @file{jazz}.  The archive is called
@file{genres.tar}.

This section will proceed slowly, detailing how to use @value{create}
in @code{verbose} mode, and showing examples using both short and long
forms.  In the rest of the tutorial, and in the examples in the next
chapter, we will proceed at a slightly quicker pace.  This section moves
slowly so that novice users can begin to understand how @code{tar}
works.

@menu
* prepare for examples::        Preparing a practice directory for examples
* Creating the archive tutorial::  Creating the archive
* create verbose::              Running @kbd{--create} with @kbd{--verbose}
* Short create::                Short forms with @kbd{--create}
* create dir tutorial::         Archiving directories
@end menu

@node prepare for examples, Creating the archive tutorial, create tutorial, create tutorial
@subsection Preparing a practice directory for examples

To follow along with this and future examples, create a new directory
called @file{practice} containing files called @file{blues}, @file{folk}
and @file{jazz}.  The files can contain any information you like:
ideally, they should contain information which relates to their names,
and be of different lengths.  Our examples assume that @file{practice}
is a subdirectory of your home directory.

Now @code{cd} to the directory named @file{practice}; @file{practice}
is now your @dfn{working directory}.  (@emph{Please note}: Although
the full path name of this directory is
@w{@file{/@var{homedir}/practice}}, in our examples we will refer to
this directory as @file{practice}; the @var{homedir} is presumed.)

In general, you should check that the files to be archived exist where you
think they do (in the working directory) by running @code{ls}.  So let's
do it:

@smallexample
$ @kbd{ls}
blues	folk	jazz
@end smallexample

It is very important to make sure there isn't already a file in the
working directory with the archive name you intend to use (in this
case, @file{collection.tar}), or that you don't care about its contents.
Whenever you use @kbd{create}, @code{tar} will erase the current contents
of the file named by @value{file} if it exists.  @code{tar} will not
tell you if you are about to overwrite a file unless you specify an option
which does this @xref{backup}.  To add files to an existing archive, you
need to use a different option, such as @value{append}; see @ref{append}
for information on how to do this.

@FIXME{We don't think there is an option to prevent overwriting an
existing file with an archive when --create is used.}

@node Creating the archive tutorial, create verbose, prepare for examples, create tutorial
@subsection Creating the archive

To place the files @file{blues}, @file{folk}, and @file{jazz} into an
archive named @file{collection.tar}, use the following command:

@smallexample
$ @kbd{tar --create --file=collection.tar blues folk jazz}
@end smallexample

The order of the arguments is not very important, @emph{when using long
option forms}.  You could also say:

@smallexample
$ @kbd{tar blues --create folk --file=collection.tar jazz}
@end smallexample

@noindent
However, you can see that this order is harder to understand; this is
why we will list the arguments in the order that makes the commands
easiest to understand (and we encourage you to do the same when you use
@code{tar}, to avoid errors).

Note that the part of the command that says
@w{@kbd{--file=collection.tar}} is considered to be @emph{one} argument.
If you substituted any other string of characters for
@kbd{`collection.tar'},  then that string would become the name of the
archive file you create.

The order of the options becomes more important when you begin to use
short forms.  With short forms, if you type commands in the wrong order
(even if you type them correctly in all other ways), you may end up with
results you don't expect.  For this reason, it is a good idea to get
into the habit of typing options in the order that makes inherent sense.
@xref{Short create}, for more information on this.

In this example, you type the command as shown above: @value{create}
is the subcommand which creates the new archive
(@file{collection.tar}), and @value{file} is the option which lets
you give it the name you chose.  The files @file{blues}, @file{folk},
and @file{jazz} are now members of the archive @file{collection.tar}
(they are @dfn{file name arguments} to the @value{create} subcommand).
@FIXME{xref here to the discussion of file name args?}  Now that they
are are in the archive, they are called @emph{archive members}, not
files @FIXME{xref to definitions?}.

When you create an archive, you @emph{must} specify which files you want
placed in the archive.  If you do not specify any archive members,
@code{tar} will complain.

If you now list the contents of the working directory (@kbd{ls}), you will
find the archive file listed as well as the files you saw previously:

@smallexample
$ @kbd{ls}
blues	collection.tar	folk	jazz
@end smallexample

@noindent
Creating the archive @file{collection.tar} did not destroy the copies of
the files in the directory.

Keep in mind that if you don't indicate any subcommand, @code{tar} will not
run and will prompt you for one.  If you don't name any files, @code{tar}
will complain.  You must have write access to the working directory,
or else you will not be able to create an archive in that directory.

@emph{Caution}: Do not attempt to use @value{create} to add files to
an existing archive; it will delete the archive and write a new one.
Use @value{append} instead.  @xref{append}.

@node create verbose, Short create, Creating the archive tutorial, create tutorial
@subsection Running @kbd{--create} with @kbd{--verbose}

If you include the @value{verbose} option on the command line,
@code{tar} will list the files it is acting on as it is working.  In
verbose mode, the @code{create} example above would appear as:

@smallexample
$ @kbd{tar --create --verbose --file=collection.tar blues folk jazz}
blues
folk
jazz
@end smallexample

This example is just like the example we showed which did not use
@value{verbose}, except that @code{tar} generated the remaining
@iftex
lines (note the different font styles).
@end iftex
@ifinfo
lines.
@end ifinfo

In the rest of the examples in this chapter, we will frequently use
@code{verbose} mode so we can show actions or @code{tar} responses that
you would otherwise not see, and which are important for you to
understand what @code{tar} does.

@node Short create, create dir tutorial, create verbose, create tutorial
@subsection Short forms with @kbd{--create}

As we said before, the @value{create} subcommand is one of the most
basic uses of @code{tar}, and you will use it countless times.
Eventually, you will probably want to use abbreviated (or ``short'')
forms of options.  A full discussion of the three different forms that
options can take appears in @ref{Styles}; for now, here is what the
previous example (including the @value{verbose} option) looks like
using short option forms:

@smallexample
$ @kbd{tar -cvf collection.tar blues folk jazz}
blues
folk
jazz
@end smallexample

@noindent
As you can see, the system responds the same no matter whether you use
long or short option forms.

One difference between using short and long option forms is that, although
the exact placement of arguments following options is no more specific
when using short forms, it is easier to become confused and make a mistake
when using short forms.  For example, suppose you attempted the above
example in the following way:

@smallexample
$ @kbd{tar -cfv collection.tar blues folk jazz}
tar: Cannot add file collection.tar: No such file or directory
tar: Error exit delayed from previous errors
$ @kbd{ls}
blues   folk   jazz   v
$
@end smallexample

@noindent
You got error messages and a file called @file{v}.  What happened is
that @code{tar} tried to make an archive file called @file{v},
containing the files @file{blues}, @file{folk}, and @file{jazz}, because
the @samp{v} is the closest ``file name'' to the @kbd{-f} option, and
is thus taken to be the chosen archive file name.  @code{tar} tried
to add a file called @file{collection.tar} to the @file{v} archive file;
if the file @file{collection.tar} did not already exist, @code{tar} will
report an error indicating that this file does not exist.  If the file
@file{collection.tar} does already exist (e.g., from a previous command
you may have run), then @code{tar} will add this file to the archive.
Because the @kbd{-v} option did not get registered, @code{tar} will not
run under @emph{verbose} mode, and will not report its progress.

The end result is that you may be quite confused about what happened,
and possibly overwrite a file.  To illustrate this further, we will show
you how an example we showed previously would look using short forms.

This example,

@smallexample
$ @kbd{tar blues --create folk --file=collection.tar jazz}
@end smallexample

@noindent
is confusing as it is.  When shown using short forms, however, it
becomes much more so:

@smallexample
$ @kbd{tar blues -c folk -f collection.tar jazz}
@end smallexample

@noindent
It would be very easy to put the wrong string of characters
immediately following the @kbd{-f}, but doing that could sacrifice
valuable data.

For this reason, we recommend that you pay very careful attention to
the order of options and placement of file and archive names, especially
when using short option forms.  Not having the option name written out
mnemonically can affect how well you remember which option does what, and
therefore where different names have to be placed.  (Placing options in
an unusual order can also cause @code{tar} to report an error if you have
set the shell environment variable, @code{POSIXLY_CORRECT}; @pxref{posix},
for more information on this.)

@node create dir tutorial, , Short create, create tutorial
@subsection Archiving directories

@cindex Archiving directories
@cindex Directories, Archiving
You can archive a directory by specifying its directory name as a
file name argument to @code{tar}.  The files in the directory will be
archived relative to the working directory, and the directory will be
re-created along with its contents when the archive is extracted.

To archive a directory, first move to its superior directory.  If you
have followed the previous instructions in this tutorial, you should
type:

@smallexample
$ @kbd{cd ..}
$
@end smallexample

@noindent
This will put you into the directory which contains @file{practice},
that is, your home directory.  Once in the superior directory, you can
specify the subdirectory, @file{practice}, as a file name argument.  To
store @file{practice} in the new archive file @file{music.tar}, type:

@smallexample
$ @kbd{tar --create --verbose --file=music.tar practice}
@end smallexample

@noindent
@code{tar} should output:

@smallexample
practice/
practice/blues
practice/folk
practice/jazz
practice/collection.tar
@end smallexample

Note that the archive thus created is not in the subdirectory
@file{practice}, but rather in the current working directory---the
directory from which @code{tar} was invoked.  Before trying to archive a
directory from its superior directory, you should make sure you have
write access to the superior directory itself, not only the directory
you are trying archive with @code{tar}.  For example, you will probably
not be able to store your home directory in an archive by invoking
@code{tar} from the root directory; @xref{absolute-names}.  (Note
also that @file{collection.tar}, the original archive file, has itself
been archived.  @code{tar} will accept any file as a file to be
archived, regardless of its content.  When @file{music.tar} is
extracted, the archive file @file{collection.tar} will be rewritten
into the file system).

If you give @code{tar} a command such as

@smallexample
$ @kbd{tar --create --file=foo.tar .}
@end smallexample

@noindent
@code{tar} will report @samp{tar: foo.tar is the archive; not dumped}.
This happens because @code{tar} creates the archive @file{foo.tar}
in the current directory before putting any files into it.  Then, when
@code{tar} attempts to add all the files in the directory @file{.} to
the archive, it notices that the file @file{foo.tar} is the same as the
archive, and skips it.  (It makes no sense to put an archive into itself.)
@code{tar} will continue in this case, and create the archive normally,
except for the exclusion of that one file.  (@emph{Please note:} Some other
versions of @code{tar} are not so clever; they might enter an infinite
loop when this happens.  It is safer, in general, not to depend on
@code{tar} behavior, by making sure that the archive is not created
inside a directory that is itself being dumped.)  Some MS-Windows file systems
(notably, Windows 95 VFAT disks) don't support the feature which is
used by @code{tar} to detect that the archive is included in itself,
so the archive @emph{will} be included on those file systems.

@node list tutorial, extract tutorial, create tutorial, tar Tutorial
@section How to list archives

Often, you will find yourself wanting to determine exactly what a
particular archive contains.  You can use the @value{list} subcommand
to get the member names as they currently appear in the archive, as well
as various attributes of the files at the time they were archived.  For
example, you can examine the archive @file{genres.tar} that you created
in the last section with the command,

@smallexample
$ @kbd{tar --list --file=genres.tar}
@end smallexample

@noindent
The output of @code{tar} would then be:

@smallexample
blues
folk
jazz
@end smallexample

If you use the @value{verbose} option with @value{list}, then
@code{tar} will print out a listing reminiscent of @w{@kbd{ls -l}},
showing owner, file size, and so forth.

If you had used @code{verbose} mode, the example above would look
like:

@smallexample
$ @kbd{tar --list --verbose --file=genres.tar folk}
-rw-rw-rw- myself users 62 1990-05-23 10:55 folk
@end smallexample

@cindex File name arguments, using @value{list} with
@cindex --list with file name arguments
You can specify one or more individual member names as arguments when
using @kbd{list}.  In this case, @code{tar} will only list the
names of members you identify.  For example, @w{@kbd{tar --list
--file=afiles.tar apple}} would only print @file{apple}.

@menu
* absolute tutorial::           Specifying Member Names Correctly
* Listing directories::         Listing the contents of a stored directory
@end menu

@node absolute tutorial, Listing directories, list tutorial, list tutorial
@subsection Specifying member names correctly

@FIXME{if this stays here, needs an intro paragraph}

@FIXME{need to show the creation of bfiles somewhere above!!! : }

@noindent
The archive @file{bfiles.tar} would list as follows:

@smallexample
./birds
baboon
./box
@end smallexample

@noindent
Be sure to use a @value{file} option just as with @value{create}
to specify the name of the archive.

Because @code{tar} preserves paths, file names must be specified as they
appear in the archive (that is, relative to the directory from which the
archive was created).  Therefore, it is essential when specifying member
names to @code{tar} that you give the exact member names.  For example,
@w{@kbd{tar --list --file=bfiles birds}} would produce an error message
something like @samp{tar: birds: Not found in archive}, because there is
no member named @file{birds}, only one named @file{./birds}.  While the
names @file{birds} and @file{./birds} name the same file, @emph{member}
names are compared using a simplistic name comparison, in which an exact
match is necessary.  @xref{absolute-names}.

However, @w{@kbd{tar --list --file=genres.tar folk}} would respond
with @file{folk}, because @file{folk} is in the archive file
@file{genres.tar}.  If you are not sure of the exact file name, try
listing all the files in the archive and searching for the one you
expect to find; remember that if you use @value{list} with no file
names as arguments, @code{tar} will print the names of all the members
stored in the specified archive.

@node Listing directories, , absolute tutorial, list tutorial
@subsection Listing the contents of a stored directory

To get information about the contents of an archived directory,
use the directory name as a file name argument in conjunction with
@value{list}.  To determine file attributes, include the
@value{verbose} option.

For example, to find out about files in the directory @file{practice} in
the archive file @file{music.tar}, type:

@smallexample
$ @kbd{tar --list --verbose --file=music.tar practice}
@end smallexample

@code{tar} responds:

@smallexample
drwxrwxrwx myself users 0 1990-05-31 21:49 practice/
-rw-rw-rw- myself users 42 1990-05-21 13:29 practice/blues
-rw-rw-rw- myself users 62 1990-05-23 10:55 practice/folk
-rw-rw-rw- myself users 40 1990-05-21 13:30 practice/jazz
-rw-rw-rw- myself users 10240 1990-05-31 21:49 practice/collection.tar
@end smallexample

When you use a directory name as a file name argument, @code{tar} acts on
all the files (including subdirectories) in that directory.

@node extract tutorial, Looking ahead, list tutorial, tar Tutorial
@section How to extract members from an archive
@cindex Extraction
@cindex Retrieving files from an archive
@cindex Resurrecting files from an archive

The act of retrieving members from an archive so they can be used and
manipulated as unarchived files again is called @dfn{extraction}.  To
extract files from an archive, use the @value{extract} subcommand.
As with @value{create}, specify the name of the archive with
@value{file}.  Extracting an archive does not modify the archive in
any way; you can extract it multiple times if you want or need to.

Using @value{extract}, you can extract an entire archive, or specific
files.  The files can be directories containing other files, or not.  As
with @value{create} and @value{list}, you may use the short or the
long form of the subcommand without affecting the performance.

If you have files in the working directory with the same name as members
that you are about to extract, the files will be overwritten by the newly
extracted members.  @code{tar} has new options which will permit you
to keep more than one copy of a file with the same name as an archive is
extracted; for more information about this, consult @ref{backup}.

@menu
* Extracting archives::         Extracting an entire archive
* Extracting files::            Extracting specific files
* Extracting directories::      Extracting files that are directories
* Failing commands::            Commands that will fail
* Two mistakes::                Two dangerous mistakes
@end menu

@node Extracting archives, Extracting files, extract tutorial, extract tutorial
@subsection Extracting an entire archive

To extract an entire archive, specify the archive file name only, with
no individual file names as arguments.  For example,

@smallexample
$ @kbd{tar -xvf collection.tar}
@end smallexample

@noindent
produces this:

@smallexample
-rw-rw-rw- myself users 28 1996-10-18 16:31 jazz
-rw-rw-rw- myself users 21 1996-09-23 16:44 blues
-rw-rw-rw- myself users 20 1996-09-23 16:44 folk
@end smallexample

@node Extracting files, Extracting directories, Extracting archives, extract tutorial
@subsection Extracting specific files

To extract specific archive members, give their exact member names as
arguments, as printed by @value{list}.  If you have mistakenly deleted
one of the files you had placed in the archive @file{genres.tar} earlier
(say, @file{blues}), you can extract it from the archive without changing the
archive's structure.  It will be identical to the original file @file{blues}
that you deleted.  @FIXME{will the times, permissions, owner, etc be the
same, also?}

First, make sure you are in the @file{practice} directory, and list the
files in the directory.  Now, delete the file @file{blues} and list
the files in the directory again.

You can now extract the member @file{blues} from the archive file
@file{genres.tar} like this:

@smallexample
$ @kbd{tar --extract --file=genres.tar blues}
@end smallexample

@noindent
If you list the files in the directory again, you will see that the file
@file{blues} has been restored, with its original permissions, creation
time, and owner.  These parameters will be identical to those which the
file had when you originally placed it in the archive; any changes you
may have made before deleting the file from the file system, however,
will @emph{not} have been made to the archive member.  (If the restoring
user was not also the owner of the archived members, and if the current
@code{umask} is compatible with original permissions, the various
permissions would probably be different.)  The archive file
@file{genres.tar} is the same as it was before you extracted
@file{blues}.  You can confirm this by running @code{tar} with
@value{list}.

Remember that as with other subcommands, specifying the exact member name
is important.  @w{@kbd{tar --extract --file=bfiles.tar birds}} will fail,
because there is no member named @file{birds}.  To extract the member named
@file{./birds}, you must specify @w{@kbd{tar --extract --file=bfiles.tar
./birds}}.  To find the exact member names of the members of an archive,
use @value{list} (@pxref{list}).

If you give the @value{verbose} option, then @value{extract} will
print the names of the archive members as it extracts them.

@node Extracting directories, Failing commands, Extracting files, extract tutorial
@subsection Extracting files that are directories

Extracting directories which are members of an archive is similar to
extracting other files.  The main difference to be aware of is that
if the extracted directory has the same name as any directory already
in the working directory, then files in the extracted directory will
be placed into the directory of the same name.  Likewise, if there are
files in the pre-existing directory with the same names as the members
which you extract, the files from the extracted archive will overwrite
the files already in the pre-existing directory (and possible subdirectories).
This will happen regardless of whether or not the files in the pre-existing
directory were more recent than those extracted.

If a file was stored with a directory name as part of its file name, and
that directory does not exist under the working directory when the file
is extracted, @code{tar} will create the directory.

We can demonstrate how to use @value{extract} to extract a directory
file with an example.  Change to the @file{practice} directory if you
weren't there, and remove the files @file{folk} and @file{jazz}.  Then,
go back to the parent directory and extract the archive
@file{music.tar}.  You may either extract the entire archive, or only
the files you just deleted.  To extract the entire archive, don't give
any file names as arguments after the archive name @file{music.tar}.  To
extract only the files you deleted, use the following command:

@smallexample
$ @kbd{tar -xvf music.tar practice/folk practice/jazz}
@end smallexample

@FIXME{Need to show tar's response; used verbose above.  Also, here's a
good place to demonstrate the -v -v thing.}

@noindent
Because you created the directory with @file{practice} as part of the
file names of each of the files by archiving the @file{practice}
directory as @file{practice}, you must give @file{practice} as part
of the file names when you extract those files from the archive.

@node Failing commands, Two mistakes, Extracting directories, extract tutorial
@subsection Commands that will fail

Here are some sample commands you might try which will not work, and why
they won't work.

If you try to use this command:

@smallexample
$ @kbd{tar -xvf music.tar folk jazz}
@end smallexample

@noindent
you will get the following response:

@smallexample
tar: folk: Not found in archive
tar: jazz: Not found in archive
$
@end smallexample

@noindent
This is because these files were not originally @emph{in} the parent
directory @file{..} where the archive is located; they were in the
@file{practice} directory, and their file names reflect this:

@smallexample
$ @kbd{tar -tvf music.tar}
practice/folk
practice/jazz
practice/rock
@end smallexample

@noindent
Likewise, if you try to use this command,

@smallexample
$ @kbd{tar -tvf music.tar folk jazz}
@end smallexample

@noindent
you would get a similar response.  Members with those names are not in the
archive.  You must use the correct member names in order to extract the
files from the archive.

If you have forgotten the correct names of the files in the archive,
use @w{@kbd{tar --list --verbose}} to list them correctly.

@node Two mistakes, , Failing commands, extract tutorial
@subsection Two dangerous mistakes

Here are two dangerous mistakes you should try to avoid which can occur
while using @value{extract}:

@enumerate
@item
@cindex Mistake: use @code{create} instead of @code{extract}
Do not mistakenly use @code{create} instead of @code{extract},
when your intent is to extract the contents of an archive.

This error can occur if you mistype the @kbd{c} key for the @kbd{x} key.
You might do this when you are tired, since the two keys, @kbd{c} and
@kbd{x}, are next to each other on a @sc{QWERTY} keyboard.  If you make
this mistake, instead of unpacking the archive, you will destroy it.

@item
@cindex Mistake: forget archive name
Do not mistakenly forget to list the name of the file into which
you are archiving, especially when your intent is to create an
archive with just one file in it.

You might do this by force of habit, by inadvertently adding the @kbd{f}
key to your cluster of option letters while forgetting to name the
archive.  If you make this mistake, instead of archiving the file, you
will destroy it.
@end enumerate

@node Looking ahead, , extract tutorial, tar Tutorial
@section Looking ahead: The rest of this manual

You have now seen how to use the main subcommands available to @code{tar},
and a number of the possible options.  You should be able to take
advantage of the @code{tar} program adequately to help yourself in many real situations.

The next two chapters review everything you have learned so far, while going
in depth about every topic, most probably to a greater extent than you really
need for simple day-to-day use.  The remaining chapters explain how
to choose and change file and archive names, and how to use files to store
names of other files which you can then call as arguments to @code{tar}
(this can help you save time if you expect to archive the same list of
files a number of times).

If there are too many files to list conveniently on the command line,
you can list the names in a file, and @code{tar} will read that file.
@xref{files-from}.

There are various ways of causing @code{tar} to skip over certain files
and not archive them.  @xref{Choosing}.

@node cpio invocation, pax invocation, tar Tutorial, Top
@chapter Invoking @code{cpio}
@cindex invoking cpio
@cindex command line options

@menu
* Copy-out mode::               Copy-out mode
* Copy-in mode::                Copy-in mode
* Copy-pass mode::              Copy-pass mode
* cpio Options::                Options for @code{cpio}
@end menu

@node Copy-out mode, Copy-in mode, cpio invocation, cpio invocation
@section Copy-out mode

In copy-out mode, @code{cpio} copies files into an archive.  It reads a
list of filenames, one per line, on the standard input, and writes the
archive onto the standard output.  A typical way to generate the list
of filenames is with the @code{find} command; you should give find the
@kbd{-depth} option to minimize problems with permissions on directories
that are unreadable.  @xref{cpio Options}.

@example
cpio @{-o|--create@} [-0acvABLV] [-C bytes] [-H format]
[-M message] [-O [[user@@]host:]archive] [-F [[user@@]host:]archive]
[--file=[[user@@]host:]archive] [--format=format]
[--message=message][--null] [--reset-access-time] [--verbose]
[--dot] [--append] [--block-size=blocks] [--dereference]
[--io-size=bytes] [--help] [--version] < name-list [> archive]
@end example

@node Copy-in mode, Copy-pass mode, Copy-out mode, cpio invocation
@section Copy-in mode

In copy-in mode, @code{cpio} copies files out of an archive or lists
the archive contents.  It reads the archive from the standard input.
Any non-option command line arguments are shell globbing patterns; only
files in the archive whose names match one or more of those patterns are
copied from the archive.  Unlike in the shell, an initial @samp{.} in a
filename does match a wildcard at the start of a pattern, and a @samp{/}
in a filename can match wildcards.  If no patterns are given, all files
are extracted.  @xref{cpio Options}.

@example
cpio @{-i|--extract@} [-bcdfmnrtsuvBSV] [-C bytes] [-E file]
[-H format] [-M message] [-R [user][:.][group]]
[-I [[user@@]host:]archive] [-F [[user@@]host:]archive]
[--file=[[user@@]host:]archive] [--make-directories]
[--nonmatching] [--preserve-modification-time]
[--numeric-uid-gid] [--rename] [--list] [--swap-bytes] [--swap]
[--dot] [--unconditional] [--verbose] [--block-size=blocks]
[--swap-halfwords] [--io-size=bytes] [--pattern-file=file]
[--format=format] [--owner=[user][:.][group]] [--sparse]
[--no-preserve-owner] [--message=message] [--help] [--version]
[--no-absolute-filenames] [--only-verify-crc] [--quiet] [--silent]
[pattern...] [< archive]
@end example

@node Copy-pass mode, cpio Options, Copy-in mode, cpio invocation
@section Copy-pass mode

In copy-pass mode, @code{cpio} copies files from one directory tree to
another, combining the copy-out and copy-in steps without actually creating
an archive.  It reads the list of files to copy from the standard input;
the directory into which it will copy them is given as a non-option argument.
@xref{cpio Options}.

@example
cpio @{-p|--pass-through@} [-0adlmuvLV] [-R [user][:.][group]]
[--null] [--reset-access-time] [--make-directories] [--link]
[--preserve-modification-time] [--unconditional] [--verbose]
[--dot] [--dereference] [--owner=[user][:.][group]] [--sparse]
[--no-preserve-owner] [--help] [--version] destination-directory
< name-list
@end example

@node cpio Options, , Copy-pass mode, cpio invocation
@section Options for @code{cpio}

@table @kbd
@item --null
@itemx -0
Read a list of filenames terminated by a @kbd{@key{NUL}} character, instead
of a newline, so that files whose names contain newlines can be archived.
GNU @code{find} is one way to produce a list of null-terminated filenames.
This option may be used in copy-out and copy-pass modes.

@item --reset-access-time
@itemx -a
Reset the access times of files after reading them, so that it does not look
like they have just been read.  (This option has no effect on plain DOS,
since DOS filesystem only stores a single time stamp per file.  It does
work on Windows 9X.)

@item --append
@itemx -A
Append to an existing archive.  Only works in copy-out mode.  The archive
must be a disk file specified with the @kbd{-O} or @kbd{-F} (@kbd{--file})
option.

@item --swap
@itemx -b
Swap both halfwords of words and bytes of halfwords in the data.  Equivalent
to @kbd{-sS}.  This option may be used in copy-in mode.  Use this option
to convert 32-bit integers between big-endian and little-endian machines.

@item -B
Set the I/O block size to 5120 bytes.  Initially the block size is 512 bytes.

@item --block-size=@var{block-size}
Set the I/O block size to @var{block-size} * 512 bytes.

@item -c
Use the old portable (ASCII) archive format.

@item --io-size=@var{io-size}
@itemx -C @var{io-size}
Set the I/O block size to @var{io-size} bytes.

@item --make-directories
@itemx -d
Create leading directories where needed.

@item --pattern-file=@var{file}
@itemx -E @var{file}
Read additional patterns specifying filenames to extract or list from
@var{file}.  The lines of @var{file} are treated as if they had been
non-option arguments to @code{cpio}.  This option is used in copy-in mode.

@item --nonmatching
@itemx -f
Only copy files that do not match any of the given patterns.

@item --file=@var{archive}
@itemx -F @var{archive}
Archive filename to use instead of standard input or output.  To use a
tape drive on another machine as the archive, use a filename that starts
with @samp{@var{HOSTNAME}:}.  The hostname can be preceded by a username
and an @samp{@@} to access the remote tape drive as that user, if you have
permission to do so (typically an entry in that user's @file{~/.rhosts}
file).

Remote archives are not supported on MS-DOS and MS-Windows.

@item --force-local
With @kbd{-F}, @kbd{-I}, or @kbd{-O}, take the archive file name to be a
local file even if it contains a colon, which would ordinarily indicate
a remote host name.

@item --format=@var{format}
@item -H @var{format}
Use archive format @var{format}.  The valid formats are listed below;
the same names are also recognized in all-caps.  The default in copy-in
mode is to automatically detect the archive format, and in copy-out mode
is @code{bin}.

@table @code
@item bin
The obsolete binary format.

@item odc
The old (POSIX.1) portable format.

@item newc
The new (SVR4) portable format, which supports file systems having more
than 65536 i-nodes.

@item crc
The new (SVR4) portable format with a checksum added.

@item tar
The old @code{tar} format.

@item ustar
The POSIX.1 @code{tar} format.  Also recognizes most @code{tar} archives,
many of which are similar, but not identical.

@item hpbin
The obsolete binary format used by HPUX's @code{cpio} (which stores device
files differently).

@item hpodc
The portable format used by HPUX's @code{cpio} (which stores device files
differently).
@end table

@item --extract
@itemx -i
Run in copy-in mode.  @xref{Copy-in mode}.

@item -I @var{archive}
Archive filename to use instead of standard input.  To use a tape drive
on another machine as the archive, use a filename that starts with
@samp{@var{hostname}:}.  The hostname can be preceded by a username and
an @samp{@@} to access the remote tape drive as that user, if you have
permission to do so (typically an entry in that user's @file{~/.rhosts}
file).

Remote archives are not supported on MS-DOS and MS-Windows.

@item -k
Ignored; for compatibility with other versions of @code{cpio}.

@item --link
@itemx -l
Link files instead of copying them, when possible.

@item --dereference
@itemx -L
Copy the file that a symbolic link points to, rather than the symbolic
link itself.

@item --preserve-modification-time
@itemx -m
Retain previous file modification times when creating files.

@item --message=@var{message}
@itemx -M @var{message}
Print @var{message} when the end of a volume of the backup media (such
as a tape or a floppy disk) is reached, to prompt the user to insert a
new volume.  If @var{message} contains the string @samp{%d}, it is replaced
by the current volume number (starting at 1).

@item --numeric-uid-gid
@itemx -n
Show numeric UID and GID instead of translating them into names when using
the @kbd{--verbose option}.

@item --no-absolute-filenames
Create all files relative to the current directory in copy-in mode, even
if they have an absolute file name in the archive.

@item --no-preserve-owner
Do not change the ownership of the files; leave them owned by the user
extracting them.  This is the default for non-root users, so that users
on System V don't inadvertantly give away files.  This option can be used
in copy-in mode and copy-pass mode

@item --create
@itemx -o
Run in copy-out mode.  @xref{Copy-out mode}.

@item -O @var{archive}
Archive filename to use instead of standard output.  To use a tape
drive on another machine as the archive, use a filename that starts with
@samp{@var{hostname}:}.  The hostname can be preceded by a username and
an @samp{@@} to access the remote tape drive as that user, if you have
permission to do so (typically an entry in that user's @file{~/.rhosts}
file).

Remote archives are not supported on MS-DOS and MS-Windows.

@item --only-verify-crc
Verify the CRC's of each file in the archive, when reading a CRC format
archive. Don't actually extract the files.

@item --pass-through
@itemx -p
Run in copy-pass mode.  @xref{Copy-pass mode}.

@item --quiet
@itemx --silent
Do not print the number of blocks copied.

@item --rename
@itemx -r
Interactively rename files.  For each file in the archive, @code{cpio} will
print its name and wait for the user to type a new name.  An empty name
(produced by pressing @kbd{RET}) means skip the file.

@item --rename-batch-file=@var{rename-file}
Non-interactively rename files.  For each file in the archive, @code{cpio}
will read a replacement name from the named @var{rename-file}.  In that
file, file names should be separated by newlines.  An empty line causes
@code{cpio} to skip the file.

@item --owner [@var{user}][:.][@var{group}]
@itemx -R [@var{user}][:.][@var{group}]
Set the ownership of all files created to the specified user and/or group
in copy-in and copy-pass modes.  Either the user, the group, or both,
must be present.  If the group is omitted but the @samp{:} or @samp{.}
separator is given, use the given user's login group.  Only the super-user
can change files' ownership.

(On MS-DOS and MS-Windows, any user can use this option, since changing
ownership is a no-op on these systems.)

@item --swap-bytes
@itemx -s
Swap the bytes of each halfword (pair of bytes) in the files.  This option
can be used in copy-in mode.

@item --swap-halfwords
@itemx -S
Swap the halfwords of each word (4 bytes) in the files.  This option may
be used in copy-in mode.

@item --sparse
Write files with large blocks of zeros as sparse files.  This option is
used in copy-in and copy-pass modes.

@item --list
@itemx -t
Print a table of contents of the input.

@item --unconditional
@itemx -u
Replace all files, without asking whether to replace existing newer files
with older files.

@item --verbose
@itemx -v
List the files processed, or with @kbd{-t}, give an @samp{ls -l} style table
of contents listing.  In a verbose table of contents of a ustar archive,
user and group names in the archive that do not exist on the local system
are replaced by the names that correspond locally to the numeric UID and
GID stored in the archive.

@item --dot
@itemx -V
Print a @kbd{.} for each file processed.

@item --version
Print the @code{cpio} program version number and exit.

@end table

@node pax invocation, tar invocation, cpio invocation, Top
@chapter Invoking @code{pax}

This chapter is not written yet.

@node tar invocation, Subcommands, pax invocation, Top
@chapter Invoking @code{tar}

This chapter is about how one invokes the @code{tar} command, from the
command synopsis (@pxref{Synopsis}).  There are numerous options, and many
styles for writing them.  One option should specify the subcommand @code{tar}
should perform (@pxref{Subcommand summary}); other options are meant to
detail how this subcommand should be performed (@pxref{Option summary}).
Non-option arguments are not always interpreted the same way; their
interpretation depends on what the subcommand is.

You will find in this chapter everything about option styles and rules
for writing them (@pxref{Styles}).  On the other hand, most subcommands
and options are described elsewhere, in other chapters.  Here, you will
find only synthetic descriptions for subcommands and options, together
with pointers to other parts of the @code{tar} manual.

Some options are so special they are fully described right in this chapter.
They have the effect of inhibiting the normal operation of @code{tar} or
else they globally alter the amount of feedback the user receives about
what is going on.  This chapter describes the @value{help} (@pxref{help})
option, as well as @value{version} (@pxref{version}), @value{verbose}
(@pxref{verbose}), @value{interactive} (@pxref{interactive}), and a
few others.

@menu
* Synopsis::                    General synopsis of @code{tar}
* Using options::               Using @code{tar} options
* Styles::                      The three option styles
* Documentation and help::      Documentation and troubleshooting
* interactive::                 Asking for confirmation during subcommands
@end menu

@node Synopsis, Using options, tar invocation, tar invocation
@section General synopsis of @code{tar}

The @code{tar} program is invoked as either one of:

@smallexample
$ @kbd{tar} @var{option}@dots{} [@var{name}]@dots{}
$ @kbd{tar} @var{letter}@dots{} [@var{argument}]@dots{} [@var{option}]@dots{} [@var{name}]@dots{}
@end smallexample

The second form is for when old options are being used.

You can use @code{tar} to store files in an archive, to extract them from
an archive, and to do other types of archive manipulation.  The primary
argument to @code{tar}, which is called the @dfn{subcommand}, specifies
which action to take.  The other arguments to @code{tar} are either
@dfn{options}, which change the way @code{tar} performs a subcommand,
or file names or archive members, which specify the files or members
@code{tar} is to act on.

You can actually type in arguments in any order, even if in this manual
the options always precede the other arguments, to make examples easier to
understand.  The option stating the operation mode (the @code{tar}
subcommand) is usually given first.

Each @var{name} in the synopsis above is interpreted as an archive member
name when the subcommand is one of @value{compare}, @value{delete},
@value{extract}, @value{list} or @value{update}.  When naming
archive members, you must give the exact name of the member in the
archive, as it is printed by @value{list}.  For @value{append}
and @value{create}, these @var{name} arguments specify the names
of either files or directory hierarchies to place in the archive.
These files or hierarchies should already exist in the file system
prior to the execution of the @code{tar} command.

@code{tar} interprets relative file names as relative to the
working directory.  @code{tar} will make all file names relative
(by removing leading slashes when archiving or restoring files)
unless you specify otherwise (using the @value{absolute-names}
option).  @xref{absolute-names}, for more information about
@value{absolute-names}.

If you give the name of a directory as either a file name or a member
name, then @code{tar} acts recursively on all the files and directories
beneath that directory.  For example, the name @file{/} identifies all
the files in the filesystem to @code{tar}.

The distinction between file names and archive member names is especially
important when shell globbing is used, and is sometimes a source of confusion
for newcomers.  @xref{Wildcards}, for more information about globbing.
The problem is that shells can only glob using existing files in the
file system.  Only @code{tar} itself can glob on archive members, so when
that is necessary, you must ensure that wildcard characters reach @code{tar} without
being interpreted by the shell first.  Using a backslash before @samp{*}
or @samp{?}, or putting the whole argument between quotes, is usually
sufficient for this.  (On MS-DOS/MS-Windows, you @strong{must} use
quotes, since the backslash is a directory separator, and cannot be used
to escape-protect wildcard characters.)

Even if @var{name}s are often specified on the command line, they
can also be read from a text file in the file system, using the
@value{files-from} option.

If you don't use any file name arguments, @value{append},
@value{delete} and @value{concatenate} will do nothing, while
@value{create} will usually yield a diagnostic and inhibit @code{tar}
execution.  The other subcommands of @code{tar} (@value{list},
@value{extract}, @value{compare}, and @value{update}) will act
on the entire contents of the archive.

@cindex exit status
@cindex return status
Besides successful exits, @code{tar} may fail for many reasons.  Some reasons
correspond to bad usage, that is, when the @code{tar} command is improperly
written.  Errors may also be encountered later, while processing the archive
or the files.  Some errors are recoverable, in which case the failure is
delayed until @code{tar} has completed all its work, @code{tar} then says:

@example
tar: Processed all files possible, despite earlier errors
@end example

@noindent
just before exiting with a nonzero status.@footnote{The message used to be
``Error exit delayed from previous errors'', but many users complained
they did not understand what this means, so we changed the message.}
When @code{tar} is executed interactively and reports a recoverable error,
the supplementary time before the prompt reappears, the noise coming from
the disk, or the sight of the actual tape moving, gives some feel to the
user that @code{tar} continued its processing.  But when run in scripts
or unattended, the ending message is undoubtly useful.

Some errors are such that it would not be meaningful, or at least would be
risky, to continue processing: @code{tar} then aborts processing immediately,
and says so.  All abnormal exits, whether immediate or delayed, should
@emph{always} be clearly diagnosed on @code{stderr}, after a line stating
the nature of the error.  When an error is recoverable, @code{tar} attempts
to continue processing as much as possible.  It will then exit with an
error (nonzero) status, which is in fact delayed from the time the error
effectively occurred.

@code{tar} returns only a few exit statuses.  We are really aiming for
simplicity in that area, for now.@footnote{@code{tar} once had a complex
system of exit codes, which became unreliable over time, forcing a great
cleanup in version 1.11.8.} If you are not using the @value{compare} option,
zero means that everything went well, besides maybe innocuous warnings
(however, @pxref{ignore-failed-read}).  Nonzero means that something
went wrong.  As of today, ``nonzero'' is almost always 1 or 2, except for
remote subcommands, where it may be 128.  The value 1 is meant to report a
difference (@pxref{compare}), while the value 2 represents all other errors.

The @code{tar} program is often used early in a pipe, in which case the
exit status of @code{tar} is less easy to obtain, as the error exit of
the whole pipe is the error exit of the last program in the pipeline.  If you
are using @code{bash}, check the @code{PIPESTATUS} array for @code{tar}'s
exit status.  Otherwise, it @emph{is} possible with @code{sh} or @code{ksh}
to fetch the exit status of a process in the middle of a pipeline, just
ugly:@footnote{This clever recipe has been communicated by Brendan O'Dea.}

@smallexample
$ @kbd{exec 3>&1}
$ @kbd{status=`((tar @dots{}; echo $? >&4) | tee @dots{} >&3) 4>&1`}
@end smallexample

@node Using options, Styles, Synopsis, tar invocation
@section Using @code{tar} options

@code{tar} has about eight operating modes which allow you to perform
a variety of tasks.  You are required to choose one operating mode each
time you employ the @code{tar} program, by specifying one and only one
subcommand as an argument to the @code{tar} command (@pxref{Subcommands}).
Depending on the circumstances, you may also wish to customize how the chosen
operating mode behaves.  For example, you may wish to change the way the
output looks, or the format of the files that you wish to archive may
require you to do something special in order to make the archive look right.

You can customize and control @code{tar}'s performance by running @code{tar}
with one or more options (such as @value{verbose}).  @dfn{options} are
arguments to @code{tar} which are (as their name suggests) optional.
Depending on the operating mode, you may specify one or more options.
Different options will have different effects, but in general they all
change details of how @code{tar} works on archives, such as archive format,
archive name, or level of user interaction.  Some options make sense with all
operating modes, while others are meaningful only with particular modes.
You will likely use some options frequently, while you will only use
others infrequently, or not at all.  (A full list of options is available
in @pxref{All options}.)

Note that @code{tar} options are case sensitive.  For example, the
options @kbd{-T} and @kbd{-t} are different; the first requires an
argument for stating the name of a file providing a list of @var{name}s,
while the second does not require an argument and is another way to
write @value{list}.

In addition to the eight subcommands, there are many options to
@code{tar}, and three different styles for writing both: long (mnemonic)
form, short form, and old style.  These styles are discussed below.
Both the options and the subcommands can be written in any of these three
styles.

@node Styles, Documentation and help, Using options, tar invocation
@section The three option styles

There are three styles for writing subcommands and options to the command
line invoking @code{tar}.  The different styles were developed at different
times during the history of @code{tar}.  These styles will be presented
below, from the most recent to the oldest.

Some options must take an argument.  (For example, @value{file} takes the
name of an archive file as an argument.  If you do not supply an archive
file name, @code{tar} will use a default which may vary from site to
site; thus, we recommend that you always supply a specific archive file
name in your portable scripts.)  Where you @emph{place} the arguments
generally depends on which style of options you choose.  We will detail
specific information relevant to each option style in the sections on the
different option styles, below.  The differences are subtle, yet can often
be very important; incorrect option placement can cause you to overwrite
a number of important files.  We urge you to note these differences, and
only use the option style(s) which make(s) the most sense to you until you
feel comfortable with the others.

@menu
* Long options::                Long option style
* Short options::               Short option style
* Old style::                   Old option style
* Mixing::                      Mixing option styles
@end menu

@node Long options, Short options, Styles, Styles
@subsection Long option style

Each option has at least one long (or mnemonic) name starting with two
dashes in a row, for example, @value{list}.  The long names are clearer than
their short or old equivalents.  It sometimes happens that a
single long option has many different names which are synonymous, such
as @w{@kbd{--compare}} and @w{@kbd{--diff}}.  In addition, long option
names can be given unique abbreviations.  For example, @w{@kbd{--cre}} can
be used in place of @value{create} because there is no other long option
which begins with @samp{cre}.  (One way to find this out is by trying it
and seeing what happens;@footnote{Be aware that if you run @code{tar} with
a unique abbreviation for the long name of an option you didn't want to
use, you are stuck; @code{tar} will perform the command as ordered.} if
a particular abbreviation could represent more than one option, @code{tar}
will tell you that that abbreviation is ambiguous and you'll know that that
abbreviation won't work.  You may also choose to run @w{@kbd{tar --help}}
to see a list of options.)

Long options are meant to be obvious and easy to remember, and their
meanings are generally easier to discern than those of their
corresponding short options (see below).  For example,

@smallexample
$ @kbd{tar --create --verbose --blocking-factor=20 --file=/dev/rmt0}
@end smallexample

@noindent
gives a fairly good set of hints about what the command does, even
for those not fully acquainted with @code{tar}.

Long options which require arguments take those arguments immediately
following the option name; they are introduced by an equal sign.  For
example, the @value{file} option (which tells the name of the @code{tar}
archive) is given a file such as @file{archive.tar} as argument by using
the notation @w{@kbd{--file=archive.tar}} for the long option.

@node Short options, Old style, Long options, Styles
@subsection Short option style

Most options also have a short option name.  Short options start with a
single dash, and are followed by a single character, for example, @kbd{-t} (which
is equivalent to @w{@kbd{--list}}).  The forms are absolutely identical in
function; they are interchangeable.  Short option names are often preferred
as they are faster to type than long option names.

Short options which require arguments take their arguments immediately
following the option, usually separated by white space.  It is also
possible to stick the argument right after the short option name, using no
intervening space.  For example, you might write @w{@kbd{-f archive.tar}}
or @kbd{-farchive.tar} instead of using @w{@kbd{--file=archive.tar}}.  Both
@w{@kbd{--file=@var{archive-name}}} and @w{@kbd{-f @var{archive-name}}} denote
the option which indicates a specific archive, here named @file{archive.tar}.

Short options' letters may be clumped together, but you are not
required to do this (as compared to old options; see below).  When short
options are clumped as a set, use one (single) dash for them all, e.g.
@w{@kbd{tar -cvf}}.  Only the last option in such a set is allowed
to have an argument.@footnote{Clustering many options, the last of which
has an argument, is a rather opaque way to write options.  Some wonder if
GNU @code{getopt} should not even be made helpful enough to reject
such usages as invalid.}

When the options are separated, the argument for each option which requires
an argument directly follows that option, as is usual for Unix programs.
For example:

@smallexample
$ @kbd{tar -c -v -b 20 -f /dev/rmt0}
@end smallexample

If you reorder short options' locations, be sure to move any arguments
that belong to them.  If you do not move the arguments properly, you may
end up overwriting files.

@node Old style, Mixing, Short options, Styles
@subsection Old option style

Like short options, old options are single letters.  However, old options
must be written together as a single clumped set, without spaces separating
them or dashes preceding them.@footnote{Beware that if you precede options
with a dash, you are announcing the short option style instead of the
old option style; short options are decoded differently.}  This set
of letters must be the first to appear on the command line, after the
@code{tar} program name and some whitespace; old options cannot appear
anywhere else.  The letter of an old option is exactly the same letter
as the corresponding short option.  For example, the old option @kbd{t}
is the same as the short option @kbd{-t}, and consequently, the same as the
long option @value{list}.  So for example, the command @w{@kbd{tar cv}}
specifies the option @kbd{-v} in addition to the subcommand @kbd{-c}.

When options that need arguments are given together with the command,
all the associated arguments follow, in the same order as the options.
Thus, the example given previously could also be written in the old
style as follows:

@smallexample
$ @kbd{tar cvbf 20 /dev/rmt0}
@end smallexample

@noindent
Here, @samp{20} is the argument of @kbd{-b} and @samp{/dev/rmt0} is
the argument of @kbd{-f}.

On the other hand, this old-style syntax makes it difficult to match
option letters with their corresponding arguments, and is often
confusing.  In the command @w{@kbd{tar cvbf 20 /dev/rmt0}}, for example,
@samp{20} is the argument for @kbd{-b}, @samp{/dev/rmt0} is the
argument for @kbd{-f}, and @kbd{-v} does not have a corresponding
argument.  Even using short options, as in @w{@kbd{tar -c -v -b 20 -f
/dev/rmt0}}, is clearer, putting all arguments next to the option they
pertain to.

If you want to reorder the letters in the old option argument, be
sure to reorder any corresponding argument appropriately.

This old way of writing @code{tar} options can surprise even experienced
users.  For example, the two commands:

@smallexample
$ @kbd{tar cfz archive.tar.gz file}
$ @kbd{tar -cfz archive.tar.gz file}
@end smallexample

@noindent
are quite different!  The first example uses @file{archive.tar.gz} as
the value for option @kbd{f} and recognizes the option @kbd{z}.  The
second example, however, uses @file{z} as the value for option
@kbd{f}---probably not what the user intended.

This example could be corrected in many ways, among which the
following are equivalent:

@smallexample
$ @kbd{tar -czf archive.tar.gz file}
$ @kbd{tar -cf archive.tar.gz -z file}
$ @kbd{tar cf archive.tar.gz -z file}
@end smallexample

@cindex option syntax, traditional
As far as we know, all @code{tar} programs support old options.
This @code{tar} supports them not only for historical reasons, but also
because many people are used to them.  Old options have their own
virtues, like inter-operability in portable scripts, and concise writing.

@node Mixing, , Old style, Styles
@subsection Mixing option styles

All three styles may be intermixed in a single @code{tar} command, so
long as the rules for each style are fully respected.@footnote{Before
@code{tar} version 1.11.6, a bug prevented intermixing old-style options
with long options in some cases.}  old-style options and either of the
modern styles of options may be mixed within a single @code{tar} command.
However, old-style options must be introduced as the first arguments only,
following the rule for old options (old options must appear directly
after the @code{tar} command and some whitespace).  Modern options may
be given only after all arguments to the old options have been collected.
If this rule is not respected, a modern option might be falsely interpreted
as the value of the argument to one of the old-style options.

For example, all the following commands are wholly equivalent, and
illustrate the many combinations and orderings of option styles.

@smallexample
$ @kbd{tar --create --file=archive.tar}
$ @kbd{tar --create -f archive.tar}
$ @kbd{tar --create -farchive.tar}
$ @kbd{tar --file=archive.tar --create}
$ @kbd{tar --file=archive.tar -c}
$ @kbd{tar -c --file=archive.tar}
$ @kbd{tar -c -f archive.tar}
$ @kbd{tar -c -farchive.tar}
$ @kbd{tar -cf archive.tar}
$ @kbd{tar -cfarchive.tar}
$ @kbd{tar -f archive.tar --create}
$ @kbd{tar -f archive.tar -c}
$ @kbd{tar -farchive.tar --create}
$ @kbd{tar -farchive.tar -c}
$ @kbd{tar c --file=archive.tar}
$ @kbd{tar c -f archive.tar}
$ @kbd{tar c -farchive.tar}
$ @kbd{tar cf archive.tar}
$ @kbd{tar f archive.tar --create}
$ @kbd{tar f archive.tar -c}
$ @kbd{tar fc archive.tar}
@end smallexample

On the other hand, the following commands are @emph{not} equivalent to
the previous set:

@smallexample
$ @kbd{tar -f -c archive.tar}
$ @kbd{tar -fc archive.tar}
$ @kbd{tar -fcarchive.tar}
$ @kbd{tar -farchive.tarc}
$ @kbd{tar cfarchive.tar}
@end smallexample

@noindent
These last examples mean something completely different from what the
user intended (judging by the example in the previous set which uses long
options, whose intent is therefore very clear).  The first four specify
that the @code{tar} archive would be a file named @file{-c}, @file{c},
@file{carchive.tar} or @file{archive.tarc}, respectively.  The first two
examples also specify a single non-option, @var{name} argument having the
value @samp{archive.tar}.  The last example contains only old-style option
letters (repeating option @kbd{c} twice), not all of which are meaningful
(for example, @kbd{.}, @kbd{h}, or @kbd{i}), with no argument value.

@node Documentation and help, interactive, Styles, tar invocation
@section Documentation and troubleshooting

@cindex Progress information
@cindex Status information
@cindex Information on progress and status of subcommands
@cindex Verbose subcommand
@cindex Block number where error occured
@cindex Error message, block number of
@cindex Version of the @code{tar} program

@cindex Getting more information
@cindex Information during operation
@cindex Feedback from @code{tar}

@menu
* version::                     Knowing the @code{tar} version
* help::                        Getting the list of possible options
* verbose::                     Checking @code{tar} progress
* checkpoint::                  Being warned of all directories
* show-omitted-dirs::           Being warned of skipped directories
* totals::                      Sizeing the amount of data written
* block-number::                Adding physical addresses to messages
@end menu

@node version, help, Documentation and help, Documentation and help
@subsection Knowing the @code{tar} version

To be careful, the first thing is to check that you are really using the
proper @code{tar}.  The @value{version} option will generate a
message giving confirmation that you are using this @code{tar}, with the
precise version you are using.  @code{tar} identifies itself and prints the
version number to the standard output, then immediately exits successfully,
without doing anything else, ignoring all other options.  For example,
@w{@kbd{tar --version}} might return:

@smallexample
tar (Free paxutils) @value{VERSION}
@end smallexample

@noindent
The first occurrence of @samp{tar} in the result above is the program
name in the package (for example, @code{rmt} is another program), while
the second occurrence of @samp{tar} is the name of the package itself,
containing possibly many programs.  The package is currently named
@samp{tar}, after the name of the main program it contains.@footnote{There
are plans to merge the @code{cpio} and @code{tar} packages into a single one
which would be called @code{paxutils}.  So, who knows if, one of this days,
the @value{version} would not yield @w{@samp{tar (Free paxutils) 3.2}}.}

@node help, verbose, version, Documentation and help
@subsection Getting the list of possible options

You might also want to check the spelling or meaning
of some particular @code{tar} option, without resorting to this manual,
once you have read it.  @code{tar} has a short help
feature, triggerable through the @value{help} option.  By using this
option, @code{tar} will print a usage message listing all available
options on standard output, then exit successfully, without doing
anything else and ignoring all other options.  Even though this is only a
brief summary, it may be several screens long.  So, if you are not
using some kind of scrollable window, you might prefer to use something
like:

@smallexample
$ @kbd{tar --help | less}
@end smallexample

@noindent
presuming, here, that you like using @code{less} for a pager.  Other
popular pagers are @code{more} and @code{pg}.  If you know about some
@var{keyword} which interests you and do not want to read all the
@value{help} output, another common idiom is:

@smallexample
$ @kbd{tar --help | grep @var{keyword}}
@end smallexample

@noindent
to get only the pertinent lines.

The perceptive reader would have noticed some contradiction in the
previous paragraphs.  It is written that both @value{version} and
@value{help} print something, and have all other options ignored.  In
fact, they cannot ignore each other, and one of them has to win.  We do
not specify which is stronger; experiment if you really wonder!

The short help output is quite succinct, and you might have to get back
to the full documentation for precise points.  If you are reading this
paragraph, you already have the @code{tar} manual in some form.  This manual
is available in printed form, as a kind of small book.  It may be printed out
of the @code{tar} distribution, provided you have @TeX{} already installed
somewhere, and a laser printer around.  Just configure the distribution,
execute the command @w{@kbd{make dvi}}, then print @file{doc/tar.dvi} the
usual way (contact your local @emph{guru} to know how).  If @code{tar} has
been conveniently installed at your site, this manual is also available
in interactive, hypertextual form as an Info file.  Just call @w{@kbd{info
tar}} or, if you do not have the @code{info} program handy, use the Info
reader provided within GNU Emacs, and choose @kbd{tar} from the main Info
menu (with @kbd{m tar @key{RET}}).

A short reference to @code{tar} in the form of a @code{man} page is also
provided.  Currently, it doesn't tell much more than @kbd{tar --help} does.
Other @code{man} pages exist for @code{tar}, written at the time @code{tar}
did not install any @code{man} pages on its own.  The string @samp{tar
(Free paxutils) @value{VERSION}} appears in the title of the @emph{normal}
@code{man} page.

@node verbose, checkpoint, help, Documentation and help
@subsection Checking @code{tar} progress

Typically, @code{tar} performs most subcommands without reporting any
information to the user except error messages.  When using @code{tar} with
many options, particularly ones with complicated or difficult-to-predict
behavior, it is possible to make serious mistakes.  @code{tar} provides
several options that make observing its behavior easier.  These options cause
@code{tar} to print information as it progresses in its job, and you might
want to use them just to be more careful about what is going on, or
merely to entertain yourself.  If you have encountered a problem when
operating on an archive, however, you may need more information than just
an error message in order to solve the problem.  The following options
can be helpful diagnostic tools.

Normally, the @value{list} command to list an archive prints just
the file names (one per line), and the other commands are silent.
When used with most subcommands, the @value{verbose} option causes
@code{tar} to print the name of each file or archive member as it
is processed.  This and the other options which make @code{tar} print
status information can be useful in monitoring @code{tar}.

With @value{create} or @value{extract}, @value{verbose} used once
just prints the names of the files or members as they are processed.
Using it twice causes @code{tar} to print a longer listing (reminiscent
of @kbd{ls -l}) for each member.  Since @value{list} already prints
the names of the members, @value{verbose} used once with @value{list}
causes @code{tar} to print an @kbd{ls -l} type listing of the files
in the archive.  The following examples both extract members with
long list output:

@smallexample
$ @kbd{tar --extract --file=archive.tar --verbose --verbose}
$ @kbd{tar xvv archive.tar}
@end smallexample

Verbose output appears on the standard output except when an archive is
being written to the standard output, as with @kbd{tar --create --file=-
--verbose} (@kbd{tar cfv -}, or even @kbd{tar cv}---if the installer let
standard output be the default archive).  In that case @code{tar} writes
verbose output to the standard error stream.

Some people felt the need to produce an archive on standard output,
while still
wishing to segregate verbose output from error output.  A possible
approach (on systems allowing it) would be to use a named pipe to receive
the archive, and to have the consumer process read from that named pipe.
This has the advantage of leaving standard output free to receive verbose
output, all separate from errors.

@node checkpoint, show-omitted-dirs, verbose, Documentation and help
@subsection Being warned of all directories

The @value{checkpoint} option prints an occasional message as @code{tar}
reads or writes the archive.  In fact, it print directory names while
reading the archive.  It is designed for those who don't need the more
detailed (and voluminous) output of @value{block-number}, but do want
visual confirmation that @code{tar} is actually making progress.

@node show-omitted-dirs, totals, checkpoint, Documentation and help
@subsection Being warned of skipped directories

The @value{show-omitted-dirs} option, when reading an archive---with
@value{list} or @value{extract}, for example---causes a message
to be printed for each directory in the archive which is skipped.
This happens regardless of the reason for skipping: the directory might
not have been named on the command line (implicitly or explicitly),
or it might be excluded by the use of the @value{exclude} option, or
for some other reason.

@node totals, block-number, show-omitted-dirs, Documentation and help
@subsection Sizeing the amount of data written

The @value{totals} option---which is only meaningful when used with
@value{create}---causes @code{tar} to print the total amount written to
the archive, after it has been fully created.

Currently, the amount written represents the size of the created archive
before it gets compressed.  One wants to estimate the size of the used portion of a tape
receiving a compressed archive, and as it stands, the option is not as useful
as it should be.  Some later version of @code{tar} will change the meaning
of this option to print the total amount written once compression has occurred.

@node block-number, , totals, Documentation and help
@subsection Adding physical addresses to messages

If @value{block-number} is used, @code{tar} prints, along with every
message it would normally produce, the block number within the archive
where the message was triggered (@xref{Blocking}, to understand blocks
and records).  Also, supplementary messages are triggered when reading
blocks full of @code{NUL}s, or when hitting end of file on the archive.
As of now, if the archive is properly terminated with a @code{NUL} block,
the reading of the file may stop before end of file is met, so the position
of end of file will not usually show when @value{block-number} is used.
Note that @code{tar} drains the archive before exiting when reading the
archive from a pipe.

This option is especially useful when reading damaged archives, since
it helps pinpoint the damaged sections.  It can also be used with
@value{list} when listing a filesystem backup tape, allowing you to
choose among several backup tapes when retrieving a file later, in
favor of the tape where the file appears earliest (closest to the
front of the tape).  @FIXME{xref when the node name is set and the
backup section written.}

Some later version of @code{tar} might use @w{@kbd{--number-blocks}}
instead of @w{@kbd{--block-number}}, so @w{@kbd{--block}} would then expand to
@value{blocking-factor} unambiguously.

@node interactive, , Documentation and help, tar invocation
@section Asking for confirmation during subcommands
@cindex Interactive action
@cindex Acting interactively

Typically, @code{tar} carries out a command without stopping for further
instructions.  In some situations, however, you may want to exclude some
files and archive members from the operation (for instance if disk or storage
space is tight).  You can do this by excluding certain files automatically
(@pxref{Choosing}), or by performing a subcommand interactively, using
the @value{interactive} option.

When the @value{interactive} option is specified, before reading, writing,
or deleting files, @code{tar} first prints a message for each such file,
telling what action it intends to take, then asks for confirmation on
the terminal.  The actions which require confirmation include adding a
file to the archive, extracting a file from the archive, deleting a file
from the archive, and deleting a file from disk.  To confirm the action,
you must type a line of input beginning with @kbd{y}.  If your input line
begins with anything other than @kbd{y}, @code{tar} skips that file.

If @code{tar} is reading the archive from the standard input, @code{tar}
opens the file @file{/dev/tty} to support the interactive communications.

@node Subcommands, Choosing, tar invocation, Top
@chapter @code{tar} subcommands

A long while ago, @code{tar} once was a set of related programs,
each dedicated to a particular function, like the creation of a new
archive, listing the contents of an archive, or performing extraction.
It was done that way in order to have smaller independent programs,
and better limit the memory requirements of each of them, at a time when
computer memory was expensive.  Nowadays, such a split is no longer
necessary, and the single @code{tar} program has a few special options,
named @dfn{subcommands}, meant to set the particular function to be achieved
in a @code{tar} run, just as users once had to choose exactly which
program of the @code{tar} family they needed for a given job.

This chapter has the purpose of presenting such @code{tar} subcommands
or operating modes.  It also introduces many options meant to precisely control,
or fine-tune, the behavior of the subcommands.  The separation between
subcommands and fine-tuning options is not cast in stone, and should
not be overemphasized.  This @code{tar} does implement such
precise distinctions internally, of course, but this does not preclude
future changes or adjustments.  In any case, none of these changes, if
they ever occur, should much affect how @code{tar} is used in practice.

Besides @value{help} and @value{version}, which trigger
special behavior in @code{tar}, the most popular subcommands are
@value{list}, @value{extract}, and @value{create}; these are
available in almost all implementations of the @code{tar} program.
The remaining subcommands are @value{compare}, @value{append},
@value{update},@footnote{Currently, @value{update} might be seen as
either a subcommand or a fine-tuning option, depending on how it is used.}
@value{concatenate}, and @value{delete}.  These remaining subcommands
are often not offered in various @code{tar}s, and when available, they
seem to be much less often used than the three popular ones.

@menu
* list::                        How to list archives
* extract::                     How to extract members from an archive
* create::                      How to create archives
* Applications::                Other uses for @code{tar}
@end menu

@node list, extract, Subcommands, Subcommands
@section How to list archives

Frequently, you will find yourself wanting to determine exactly what a
particular archive contains.  You can use the @value{list} subcommand
to get the member names as they currently appear in the archive, as well
as various attributes of the files at the time they were archived.  For
example, you can examine the archive @file{collection.tar} that you
created in the last section with the command

@smallexample
$ @kbd{tar --list --file=collection.tar}
@end smallexample

@noindent
The output of @code{tar} would then be:

@smallexample
blues
folk
jazz
@end smallexample

@FIXME{We might need to show the creation of bfiles somewhere above! (?)}

@noindent
The archive @file{bfiles.tar} would list as follows:

@smallexample
./birds
baboon
./box
@end smallexample

@noindent
Be sure to use a @value{file} option, just as with @value{create},
to specify the name of the archive.

If you use the @value{verbose} option with @value{list}, then
@code{tar} will print out a listing reminiscent of @w{@kbd{ls -l}},
showing owner, file size, and so forth.

If you had used @value{verbose} mode, the example above would look
like:

@smallexample
$ @kbd{tar --list --verbose --file=collection.tar}
-rw-rw-rw- myself users 42 1990-05-21 13:29 blues
-rw-rw-rw- myself users 62 1990-05-23 10:55 folk
-rw-rw-rw- myself users 40 1990-05-21 13:30 jazz
@end smallexample

@cindex File name arguments, using @value{list} with
@cindex --list with file name arguments
You can specify one or more individual member names as arguments when
using @kbd{list}.  In this case, @code{tar} will only list the
names of members you identify.  For example, @w{@kbd{tar --list
--file=afiles.tar apple}} would only print @file{apple}.

Because @code{tar} preserves paths, file names must be specified as they
appear in the archive (that is, relative to the directory from which the
archive was created).  Therefore, it is essential when specifying member
names to @code{tar} that you give the exact member names.  For example,
@w{@kbd{tar --list --file=bfiles birds}} would produce an error message
something like @samp{tar: birds: Not found in archive}, because there is
no member named @file{birds}, only one named @file{./birds}.  While the
names @file{birds} and @file{./birds} name the same file, @emph{member}
names are compared using a simplistic name comparison, in which an exact
match is necessary.  @xref{absolute-names}.

However, @w{@kbd{tar --list --file=collection.tar folk}} would respond
with @file{folk}, because @file{folk} is in the archive file
@file{collection.tar}.  If you are not sure of the exact file name, try
listing all the files in the archive and searching for the one you
expect to find; remember that if you use @value{list} with no file
names as arguments, @code{tar} will print the names of all the members
stored in the specified archive.

As an exception to member name preservation when creating the archive,
@code{tar} on MS-DOS/MS-Windows mirrors the DOS-style backslashes into
Unix-style forward slashes.  This is because the bulk of @code{tar} code
is deeply entrenched in the Unix world and assumes that forward slashes
are used in too many places.  Converting slashes automatically lets the
users specify files as they are used to on those systems.  But it also
means that you need to remember about this conversion, so you won't be
surprised when @code{tar} lists the files differently than what you
typed on the command line.  For example:

@smallexample
$ @kbd{tar -cvf c:\files\backup\today.tar d:\data\may97 d:\data\june97}
data/may97
data/june97
$ @kbd{tar -xvf c:\files\backup\today.tar data\may97}
data/may97
@end smallexample

@cindex ISO 8601 Dates
@cindex 8601 Dates (ISO)
@cindex Dates format

In the past, @code{tar} showed dates as @samp{Nov 21 1996}; now it shows
them as @samp{1996-11-21}.  This is in accordance with the international
standard ISO 8601.@footnote{You can revert to the old behavior by defining
@code{USE_OLD_CTIME} in @file{src/list.c} before reinstalling @code{tar}.}

Sometime in the future, local date formats will become readily
available, including the civilian American month-day-year format.
However, as a general rule, we suggest that you use the ISO 8601 date
format which lists units of time in a larger-to-smaller order.

For more information, see
@uref{http://www.ft.uni-erlangen.de/~mskuhn/iso-time.html}, which
contains a detailed explanation of the ISO 8601 standard.

@menu
* Reading::                     Options to help read archives
* compare::                     Comparing members with the file system
@end menu

@node Reading, compare, list, list
@subsection Options to help read archives
@cindex Options when reading archives
@cindex Reading incomplete records
@cindex Records, incomplete
@cindex End-of-archive entries, ignoring
@cindex Ignoring end-of-archive entries
@cindex Large lists of file names on small machines
@cindex Small memory
@cindex Running out of space

If you're not sure of the blocking factor of an archive, you can read the
archive by specifying @value{read-full-records} and @value{blocking-factor},
using a blocking factor larger than what the archive uses.  This lets
you avoid having to determine the blocking factor of an archive.
@xref{blocking-factor}.

@menu
* read-full-records::           Reading full records
* ignore-zeros::                Ignoring blocks of zeros
* ignore-failed-read::          Ignoring read failures
@end menu

@node read-full-records, ignore-zeros, Reading, Reading
@subsubsection Reading full records

The @value{read-full-records} option is used in conjunction with
@value{extract} to read an archive which contains incomplete records,
or one which has a blocking factor less than the one specified.

If @value{read-full-records} is used, @code{tar} will not panic if an
attempt to read a record from the archive does not return a full record.
Instead, @code{tar} will keep reading until it has obtained a full
record.

This option is turned on by default when @code{tar} is reading
an archive from standard input, or from a remote machine.  This is
because on BSD Unix systems, a read of a pipe will return however
much happens to be in the pipe, even if it is less than @code{tar}
requested.  If this option was not used, @code{tar} would fail as
soon as it read an incomplete record from the pipe.

This option is also useful with the commands for updating an archive.

Normally, @code{tar} will request data in full record increments from
an archive storage device.  If the device cannot return a full record,
@code{tar} will report an error.  However, some devices do not always return
full records, or do not require the last record of an archive to be padded
out to the next record boundary.  To keep reading until you obtain a full
record, or to accept an incomplete record if it contains an end-of-archive
marker, specify the @value{read-full-records} option in conjunction with
the @value{extract} or @value{list} subcommands.  @xref{read-full-records}.

The @value{read-full-records} option is turned on by default when @code{tar}
reads an archive from standard input, or from a remote machine.  This is
because on BSD Unix systems, attempting to read a pipe returns however
much happens to be in the pipe, even if it is less than was requested.
If this option were not enabled, @code{tar} would fail as soon as it read
an incomplete record from the pipe.

@node ignore-zeros, ignore-failed-read, read-full-records, Reading
@subsubsection Ignoring blocks of zeros

Normally, @code{tar} stops reading when it encounters a block of zeros
between file entries (which usually indicates the end of the archive).
POSIX mandates two blocks of zeros for representing the end of the archive.
Some @code{tar} programs produce two such blocks on write and expect two on
read, others produce one and expect one.  This @code{tar} produces two and
expects one, but is careful, while reading a pipe, to fully drain it until
the end of file.  This avoids spurious messages about @cite{broken pipes}.

Yet there are many @code{tar} programs around and many ways to produce
compressed archives, and also many ways to read them.  It happens that
when @code{gunzip} and @code{tar} collaborate to explode an archive,
@code{gunzip} quits while @code{tar} still expects a full-sized record,
with proper padding after the end of archive block.  This surely caused
a few headaches to users observing the breaking of the pipe within their
@code{sh} scripts, and yet unable to reproduce the problem interactively,
one line at a time, within their @code{csh} shell.  Contrarily to @code{sh},
@code{csh} remains silent about broken pipes!

The @value{ignore-zeros} option causes @code{tar} to ignore blocks of
zeros in the archive and to read until the real end of the archive file.
@value{ignore-zeros} allows @code{tar} to completely read an archive
which contains a block of zeros before the end (for example,@: a damaged archive,
or one which was created by @code{cat}-ing several archives together).

The @value{ignore-zeros} option is turned off by default because many
versions of @code{tar} write garbage after the end-of-archive entry, since
that part of the media is normally not supposed to be read.  The garbage
is likely to be duplicate copies of the previous chunk of the archive,
which will sometimes cause files to be overwritten or truncated since it
may look like valid new archived files.

@node ignore-failed-read, , ignore-zeros, Reading
@subsubsection Ignoring read failures

When the @value{ignore-failed-read} option is given, @code{tar} will
not exit with an error (nonzero) status, for the sole reason of having
encountered unreadable files or directories.

When backing up a living file system, there is a time window between the
phase when @code{tar} scans directories and the phase when it tries to
open files to dump them.  It is possible, and even common, for the file to
disappear during this window.  The @value{ignore-failed-read} option is a
way to ask @code{tar} not to report such problems as an error set in the
exit status once the dump is completed.  Diagnostics are still reported,
as the option does not turn them off.

A disappearing file is just a stronger case of the following problem.  When a
file shrinks or grows while being backed up, @code{tar} makes some stunts
to ensure the integrity of the archive, so the file length in the header
already written does not lie about what is found in the archive.  This might
imply padding the file with zeroes up to the proper length, or writing less
than the actual file contents.  In such cases, @code{tar} protected the
integrity of the archive, but surely not the integrity of the file, which
just cannot be restored properly.  The @value{ignore-failed-read} more
or less means to not return an error and continue processing even when file
integrity is known to be lost, as long as the archive integrity is preserved.

The @value{--ignore-failed-read} also inhibits an error exit also for
failed opening of directories, files for which dumping type is not known,
or with the @value{remove-files} option, failed removal of files after dump.

@node compare, , Reading, list
@subsection Comparing members with the file system
@cindex Verifying the currency of an archive

The @value{compare} subcommand compares
specified archive members against files with the same names, and then
reports differences in file size, mode, owner, modification date and
contents.  You should @emph{only} specify archive member names, not file
names.  If you do not name any members, then @code{tar} will compare the
entire archive.  If a file is represented in the archive but does not
exist in the file system, @code{tar} reports a difference.

You have to specify the record size of the archive when modifying an
archive with a non-default record size.

@code{tar} ignores files in the file system that do not have
corresponding members in the archive.

The following example compares the archive members @file{rock},
@file{blues}, and @file{funk} in the archive @file{bluesrock.tar} with
files of the same name in the file system.  (Note that there is no file
@file{funk}; @code{tar} will report an error message.)

@smallexample
$ @kbd{tar --compare --file=bluesrock.tar rock blues funk}
rock
blues
funk: File does not exist
@end smallexample

@noindent
@FIXME{What does this actually depend on?  Let's make a guess, here.
It depends on the type of the file.}
@ignore
Depending on the system where you are running @code{tar} and the
version you are running,
@end ignore

@noindent
If the file in the archive is a link, @code{tar} may have a different
error message, such as

@smallexample
funk: Does not exist
@end smallexample

The intent behind the @value{compare} option is to check whether the
archive represents the current state of files on disk, more than to validate
the integrity of the archive media.  For this latter goal, @xref{verify}.

@cindex Timestamp differences, on MS-DOS/MS-Windows filesystems
@cindex Mod time differs message on MS-DOS disks
Some filesystems, such as the FAT and VFAT used on MS-DOS and
MS-Windows, only maintain file modification times up to the nearest even
second.  @code{tar} compiled for such systems knows about this, and
doesn't report a difference in mod times unless it is larger than one
second.  But if you run @code{tar} on Unix and your files reside on a
FAT disk (via some network interface), you could have some false alarms
in this case.

@node extract, create, list, Subcommands
@section How to extract members from an archive
@cindex Extraction
@cindex Retrieving files from an archive
@cindex Resurrecting files from an archive

Creating an archive is only half the job---there is no point in storing
files in an archive if you can't retrieve them.  The act of retrieving
members from an archive so they can be used and manipulated as
unarchived files again is called @dfn{extraction}.  To extract files
from an archive, use the @value{extract} subcommand.  As with
@value{create}, specify the name of the archive with @value{file}.
Extracting an archive does not modify the archive in any way; you can
extract it multiple times if you want or need to.

Using @value{extract}, you can extract an entire archive, or specific
files.  The files can be directories containing other files, or not.  As
with @value{create} and @value{list}, you can use the short or the
long form of the subcommand without affecting the performance.

@menu
* extract options::             Options used for extraction
* Writing::                     Changing how @code{tar} writes files
* Preventing overwrite::        Options to prevent overwriting files
* Unlinking::                   Options to destroy files
* Attributes::                  Handling file attributes
* Scarce::                      Coping with scarce resources
@end menu

@node extract options, Writing, extract, extract
@subsection Options used for extraction

The previous chapter showed how to use @value{extract} to extract
an archive into the filesystem.  Various options cause @code{tar} to
extract more information than just file contents, such as the owner,
the permissions, the modification date, and so forth.  This section
presents options to be used with @value{extract} when certain special
considerations arise.  You can review the information presented in
@ref{extract} for more basic information about the
@value{extract} subcommand.

Within a @code{tar} archive, a socket is stored as a pipe.

When archives created on Unix are extracted on MS-DOS and MS-Windows
3.x, several problems pop up due to their incompatibilities with the
Unix filesystem.  @code{tar} has several tricks up its sleeves to
overcome such problems:

@itemize @bullet{}
@cindex Filenames, illegal characters on MS-DOS
@cindex Extracting files on MS-DOS, illegal characters
@item Illegal characters in file names:
the MS-DOS filesystem disallows certain characters from appearing in a file
name.  Except on Windows 9X, it also doesn't allow file names with a
leading dot and file names with more that a single dot in the basename
of the file.

@code{tar} tries to repair such names automatically, by replacing
the offending characters with legal ones.  For example, @file{.emacs} is
exracted as @file{_emacs}, @file{foo.bar.c} will be converted to
@file{foo_bar.c}, @file{lost+found} will become @file{lost_found}, and
so forth.
(@code{tar} even tries to be intelligent by treating some cases
specially; for example, files which end with @file{.c++} are extracted
as @file{.cxx}.)

When the file is thus renamed, @code{tar} will print a message to that
effect when operating verbosely (@pxref{verbose}).  Note that if a
directory needs to be renamed, @code{tar} will print such a message for
all the files in that directory.

@item DOS device names:
MS-DOS and MS-Windows define their own reserved names for character
devices.  For example, the console device is @file{CON}, the printer
device is @file{PRN}, the serial port device is @file{AUX}, and so forth.

These names are special on DOS, in that files with these names, if they
exist in any directory, are inaccessible: the device driver will
intercept any file-related call before the filesystem ever sees it.
(That's because MS-DOS wants to create an illusion that the devices are
present in every directory; in contrast, on Unix the devices live under
a special directory called @file{/dev}.)

When archives created on Unix are unpacked on MS-DOS, they might include
files with these ``forbidden'' names, such as @file{prn.txt} or
@file{aux.c}.  Trying to extract such files will lead to crashes, system
wedges, and other atrocities, as the device drivers will try to
interpret the data they get and act on it (for example, some devices are
read-only, and don't know how to handle incoming data).

Therefore, @code{tar} checks every file name it is about to extract, and
if it refers to a character device, @code{tar} changes that file's name
by prepending an underscore @file{_} to it; thus, @file{aux.c} will be
extracted as @file{_aux.c}.  (Actually, @code{tar} tries to prepend up
to 2 underscore characters, each time checking if the new name is a
regular file.  If both attempts are unsuccessful, @code{tar} will print
an error message and refuse to extract that file.)

As with illegal characters, @code{tar} announces each renamed file when
under verbose operation.
@end itemize

@node Writing, Preventing overwrite, extract options, extract
@subsection Changing how @code{tar} writes files
@cindex Overwriting old files, prevention
@cindex Protecting old files
@cindex Modification times of extracted files
@cindex Permissions of extracted files
@cindex Modes of extracted files
@cindex Writing extracted files to standard output
@cindex Standard output, writing extracted files to

@node Preventing overwrite, Unlinking, Writing, extract
@subsection Options to prevent overwriting files

Normally, @code{tar} writes extracted files into the file system without
regard to the files already on the system; that is, files with the same
names as archive members are overwritten when the archive is extracted.
If the name of a corresponding file name is a symbolic link, the file
pointed to by the symbolic link will be overwritten instead of the
symbolic link itself (if this is possible).  Moreover, special devices,
empty directories, and even symbolic links are automatically removed if
they are found to be in the way of extraction.

To prevent @code{tar} from extracting an archive member from an archive
if doing so will overwrite a file in the file system, use
@value{keep-old-files} in conjunction with @value{extract}.  When
this option is specified, @code{tar} will report an error stating the
name of the file in conflict instead of overwriting the file with the
corresponding extracted archive member.

The @value{unlink-first} option removes existing files, symbolic links,
empty directories, devices, and so forth, @emph{prior} to extracting over them.
This could take care of several situations where overwriting files is
undesirable.

One such situation occurs when the archive includes a regular file whereas
the filesystem has a symbolic link by the same name.  Using this option
will prevent @code{tar} from overwriting the file to which the symbolic
link points by the contents of an extracted file, since the link itself
is removed prior to the extraction.

Another situation is with overwriting a running program's executable
file.  On some systems, the backing store for the executable @emph{is}
the original program file; overwriting it while the program runs could
lead to segmentation violation and other crashes.  You could use the
@value{unlink-first} option to prevent such woes when extracting
arbitrary executables over currently running copies.  Note that if
something goes wrong with the extraction and you @emph{did} use this
option, you might end up with no file at all.  Without this option, if
something goes wrong with the extraction, the existing file is not
overwritten, and is preserved.  (If you want to be safe either way, use
both @value{unlink-first} and @value{backup}; @xref{backup}.)

If you specify the @value{recursive-unlink} option, @code{tar} removes
@emph{anything} that keeps you from extracting a file as far as current
permissions will allow it.  This could include removal of the contents
of a full directory hierarchy.  For example, someone using this feature
may be very surprised at the results when extracting something over a
directory entry from the archive.  This option can be dangerous; be very
aware of what you are doing if you choose to use it.

Without @value{recursive-unlink}, @code{tar} silently overwrites
non-directories, but will never overwrite existing non-empty
directories.

@cindex Removing existing files on MS-DOS
@cindex Overwriting prevention on MS-DOS and MS-Windows
One especially nasty subtlety with both @value{unlink-first} and
@value{recursive-unlink} options happens on filesystems which
silently truncate the names of the files in the archive when they are
extracted to the file system.  (MS-DOS and MS-Windows 3.X are two
notorious examples.)  In such a case, @code{tar} might accidentally delete
a file or a directory which has nothing to do with the extracted file,
simply because their names are the same after truncation.  We recommend
that you not use these two options on such filesystems.  In fact, we recommend
that if you unpack on MS-DOS archives which were created on Unix, you
@emph{always} use either @value{keep-old-files} or @value{backup},
to prevent the overwriting of existing files due to file name truncation.
@xref{backup}.

@menu
* keep-old-files::              Keeping old files
* to-stdout::                   Writing to standard output
* backup::                      Backup options
* suffix::                      Deciding the backup file suffixes
@end menu

@node keep-old-files, to-stdout, Preventing overwrite, Preventing overwrite
@subsubsection Keeping old files

The @value{keep-old-files} option prevents @code{tar} from overwriting
existing files with archive members having the same name.  The
@value{keep-old-files} option is meaningless with @value{list}.
Prevents @code{tar} from overwriting files in the file system during
extraction.

@node to-stdout, backup, keep-old-files, Preventing overwrite
@subsubsection Writing to standard output

To write the extracted files to the standard output, instead of
creating the files on the file system, use @value{to-stdout} in
conjunction with @value{extract}.  This option is useful if you are
extracting files to send them through a pipe, and do not need to
preserve them in the file system.  You might need to use this option to
browse one or more files with a pager such as @code{less}, or if you
want the extracted file to have another name on the file system.

If you extract multiple members, they appear on standard output concatenated,
in the order they are found in the archive.

When this option is used, @code{tar} is careful to not alter the file system.
@code{tar} writes the contents of the files extracted to its standard output.
This may be useful if you are only extracting the files in order to send
them through a pipe.  This option is only meaningful with @value{extract}.

@FIXME{Why would you want to do such a thing, how are files separated on
the standard output? is this useful with more that one file?  Are
pipes the real reason?}

@node backup, suffix, to-stdout, Preventing overwrite
@subsubsection Backup options
@cindex backup options
@cindex backups, making

@code{tar} offers options for making backups of files before writing new
versions.  These options control the details of these backups.  They may
apply to the archive itself before it is created or rewritten, as well
as to individual extracted members.  Other free programs (GNU @code{cp},
@code{install}, @code{ln}, and @code{mv}, for example) offer similar options.

Backup options may prove unexpectedly useful when extracting archives
containing many members having identical names, or when extracting archives
on systems having file name limitations, making different members appear
as having similar names through the side-effect of name truncation.
(This is true only if we have a good scheme for truncated backup names,
of which we are not sure at all: we suspect work is needed in this area.
The MS-DOS/MS-Windows version works with numbered backups even when file
names are truncated.)  When any existing file is backed up before being
overwritten by extraction, clashing files are automatically renamed to
be unique, and the true name is kept for only the last file of a series of
clashing files.  By using verbose mode, users may track exactly what happens.
We recommend that you @strong{always} use numbered backups when unpacking
archives on MS-DOS and on other systems that have file name limitations.

When @code{tar} is given the @value{backup} option, it makes backups of
files that are about to be overwritten or removed.  Without this option,
the original versions are destroyed.  However, @xref{keep-old-files}.

At the detail level, some decisions are still experimental, and may
change in the future.  We are awaiting comments from our users.  So please
do not get in the habit of depending blindly on the details of the backup features.
For example, currently, directories themselves are never renamed through
using these options, so extracting a file over a directory still has
good chances to fail.  Also, backup options apply to created archives,
not only to extracted members.  For created archives, backups will not
be attempted when the archive is a block or character device, or when it
refers to a remote file.

For the sake of simplicity and efficiency, backups are made by renaming old
files prior to creation or extraction, and not by copying.  The original
name is restored if the file creation fails.  If a failure occurs after a
partial extraction of a file, both the backup and the partially extracted
file are kept.

Some people express the desire to @emph{always} use the @value{backup}
option by defining some kind of alias or script.  This is not as easy
as one may think, due to the fact that old-style options should appear first
and consume arguments a bit unpredictably for an alias or script.  But
if you are ready to give up using old-style options, you may resort to
using something like a (Bourne shell) function here:

@smallexample
$ @kbd{tar () @{ /usr/local/bin/tar --backup $*; @}}
@end smallexample

@vindex VERSION_CONTROL
@cindex backup files, type made

The @value{backup} option also accepts an optional value,
@var{method}, which determines the type of backups that will be made.  If this value is
not given, the value of the @code{VERSION_CONTROL} environment variable
is used.  And if @code{VERSION_CONTROL} is not set, the default backup
method is @kbd{existing}.

@vindex version-control @r{Emacs variable}
This value corresponds to the Emacs variable @samp{version-control}; the
same values for @var{method} are accepted as in Emacs.  The values also
have more descriptive names.  Here are the valid @var{method}s (unique
abbreviations are accepted):

@table @kbd
@item t
@itemx numbered
@opindex numbered @r{backup method}
Always make numbered backups.

@item nil
@itemx existing
@opindex existing @r{backup method}
Make numbered backups of files that already have them, simple backups
of the others.

@item never
@itemx simple
@opindex simple @r{backup method}
Always make simple backups.

@end table

@node suffix, , backup, Preventing overwrite
@subsubsection Deciding the backup file suffixes
@cindex backup suffix
@vindex SIMPLE_BACKUP_SUFFIX
@opindex --suffix

The @value{suffix} option informs @code{tar} about the @var{suffix}
which should be appended to each backup file made when @value{backup}
is used.  If the @value{suffix} option is not specified, the value
of the @code{SIMPLE_BACKUP_SUFFIX} environment variable is used.  And if
@code{SIMPLE_BACKUP_SUFFIX} is not set, the default is @samp{~}, just as
in Emacs.

@node Unlinking, Attributes, Preventing overwrite, extract
@subsection Options to destroy files

Some people argue that @code{tar} should not hesitate to overwrite files
with other files when extracting.  When extracting a @code{tar} archive, they
expect to see a faithful copy of the state of the filesystem when the archive
was created.  It is debatable that this would always be proper behavior.
For example, suppose one has an archive in which @file{usr/local} is a
link to @file{usr/local2}.  Since the archive was created, maybe the site
removed the link and renamed the whole hierarchy from @file{/usr/local2}
to @file{/usr/local}.  Such things happen all the time.  We guess it would
not be welcome at all, in the typical case, for @code{tar} to remove the
whole hierarchy just to make room for the link to be reinstated, unless it
@emph{also} simultaneously restores the full @file{/usr/local2}, of course!

By default, @code{tar} errs on the side of caution.  Some options
allow users to change its behavior.  When no special options are
given for this, @code{tar} removes single files when extracting over them,
usually follows symbolic links when found, and does not destroy directories.

@menu
* unlink-first::                Removing files prior to extraction
* recursive-unlink::            Removing whole directories
@end menu

@node unlink-first, recursive-unlink, Unlinking, Unlinking
@subsubsection Removing files prior to extraction

The @value{unlink-first} option tells @code{tar} to try removing files
before extracting over them, instead of trying to overwrite them.

@node recursive-unlink, , unlink-first, Unlinking
@subsubsection Removing whole directories

When the @value{recursive-unlink} option is specified, @code{tar}
tries to remove files and directory hierarchies before extracting over them.
@strong{This is a dangerous option!}

So, @code{tar} is indeed able to remove a whole hierarchy to reestablish a
symbolic link, for example, but @emph{only if} @value{recursive-unlink}
is specified to allow this behavior.

@node Attributes, Scarce, Unlinking, extract
@subsection Handling file attributes

@menu
* touch::                       Setting modification times
* same-owner::                  Restoring file ownership
* same-permissions::            Setting access permissions
* no-attributes::               Leaving file attributes alone
@end menu

@node touch, same-owner, Attributes, Attributes
@subsubsection Setting modification times

Normally, @code{tar} sets the modification times of extracted files to
the modification times recorded for the files in the archive, but
limits the permissions of extracted files by the current @code{umask}
setting.

To set the modification times of extracted files to the time when
the files were extracted, use the @value{touch} option in
conjunction with @value{extract}.

In fact, @value{touch} sets the modification time of extracted archive
members to the time they were extracted, not the time recorded for them
in the archive.  Use in conjunction with @value{extract}.

The @value{touch} option does not extract file modification time.
When this option is used, @code{tar} leaves the modification time
of the files it extracts as the time when the files were extracted,
instead of setting it to the time recorded in the archive.

This option is meaningless with @value{list}.

@node same-owner, same-permissions, touch, Attributes
@subsubsection Restoring file ownership

The @value{same-owner} option invites @code{tar} to create extracted
files with the same ownership they have in the archive, if this is possible.

When using @code{tar} as super-user at extraction time, ownership is always restored.
So this option is meaningful only for non-root users, when @code{tar} is
executed on those systems able to give files away.  This is considered as
a security flaw by many people, at least because it makes quite difficult
to correctly charge users for the disk space they occupy.  Also, the
@code{suid} or @code{sgid} attributes of files are easily and silently
lost when files are given away.

When writing an archive, @code{tar} writes the user ID and user name
separately.  If it can't find a user name (because the user ID is not
in @file{/etc/passwd}), it does not write one.  When restoring,
and doing a @code{chmod}, as when you use @value{same-permissions},
(@FIXME{same-owner?}) it tries to look up the name (if one was written)
in @file{/etc/passwd}.  If it fails, then it uses the user ID stored in
the archive instead.

@node same-permissions, no-attributes, same-owner, Attributes
@subsubsection Setting access permissions

The @value{same-permissions} option requests the extraction of all
protection information.  This option causes @code{tar} to set the modes
(access permissions) of extracted files exactly as recorded in the archive.
If this option is not used, the current @code{umask} setting limits the
permissions on extracted files.

To set the modes (access permissions) of extracted files to those
recorded for those files in the archive, use @value{same-permissions}
in conjunction with the @value{extract} subcommand.

The @value{same-permission} option asks that the modes of
extracted archive members be those recorded in the archive, ignoring
current umask settings.  Use in conjunction with @value{extract}.

@FIXME{why doesnt' this cat files together, why is this useful.  Is it
really useful with more than one file?}

This option is meaningless with @value{list}.

@node no-attributes, , same-permissions, Attributes
@subsubsection Leaving file attributes alone

The experimental @value{no-attributes} option has the effect of
inhibiting all attempts at restoring file attributes, like owner, group,
mode, or time stamps.  In this case, @code{tar} lets the underlying system
handle such things, and does not try to intervene in any way.

@node Scarce, , Attributes, extract
@subsection Coping with scarce resources
@cindex Middle of the archive, starting in the
@cindex Running out of space during extraction
@cindex Disk space, running out of
@cindex Space on the disk, recovering from lack of

@menu
* starting-file::               Starting file
* same-order::                  Same order
* preserve::                    Preserving permissions and order
@end menu

@node starting-file, same-order, Scarce, Scarce
@subsubsection Starting file

Part of an archive may be skipped through the usage of the
@value{starting-file} option.  It forces the chosen subcommand to start
in the middle of an archive.  Use in conjunction with @value{extract}
or @value{list}.

If a previous attempt to extract files failed due to lack of disk space,
you can use @value{starting-file} to start extracting only after member
@var{name} of the archive.  This assumes, of course, that there is now
free space, or that you are now extracting into a different file system.
(You could also choose to suspend @code{tar}, remove unnecessary files
from the file system, and then restart the same @code{tar} subcommand.
In this case, @value{starting-file} is not necessary.  @xref{incremental},
@xref{interactive}, and @ref{exclude}.)

@node same-order, preserve, starting-file, Scarce
@subsubsection Same order

The @value{same-order} option allows @code{tar} to process large lists
of file names on machines with small amounts of memory.  Use in conjunction
with @value{compare}, @value{list}, or @value{extract}.

The @value{same-order} option tells @code{tar} that the list of file
names to be listed or extracted is sorted in the same order as the
files in the archive.  This allows a large list of names to be used,
even on a small machine that would not otherwise be able to hold all
the names in memory at the same time.  Such a sorted list can easily be
created by running @kbd{tar -t} on the archive and editing its output.

This option is probably never needed on modern computer systems.

@node preserve, , same-order, Scarce
@subsubsection Preserving permissions and order

Bizarrely, the @value{preserve} option is the same as using both
@value{same-permissions} and @value{same-order} simultaneously.

The @value{preserve} option has no equivalent short option name.  It is
really equivalent to @value{same-permissions} plus @value{same-order}.

@node create, Applications, extract, Subcommands
@section How to create archives

One of the basic subcommands of @code{tar} is @value{create}, which
you use to create a @code{tar} archive.  We will explain
@value{create} first because, in order to learn about the other
subcommands, you will find it useful to have an archive available to
practice on.

To make this easier, in this section you will first create a directory
containing three files.  Then we will show you how to create an
@emph{archive} inside the new directory.  Both the directory and
the archive are specifically for you to practice on.  The rest of this
chapter and the next chapter will show many examples using this
directory and the files you will create: some of those files may be
other directories and other archives.

The three files you will archive in this example are called
@file{blues}, @file{folk}, and @file{jazz}.  The archive is called
@file{collection.tar}.

This section will proceed slowly, detailing how to use @value{create}
in @code{verbose} mode, and showing examples using both short and long
forms.  In the rest of the tutorial, and in the examples in the next
chapter, we will proceed at a slightly quicker pace.  This section
moves more slowly to allow beginning users to understand how
@code{tar} works.

Creating an empty archive would have a kind of elegance.  One can
initialize an empty archive and later use @value{append} for adding
all members.  Some applications would not welcome making an exception
in the way of adding the first archive member.

@cindex Empty archive, how to create
@cindex Create empty archive
@cindex Archive, create empty

There is little or no reason to create an empty archive, but you can if
you wish.  (In itself, an empty archive is useless, but later you can
use @value{append} to add members.  There are no actions using an
empty archive that you cannot do as well or better with a regular
archive.)  Moreover, there have been reports that some versions of
@code{tar} have trouble with an empty archive on magnetic tapes.

Consequently, @code{tar} will not create an empty archive directly;
specifically, @code{tar} will not create an archive if you specify
the @value{create} option but fail to specify @value{files-from}
and do not provide any arguments besides options.

If, after considering all this, you should want to create an empty
archive, you must specify a value for the @value{files-from} option
that has no names in it, as in the following example:

@smallexample
$ @kbd{tar --create --file=empty-archive.tar --files-from=/dev/null}
$ @kbd{tar cfT empty-archive.tar /dev/null}
@end smallexample

On the other hand, many people reported that it is dangerously easy for
@code{tar} to destroy a magnetic tape with an empty archive.@footnote{This
is well described in @cite{The Unix-Hater's Handbook} by Simson Garfinkel,
Daniel Weise, and Steven Strassmann, IDG Books, ISBN 1-56884-203-1.}  The two
most common errors are:

@enumerate
@item
Mistakingly using @code{create} instead of @code{extract}, when the intent
was to extract the full contents of an archive.  This error is likely: keys
@kbd{c} and @kbd{x} are right next ot each other on the QWERTY keyboard.
Instead of being unpacked, the archive then gets wholly destroyed.
When users speak about @dfn{exploding} an archive, they usually mean
something else @dots{} Ahem!

@item
Forgetting the argument to @code{file}, when the intent was to create
an archive with a single file in it.  This error is likely because a
tired user can easily add the @kbd{f} key to the cluster of option
letters, by the mere force of habit, without realizing the full
consequences of doing so.  The usual consequence is that the single
file, which was meant to be archived, is instead destroyed.
@end enumerate

So, recognizing the likelihood and the catastrophic nature of these
errors, @code{tar} now distances itself from elegance, and
cravenly refuses to create an archive when @value{create} option is
given, there are no arguments besides options, and @value{files-from}
option is @emph{not} used.  Observe:

@smallexample
$ @kbd{tar c}
tar: Cravenly refusing to create an empty archive
Try `tar --help' for more information.
$ @kbd{tar cf foo}
tar: Cravenly refusing to create an empty archive
Try `tar --help' for more information.
@end smallexample

@noindent
To get around the cautiousness of
@code{tar} and nevertheless create an archive with nothing in it,
one may still use, as the value for the @value{files-from} option,
a file with no names in it, as shown in the following commands:

@smallexample
$ @kbd{tar --create --file=empty-archive.tar --files-from=/dev/null}
$ @kbd{tar cfT empty-archive.tar /dev/null}
@end smallexample

@menu
* name-prefix::                 Using name prefixes
* atime-preserve::              Preserving last access time
* remove-files::                Removing files
* append::                      How to add files to existing archives
* update::                      Updating an archive
@end menu

@node name-prefix, atime-preserve, create, create
@subsection Using name prefixes
@cindex Name Prefixes,
@cindex Prefixes, Name

Sometimes the directory structure you want an archive to create when you
unpack it is different from the directory structure you built it in.

This is often true when you are using a @code{tar} production in a
makefile, to build distribution archives in a source-code directory.
The most convenient way to do this would be with a command like the
following:

@smallexample
$ @kbd{tar --create --file=distribution.tar *}
@end smallexample

@noindent
But this makes an archive that will unpack as a lot of individual files,
which is usually not what you want.  Assuming your build directory is
named `project', you might do something like

@smallexample
$ @kbd{tar --directory=.. --create --file=distribution.tar project}
@end smallexample

But this means you will be stuck with the name of your build directory
as the top-level name of the distribution archive.  Often you would like
your distribution archive to unpack into a single directory, but with
a synthetic top-level directory name (perhaps including a version number).

You can get this effect with the @value{name-prefix} option.  Its
argument is a name prefix which gets prepended to each file name entry
in an archive as it is added to the archive.

For example, if you say

@smallexample
$ @kbd{tar --name-prefix='project-5.23/' --create --file=collection.tar *}
@end smallexample

you will make an archive of all the files and directories in the
current directory, but it will extract into the single subdirectory
@file{project-5.23}.

Note that you will almost always want the argument of
@value{name-prefix} to end with a directory delimiter (forward slash
under Unix-like operating systems, forward slash or backslash under DOS).
Otherwise you will make an archive in which each file has a prefix
welded directly to the first segment of its name.  While this capability
is there for full generality, it is probably not what you want.

@node atime-preserve, remove-files, name-prefix, create
@subsection Preserving last access time

When @code{tar} reads files, their access time gets updated.  To have
@code{tar} attempt to set the access times back to what they were before
they were read, use the @value{atime-preserve} option.  This doesn't work
for files that you don't own, unless you're root, and it doesn't interact
nicely with incremental dumps (@pxref{Backups}), but it is good enough
for some purposes.

This options also preserves the modification time field, which has no
effect unless the file is being modified simultaneously by another program.
As such, it also can eliminate evidence of reading or writing of the file
by another program, if the access happens between the beginning and ending
of @code{tar} reading the file.

A drawback of the @value{atime-preserve} option is that it alters the
@code{ctime} of the dumped files.  Some system administrators value
@code{ctime} much more than @code{atime}.@footnote{This is at least the case
of the current @code{paxutils} maintainer!}  They should ponder carefully
the advantages and disadvantages before using this option in system backups.

This option doesn't have any effect on MS-DOS, since @code{atime} is not
supported by the DOS FAT file system.  (It @emph{does} work on MS-Windows
9X.)

@node remove-files, append, atime-preserve, create
@subsection Removing files

The effect of the @value{remove-files} option is to remove files once
they have been added to the archive.
@FIXME{What happens if the archive cannot be completed?}

@node append, update, remove-files, create
@subsection How to add files to existing archives

If you want to add files to an existing archive, you don't need to
create a new archive; you can use @value{append}.  The archive must
already exist in order to use @value{append}.  (A related subcommand
is the @value{update} subcommand; you can use this to add newer
versions of archive members to an existing archive.  To learn how to
do this with @value{update}, refer to @ref{update}.)

@FIXME{Explain in second paragraph whether you can get to the previous
version -- explain whole situation somewhat more clearly.}

If you use @value{append} to add a file to an archive which already
contains a member with the same name, then the
old member is not deleted.  What does happen, however, is somewhat
complex.  @code{tar} @emph{allows} you to have infinite numbers of
archive members
with the same name.  Some subcommands treat these same-named members no
differently than any other set of archive members: for example, if you
view an archive with @value{list}, you will see all of those members
listed, with their modification times, owners, etc.

Other subcommands don't deal with these members as well as you might
prefer; if you were to use @value{extract} to extract the archive,
only the most recently added copy of a member with the same name as
other members would end up in the working directory.  This is because
@value{extract} extracts an archive in the order the members appeared
in the archive; the most recently archived members will be extracted
last.  Additionally, an extracted member will @emph{overwrite} a file of
the same name which existed in the directory already, and @code{tar}
will not prompt you about this.  Thus, only the most recently archived
member will end up being extracted, as it will overwrite the one
extracted before it, and so on.  (One way of extracting all of the
members without overwriting them is to use the @value{backup}
option; see @ref{backup}.)

Other than using @value{backup}, there are a few additional ways to
get around this.  @FIXME{xref Multiple Members with the Same Name.}

@cindex Members, replacing with other members
@cindex Replacing members with other members
If you want to replace an archive member, use @value{delete} to
delete the member you want to remove from the archive, and then use
@value{append} to add the member you want to be in the archive.
(Replacing one member with another will not work on certain types of
media, such as tapes; see @ref{delete} and @ref{Media}, for more
information.)  Note that you cannot change the order of the archive;
the most recently added member will still appear last.  In this sense,
you cannot truly ``replace'' one member with another.

@menu
* Appending files::             Appending files to an archive
* Multiple files::              Multiple files with the same name
@end menu

@node Appending files, Multiple files, append, append
@subsubsection Appending files to an archive
@cindex Adding files to an Archive
@cindex Appending files to an Archive
@cindex Archives, Appending files to

The simplest way to add a file to an already existing archive is the
@value{append} subcommand, which writes specified files into the
archive whether or not they are already among the archived files.  When
you use @value{append}, you @emph{must} specify file name arguments, as
there is no default.  If you specify a file that already exists in the
archive, another copy of the file will be added to the end of the
archive.  As with other subcommands, the member names of the newly added
files will be exactly the same as their names given on the command line
(except that backslashes in MS-DOS file names are mirrored to Unix-style
forward slashes).  The @value{verbose} option will print out the
names of the files as they are written into the archive.

@value{append} cannot be performed on some tape drives, unfortunately,
due to deficiencies in the formats those tape drives use.  The archive
must be a valid @code{tar} archive, or else the results of using this
subcommand will be unpredictable.  @xref{Media}.

To demonstrate use of @value{append} to add a file to an archive,
create a file called @file{rock} in the @file{practice} directory.
Make sure you are in the @file{practice} directory.  Then, run the
following @code{tar} command to add @file{rock} to
@file{collection.tar}:

@smallexample
$ @kbd{tar --append --file=collection.tar rock}
@end smallexample

@noindent
If you now use the @value{list} subcommand, you will see that
@file{rock} has been added to the archive:

@ignore
@smallexample
$ @kbd{tar --list --file=collection.tar}
-rw-rw-rw- myself users 28 1996-10-18 16:31 jazz
-rw-rw-rw- myself users 21 1996-09-23 16:44 blues
-rw-rw-rw- myself users 20 1996-09-23 16:44 folk
-rw-rw-rw- myself users 20 1996-09-23 16:44 rock
@end smallexample
@end ignore

@FIXME{The above example is wrong: the long listing is only printed if
you say --verbose.  We think the verbose listing should be used only
where required, since most people will see slightly different values
printed for everything but the file names, and newbies might get
confused.  So we left the command as it was, but changed the output:}

@smallexample
$ @kbd{tar --list --file=collection.tar}
jazz
blues
folk
rock
@end smallexample

@node Multiple files, , Appending files, append
@subsubsection Multiple files with the same name

You can use @value{append} to add copies of files which have been
updated since the archive was created.  (However, we do not recommend
doing this, since there is another @code{tar} option called
@value{update}; @pxref{update}, for more information.  We describe this
use of @value{append} here for the sake of completeness.)

When you extract the archive, the older version will effectively be lost.
This happens because files are extracted from an archive in the order in
which they were archived.  Thus, when the archive is extracted, a file
archived later in time will overwrite a file of the same name which was
archived earlier, even though the older version of the file will remain
in the archive unless you delete all versions of the file.

Suppose you change the file @file{blues} and then append the changed
version to @file{collection.tar}.  As you saw above, the original
@file{blues} is in the archive @file{collection.tar}.  If you change the
file and append the new version of the file to the archive, there will
be two copies in the archive.  When you extract the archive, the older
version of the file will be extracted first, and then overwritten by the
newer version when it is extracted.

You can append the new, changed copy of the file @file{blues} to the
archive in this way:

@smallexample
$ @kbd{tar --append --verbose --file=collection.tar blues}
blues
@end smallexample

@noindent
Because you specified the @value{verbose} option, @code{tar} has
printed the name of the file being appended as it was acted on.  Now
list the contents of the archive:

@smallexample
$ @kbd{tar --list --verbose --file=collection.tar}
-rw-rw-rw- myself users 28 1996-10-18 16:31 jazz
-rw-rw-rw- myself users 21 1996-09-23 16:44 blues
-rw-rw-rw- myself users 20 1996-09-23 16:44 folk
-rw-rw-rw- myself users 20 1996-09-23 16:44 rock
-rw-rw-rw- myself users 58 1996-10-24 18:30 blues
@end smallexample

@noindent
The newest version of @file{blues} is now at the end of the archive
(note the different creation dates and file sizes).  If you extract
the archive, the older version of the file @file{blues} will be
overwritten by the newer version.  You can confirm this by extracting
the archive and running @code{ls} on the directory.  @xref{Writing},
for more information.  (@emph{Please note:} This is the case unless
you employ the @value{backup} option; @FIXME{ref Multiple Members
with the Same Name}.)

@node update, , append, create
@subsection Updating an archive
@cindex Updating an archive

In the previous section, you learned how to use @value{append} to add
a file to an existing archive.  A related subcommand is
@value{update}.  The @value{update} subcommand updates a @code{tar}
archive by comparing the date of the specified archive members against
the date of the file with the same name.  If the file has been modified
more recently than the archive member, then the newer version of the
file is added to the archive (as with @value{append}).

Unfortunately, you cannot use @value{update} with magnetic tape drives.
The command will fail.

Both @value{update} and @value{append} work by adding to the end
of the archive.  When you extract a file from the archive, only the
version stored last will wind up in the file system, unless you use
the @value{backup} option (@FIXME{ref Multiple Members with the
Same Name}).

@FIXME{It was: A combination of the --compare and --append subcommands.
This is not true and rather misleading, as --compare does a lot more than
--update for ensuring files are identical.}

@menu
* How to update::               How to update members of an archive
* Unsuitability of update::     Updating does not always work
@end menu

@node How to update, Unsuitability of update, update, update
@subsubsection How to update members of an archive

You must use file name arguments with the @value{update} subcommand.
If you don't specify any files, @code{tar} won't act on any files and
won't tell you that it didn't do anything (which might end up confusing
you).

To see the @value{update} option at work, create a new file,
@file{classical}, in your practice directory, and some extra text to the
file @file{blues}, using any text editor.  Then invoke @code{tar} with
the @kbd{update} subcommand and the @value{verbose} option specified,
using the names of all the files in the practice directory as file name
arguments:

@smallexample
$ @kbd{tar --update -v -f collection.tar blues folk rock classical}
blues
classical
$
@end smallexample

@noindent
Because we have specified verbose mode, @code{tar} prints out the names
of the files it is working on, which in this case are the names of the
files that needed to be updated.  If you run @kbd{tar --list} and look
at the archive, you will see @file{blues} and @file{classical} at its
end.  There will be a total of two versions of the member @file{blues};
the one at the end will be newer and larger, since you added text before
updating it.

(The reason @code{tar} does not overwrite the older file when updating
it is because writing to the middle of a section of tape is a difficult
process.  Tapes are not designed to get data inserted in their middle;
doing so would destroy any data after the place you write.  @xref{Media}
for more information about tapes.)

@value{update} is not suitable for performing backups for two
reasons: it does not change directory content entries, and it lengthens
the archive every time it is used.  The @code{tar} options intended
specifically for backups are more efficient.  If you need to run
backups, please consult @ref{Backups}.

@node Unsuitability of update, , How to update, update
@subsubsection Updating does not always work

Sometimes, you may have a situation for which you would think usign
@value{update} would be ideal; unfortunately, this is not always the
case.  Two situations for which @value{update} is unsuitable are
updating an archive stored on a magnetic tape, and making
a backup.  Other subcommands and options provide more appropriate
solutions in these situations.

@code{tar} does not overwrite the older file when updating an archive.
This is because writing to the middle of a section of tape is a
difficult process.  Tapes are not really designed to go backward
(although some have the capability), and their linear nature makes
inserting data into the middle of a tape impossible, even if there is
room at the end of the tape.  In this way, tapes differ from other kinds
of storage media, such as floppy diskettes and hard drives.
@xref{Media}, for more information about tapes and other kinds of storage
media.

@value{update} is not suitable for performing backups for two reasons:
it does not change directory content entries, and it lengthens the
archive every time it is used.  The @code{tar} options intended
specifically for backups are more efficient.  If you need to run
backups, please consult @ref{Backups}.

@node Applications, , create, Subcommands
@section Other uses for @code{tar}

@FIXME{Using Unix file linking capability to recreate directory
structures---linking files into one subdirectory and then @code{tar}ring
that directory.}

@findex uuencode
You can easily use archive files to transport a group of files from
one system to another: put all relevant files into an archive on one
computer system, transfer the archive to another system, and extract
the contents there.  The basic transfer medium might be magnetic tape,
Internet FTP, or even electronic mail (though you must encode the
archive with @code{uuencode} in order to transport it properly by
mail).  Both machines do not have to use the same operating system, as
long as they both support the @code{tar} program.

For example, here is how you might copy a directory's contents from
one disk to another, while preserving the dates, modes, owners, and
link-structure of all the files therein.  In this case, the transfer
medium is a @dfn{pipe}, which is a Unix redirection mechanism:

@smallexample
$ @w{@kbd{cd sourcedir; tar --create --file=- . | (cd targetdir; tar --extract --file=-)}}
@end smallexample

@noindent
The command also works using short option forms:

@smallexample
$ @kbd{cd sourcedir; tar -cf - . | (cd targetdir; tar -xf -)}
@end smallexample

@noindent
If you are really confident you are using @code{tar} and that standard
input and output were not overridden by something else as the default archive
at your installation, you might write the above examples more simply:

@smallexample
$ @kbd{cd sourcedir; tar --create . | (cd targetdir; tar --extract)}
$ @kbd{cd sourcedir; tar -c . | (cd targetdir; tar -x)}
@end smallexample

This is one of the easiest methods to transfer a @code{tar} archive.

@FIXME{Examples to be adjusted for -p, but see about root/non-root first.}

@menu
* concatenate::                 Combining archives with @code{tar}
* Using cat with archives::     Combining archives with @code{cat}
* delete::                      Removing archive members from an archive
@end menu

@node concatenate, Using cat with archives, Applications, Applications
@subsection Combining archives with @code{tar}

@cindex Adding archives to an archive
@cindex Concatenating Archives
Sometimes it may be convenient to add a second archive onto the end of
an archive rather than adding individual files to the archive.  To add
the contents of one or more archives to the end of another archive, you
should use the @value{concatenate} subcommand.

To use @value{concatenate}, name two archives to be concatenated on the
command line.  (Nothing happens if you don't list any.)  The members,
and their member names, will be copied verbatim from those archives.  If
this causes multiple members to have the same name, it does not delete
any members; all the members with the same name coexist.  For
information on how this affects reading the archive, @FIXME{ref Multiple
Members with the Same Name}.

To demonstrate how @value{concatenate} works, create two small archives
called @file{bluesrock.tar} and @file{folkjazz.tar}, using the relevant
files from @file{practice}:

@smallexample
$ @kbd{tar -cvf bluesrock.tar blues rock}
blues
rock
$ @kbd{tar -cvf folkjazz.tar folk jazz}
folk
jazz
@end smallexample

@noindent
If you like, you can run @kbd{tar --list} to make sure the archives
contain what they are supposed to:

@smallexample
$ @kbd{tar -tvf bluesrock.tar}
-rw-rw-rw- myself users 105 1997-01-21 19:42 blues
-rw-rw-rw- myself users  33 1997-01-20 15:34 rock
$ @kbd{tar -tvf folkjazz.tar}
-rw-rw-rw- myself users 20 1996-09-23 16:44 folk
-rw-rw-rw- myself users 65 1997-01-30 14:15 jazz
@end smallexample

@FIXME{The long listing will only be printed undet -tvvf.  See the
remark above about why we think vv should be used as little as
possible.---eliz}

We can concatenate these two archives with @code{tar}:

@ignore
@smallexample
$ @kbd{cd ..}
$ @kbd{tar --concatenate --file=bluesrock.tar jazzfolk.tar}
@end smallexample
@end ignore

@FIXME{why the "cd .." above?  We think it's wrong, so we deleted it.}

@smallexample
$ @kbd{tar --concatenate --file=bluesrock.tar jazzfolk.tar}
@end smallexample

If you now list the contents of the @file{bluesrock.tar}, you will see
that now it also contains the archive members of @file{jazzfolk.tar}:

@smallexample
$ @kbd{tar --list --file=bluesrock.tar}
blues
rock
jazz
folk
@end smallexample

When you use @value{concatenate}, the source and target archives must
already exist and must have been created using compatible format parameters
(@FIXME{pxref Matching Format Parameters}).  The new, concatenated archive
will be called by the same name as the first archive listed on the command
line. @FIXME{Is there a way to specify a new name?  Of course, there is:
set $TAPE to the new name, and use --concatenate with no --file= argument.}

Like @value{append}, this subcommand cannot be performed on some
tape drives, due to deficiencies in the formats those tape drives use.

@cindex @code{concatenate} vs @code{cat}
@cindex @code{cat} vs @code{concatenate}
It may seem more intuitive to you to try to use @code{cat} to
concatenate two archives instead of using the @value{concatenate}
subcommand; after all, @code{cat} is the utility for combining files.

However, @code{tar} archives incorporate an end-of-file marker which
must be removed if the concatenated archives are to be read properly as
one archive.  @value{concatenate} removes the end-of-archive marker
from the target archive before each new archive is appended.  If you use
@code{cat} to combine the archives, the result will not be a valid
@code{tar} format archive.  If you need to retrieve files from an
archive that was added to using the @code{cat} utility, use the
@value{ignore-zeros} option.  @xref{ignore-zeros}, for further
information on dealing with archives improperly combined using the
@code{cat} utility.

You must specify the source archives using @value{file}
(@pxref{file}).  If you do not specify the target archive, @code{tar}
uses the value of the environment variable @code{TAPE}, or, if this has
not been set, the default archive name.  If the default archive name is
the standard output, @code{tar} will print an error message.

@menu
* Using cat with archives::     Combining archives with @code{cat}
@end menu

@node Using cat with archives, delete, concatenate, Applications
@subsection Combining archives with @code{cat}

@cindex Using @code{cat} to concatenate archives
@cindex @code{concatenate} vs @code{cat}
@cindex @code{cat} vs @code{concatenate}
It may seem more intuitive to you to try to use @code{cat} to
concatenate two archives instead of using the @value{concatenate}
subcommand; after all, @code{cat} is the utility for combining files.
However, @code{tar} archives incorporate an end-of-file marker which
must be removed if the concatenated archives are to be read properly as
one archive.  @value{concatenate} removes the end-of-archive marker
from the target archive before each new archive is appended.

Therefore, if you use @code{cat} to combine the archives, the result
will not be a valid @code{tar} format archive.  If you need to retrieve
files from an archive that was added to using the @code{cat} utility,
use the @value{ignore-zeros} option.  @xref{ignore-zeros}, for further
information on dealing with archives improperly combined using the
@code{cat} shell utility.

You must specify the names of the archives that will be concatenated
using @value{file} (@pxref{file}). @FIXME{this makes no sense; the
first archive in the list is the "target" archive...:} If you do not
specify the target archive (the archive to which you will concatenate
other archives), @code{tar} uses the value of the environment variable
@code{TAPE}, or, if this has not been set, the default archive name.

@node delete, , Using cat with archives, Applications
@subsection Removing archive members from an archive
@cindex Deleting files from an archive
@cindex Removing files from an archive

You can remove members from an archive by using the @value{delete}
option.  Specify the name of the archive with @value{file} and then
specify the names of the members to be deleted; if you list no member
names, nothing will be deleted.  The @value{verbose} option will
cause @code{tar} to print the names of the members as they are deleted.
As with @value{extract}, you must give the exact member names when
using @value{delete}.  @value{delete} will remove all versions of
the named file from the archive.  The @value{delete} subcommand can run
very slowly.

Unlike other subcommands, @value{delete} has no short form.

@cindex Tapes, using @value{delete} and
@cindex Deleting from tape archives
The @value{delete} subcommand will rewrite the archive.  You can only
use @value{delete} on an archive if the archive device allows you to
write to any point on the media at any time, that is, if it is a
random-access device like a hard disk.
The @value{delete} subcommand does not work on magnetic tapes.  Do not
try to delete an archive member
from a magnetic tape; the action will not succeed, and you will be
likely to scramble the archive and damage your tape.  There is no safe
way (except by completely rewriting the archive) to delete files from
most kinds of magnetic tape.  @xref{Media}.

To delete all versions of the file @file{blues} from the archive
@file{collection.tar} in the @file{practice} directory, make sure you
are in that directory, and then:

@smallexample
$ @kbd{tar --list --file=collection.tar}
jazz
blues
folk
rock
blues
blues
classical
$ @kbd{tar --delete --file=collection.tar blues}
$ @kbd{tar --list --file=collection.tar}
jazz
folk
rock
classical
$
@end smallexample

The @value{delete} option has been reported to work properly when
@code{tar} acts as a filter from @code{stdin} to @code{stdout}.

@node Choosing, Formats, Subcommands, Top
@chapter Choosing files and names for @code{tar}

Certain options to @code{tar} enable you to specify a name for your
archive.  Other options let you decide which files to include in, or exclude
from, the archive, based on when or whether files were modified, whether
the file names do or don't match specified patterns, or whether files
are in specified directories.

@menu
* file::                        Choosing and naming archive files
* Selecting Archive Members::   Selecting archive members
* Exclusions::                  Excluding files by name
* Time criteria::               Time based exclusions
* Walking::                     Walking through directories
* Relative::                    Relative notations for file names
@end menu

@node file, Selecting Archive Members, Choosing, Choosing
@section Choosing and naming archive files
@cindex Naming an archive
@cindex Archive Name
@cindex Directing output
@cindex Choosing an archive file
@cindex Where is the archive?

By default, @code{tar} uses an archive file name that was compiled into
it when @code{tar} was built on the system; usually this name refers to
some physical tape drive on the machine.  Later versions of
@code{tar} use standard output as the default archive file name (which
you can redirect to another file).
However, the person who installed @code{tar}
on the system may not have set the default to a meaningful value as far as
most users are concerned.  As a result, you will usually want to tell
@code{tar} where to find (or create) the archive.  The @value{file}
option allows you to specify a file to use as the archive
instead of the default archive file location.

The @value{file} option names the archive to create or operate on.
Use it in conjunction with any subcommand.

For example, in this @code{tar} command,

@smallexample
$ @kbd{tar -cvf collection.tar blues folk jazz}
@end smallexample

@noindent
@file{collection.tar} is the name of the archive.  It must directly
follow the @kbd{-f} option, since whatever directly follows @kbd{-f}
will end up naming the archive.  If you neglect to specify an
archive name, you may end up overwriting a file in the working directory
with the archive you create, since @code{tar} will use this file's name
for the archive name.

An archive can be saved as a file in the file system, sent through a
pipe or over a network, or written to an I/O device such as a tape,
floppy disk, or CD-Rewritable drive.

@cindex Writing new archives
@cindex Archive creation
If you do not name the archive, @code{tar} uses the value of the
environment variable @code{TAPE} as the file name for the archive.  If
that is not available, @code{tar} uses a default, compiled-in archive
name, usually that for tape unit zero (ie. @file{/dev/tu00}), or the
standard output.
@code{tar} always needs an archive name.

If you use @file{-} as an archive name, @code{tar} reads the
archive from standard input (when listing or extracting files), or
writes it to standard output (when creating an archive).  If you use
@file{-} as an archive name when modifying an archive,
@code{tar} reads the original archive from its standard input and
writes the entire new archive to its standard output.

@cindex Standard input and output
@cindex tar to standard input and output
@cindex Remote archives specification
@cindex Archives, on remote machines
To specify an archive file on a device attached to a remote machine,
use the following:

@smallexample
@kbd{--file=@var{hostname}:/@var{dev}/@var{file name}}
@end smallexample

@noindent
@code{tar} will initiate the remote connection, if possible, and prompt
you for a username and password.  If you use
@w{@kbd{--file=@var{user}@@@var{hostname}:/@var{dev}/@var{file name}}},
@code{tar} will initiate the remote connection, if possible, using your
username as the username on the remote machine.

If the archive file name includes a colon (@samp{:}), then it is assumed
to be a file on another machine.  If the archive file is
@kbd{@var{user}@@@var{host}:@var{file}}, then @var{file} is used on the
host @var{host}.  The remote host is accessed using the @code{rsh}
program, with a username of @var{user}.  If the username is omitted
(along with the @samp{@@} sign), then your user name will be used.
(This is the normal @code{rsh} behavior.)  It is necessary for the
remote machine, in addition to permitting your @code{rsh} access, to
have the @file{/usr/ucb/rmt} program installed.  If you need to use a
file whose name includes a colon, then the remote tape drive behavior
can be inhibited by using the @value{force-local} option.

@cindex Remote archives and MS-DOS file names
The MS-DOS/MS-Windows version of @code{tar} makes an exception to the
above: it does @strong{not} treat archive names with drive letters, such
as @file{d:/backups/daily.tar}, as remote.  This is so you would not be
forced to use @value{force-local} with the usual DOS-style absolute
file names.  @code{tar} only makes this exception when the colon is
preceded by a single character in the range @kbd{[A-z]}, which are valid
MS-DOS/MS-Windows drive letters.  (Yes, DOS also allows the drive letter
to be one of the six ASCII characters between uppercase @kbd{Z} and lowercase
@kbd{a}.)  This means that remote machines with single-letter names are
effectively disallowed by the MS-DOS version of @code{tar}.  However, we
find it hard to believe that anybody would use a one-letter name for a
machine.  (And as of now, @code{tar} doesn't support remote access on
MS-DOS anyway.)

When the archive is being created to @file{/dev/null}, @code{tar}
tries to minimize input and output subcommands.  The Amanda backup
system, when used with @code{tar}, has an initial sizing pass which
uses this feature.

@menu
* Using file::                  Using the @kbd{--file} option
* Standard archive::            Archive on standard input or output
* lmh::                         Abbreviating drive and density
* Remote::                      Accessing a remote drive
* force-local::                 Inhibiting remote access
* rsh-command::                 Selecting the remote access mechanism
* rmt invocation::              How @code{rmt} works
@end menu

@node Using file, Standard archive, file, file
@subsection Using the @kbd{--file} option

The @value{file} option allows you to specify a file
to use as the archive instead of the default archive file location.

@FIXME{Non-option arguments are not always interpreted the same way,
depending on what the subcommand is.}

The @value{file} option names the archive to create or operate on.
Use in conjunction with any subcommand.

For example, in this @code{tar} command,

@smallexample
$ @kbd{tar -cvf genres.tar blues folk jazz}
@end smallexample

@noindent
@file{genres.tar} is the name of the archive.  It must directly
follow the @kbd{-f} option, since whatever directly follows @kbd{-f}
will end up naming the archive.  If you neglect to specify an
archive name, you may end up overwriting a file in the working directory
with the archive you create, since @code{tar} will use this file's name
for the archive name.

When the archive is being created to @file{/dev/null}, @code{tar}
tries to minimize input and output subcommands.  The Amanda backup
system, when used with @code{tar}, has an initial sizing pass which
uses this feature.

@cindex Writing new archives
@cindex Archive creation
If you do not name the archive, @code{tar} uses the value of the
environment variable @code{TAPE} as the file name for the archive.  If
that is not available, @code{tar} uses a default, compiled-in archive
name, usually that for tape unit zero (ie. @file{/dev/tu00}).
@code{tar} always needs an archive name.

If you use @file{-} as an archive name, @code{tar} reads the
archive from standard input (when listing or extracting files), or
writes it to standard output (when creating an archive).  If you use
@file{-} as an archive name when modifying an archive,
@code{tar} reads the original archive from its standard input and
writes the entire new archive to its standard output.

@smallexample
$ @kbd{cd sourcedir; tar -cf - . | (cd targetdir; tar -xf -)}
@end smallexample

The @value{file} option is used to specify the file name of the archive
@code{tar} works on.  A few particular values are recognized especially,
and then trigger special internal mechanics for accessing the archive.
For example:

@smallexample
@kbd{-f [@var{hostname}:]@var{file}}
@kbd{--file=[@var{hostname}:]@var{file}}
@end smallexample

@noindent
may be used to access the archive file or device @var{file} on a networked
computer named @var{hostname}.  Such special notations are described here.

If the file name is @kbd{-}, @code{tar} reads the archive from standard
input (when listing or extracting), or writes it to standard output
(when creating).  If the @kbd{-} file name is given when updating an
archive, @code{tar} will read the original archive from its standard
input, and will write the entire new archive to its standard output.

If the file name contains a @samp{:}, it is interpreted as
@kbd{hostname:file name}.  If the @var{hostname} contains an @dfn{at}
sign (@kbd{@@}), it is treated as @kbd{user@@hostname:file name}.  In
either case, @code{tar} will invoke the command @code{rsh} (or
@code{remsh}) to start up an @file{/etc/rmt} on the remote machine.  If
you give an alternate login name, it will be given to the @code{rsh}.
Naturally, the remote machine must have an executable @file{/etc/rmt}.
This program is free software from the University of California, and a
copy of the source code can be found with the sources for @code{tar};
it's compiled and installed by default.

Since absolute file names on MS-DOS and MS-Windows include a drive
letter, like in @file{d:/dir/subdir/file}, @code{tar} compiled for these
platforms does not treat file names with @samp{:} as remote files if
there is a single letter before the colon.  @code{tar} also does not
currently support archives on remote machines when it runs on
MS-DOS/MS-Windows.

If @value{file} is not given, but the environment variable @code{TAPE} is
set, its value is used; otherwise, old versions of @code{tar} used a default
archive name (which was picked when @code{tar} was compiled).  The
default is normally set up to be the @dfn{first} tape drive or other
transportable I/O medium on the system.

Starting with version 1.11.5, @code{tar} uses standard input and
standard output as the default device, and we will no longer try to
support automatic device detection at installation time.  This was
failing in so many cases that it was hopeless to repair.  It is now
completely left to the installer to override standard input and standard
output in favor of some default device, if this seems preferable to him/her.
Further, we think @emph{most} actual uses of @code{tar} are with
pipes or disks, not tapes, cartridges, or diskettes.

Some users think that using standard input and output is asking
for trouble.  This could lead to a nasty surprise on your screen if
you forget to specify an output file name---especially if you are going
through a network or terminal server capable of buffering large amounts
of output.  We had so many bug reports in that area of configuring
default tapes automatically, and so many contradicting requests, that
we finally considered the problem to be intractable, at least if
portability is demanded.  We could
of course use something like @file{/dev/tape} as a default, but this
is @emph{also} asking for various kind of trouble, ranging from hung
processes to accidental destruction of real tapes.  After having seen
all this mess, using standard input and output as a default really
sounds like the only clean choice left, and a very useful one too.

@code{tar} reads and writes archive in records; we suspect this is to be
the main reason why block devices are preferred over character devices.
Most probably, block devices are more efficient too.  The installer could
also check for @code{DEFTAPE} in @file{<sys/mtio.h>}.

@node Standard archive, lmh, Using file, file
@subsection Archive on standard input or output

@cindex Standard input and output
@cindex tar to standard input and output

@node lmh, Remote, Standard archive, file
@subsection Abbreviating drive and density

In some circumstances, the special @kbd{-[0-7][lmh]} option may be used
to specify drive and density.  (Not supported on MS-DOS/MS-Windows.)

@node Remote, force-local, lmh, file
@subsection Accessing a remote drive
@cindex remote tape drive
@pindex rmt

In order to access the tape drive on a remote machine, @code{tar}
uses the remote tape server written at the University of California at
Berkeley.  The remote tape server must be installed as @file{/etc/rmt}
on any machine whose tape drive you want to use.  @code{tar} calls
@file{/etc/rmt} by running an @code{rsh} or @code{remsh} to the remote
machine, optionally using a different login name if one is supplied.

A copy of the source for the remote tape server is provided.  It is
Copyright @copyright{} 1983 by the Regents of the University of
California, but can be freely distributed.  Instructions for compiling
and installing it are included in the @file{Makefile}.

To specify an archive file on a device attached to a remote machine,
use the following:

@smallexample
@kbd{--file=@var{hostname}:/@var{dev}/@var{file name}}
@end smallexample

@noindent
@code{tar} will complete the remote connection, if possible, and
prompt you for a username and password.  If you use
@w{@kbd{--file=@@@var{hostname}:/@var{dev}/@var{file name}}}, @code{tar}
will complete the remote connection, if possible, using your username
as the username on the remote machine.

If the archive file name includes a colon (@samp{:}), then it is assumed
to be a file on another machine.  If the archive file is
@kbd{@var{user}@@@var{host}:@var{file}}, then @var{file} is used on the
host @var{host}.  The remote host is accessed using the @code{rsh}
program, with a username of @var{user}.  If the username is omitted
(along with the @samp{@@} sign), then your user name will be used.
(This is the normal @code{rsh} behavior.)  It is necessary for the
remote machine to have the @file{/usr/ucb/rmt} program installed, in
addition to permitting your @code{rsh} access.

If you need to use a file whose name includes a colon, then the remote tape
drive behavior can be inhibited by using the @value{force-local} option
(@pxref{force-local}).  You can tell @code{tar} to use an alternative to
@code{rsh} by using the @value{rsh-command} option (@pxref{rsh-command}).

A few options are related to such special interpretation.

@node force-local, rsh-command, Remote, file
@subsection Inhibiting remote access

The @value{force-local} option treats the archive file name specified by
@value{file} as local even if it contains a colon.  (The MS-DOS version
always treats DOS-style absolute file names with a drive letter as local.)

@node rsh-command, rmt invocation, force-local, file
@subsection Selecting the remote access mechanism

By using the @value{rsh-command} option, @code{tar} may be asked to
use remote @var{command} instead of @code{rsh}.  This option exists so
that people who use something other than the standard @code{rsh} (for example,
a Kerberized @code{rsh}) can access a remote device.

When this option is not used, the shell command found when the @code{tar}
program was installed is used instead.  This is the first found of
@file{/usr/ucb/rsh}, @file{/usr/bin/remsh}, @file{/usr/bin/rsh},
@file{/usr/bsd/rsh} or @file{/usr/bin/nsh}.  The installer may have
overridden this by defining the environment variable @code{RSH} @emph{at
installation time}.

The option @value{rsh-command} causes @code{tar} to use remote @var{command}
instead of @code{rsh}.  This option exists so that people who use something
other than the standard @code{rsh} (for example, a Kerberized @code{rsh}) can
access a remote device.

When this command is not used, the shell command found when the @code{tar}
program was installed is used instead.  This is the first found of
@file{/usr/ucb/rsh}, @file{/usr/bin/remsh}, @file{/usr/bin/rsh},
@file{/usr/bsd/rsh} or @file{/usr/bin/nsh}.  The installer may have
overridden this by defining the environment variable @code{RSH} @emph{at
installation time}.

@node rmt invocation, , rsh-command, file
@subsection How @code{rmt} works

This subsection has yet to be written.

@node Selecting Archive Members, Exclusions, file, Choosing
@section Selecting archive members
@cindex Specifying files to act on
@cindex Specifying archive members

@dfn{File name arguments} specify which files in the file system
@code{tar} operates on, when creating or adding to an archive, or which
archive members @code{tar} operates on, when reading or deleting from
an archive.  @xref{Subcommands}.

To specify file names, you can include them as the last arguments on
the command line, as follows:
@smallexample
@kbd{tar} @var{subcommand} [@var{option1} @var{option2} @dots{}] [@var{file name-1} @var{file name-2} @dots{}]
@end smallexample

If you specify a directory name as a file name argument, all the files
in that directory are operated on by @code{tar}.

If you do not specify files when @code{tar} is invoked with
@value{create}, @code{tar} operates on all the non-directory files in
the working directory.  If you specify either @value{list} or
@value{extract}, @code{tar} operates on all the archive members in the
archive.  If you specify any subcommand other than one of these three,
@code{tar} does nothing.

By default, @code{tar} takes file names from the command line.  However,
there are other ways to specify file or member names, or to modify the
manner in which @code{tar} selects the files or members upon which to
operate.  @xref{files-from}; see @ref{exclude}.  In general, these methods
work for specifying the names of both files and archive members.

@menu
* files-from::                  Reading names from a file
* find with files-from::        Using @code{find} to generate a list of files
* null::                        @code{NUL} terminated file names
* quick::                       Trading speed versus duplicate entries
@end menu

@node files-from, find with files-from, Selecting Archive Members, Selecting Archive Members
@subsection Reading names from a file
@cindex Reading file names from a file
@cindex Lists of file names
@cindex File Name arguments, alternatives

The @value{files-from} option gets names to extract or create from file
@var{file name}.

So, instead of giving the names of files or archive members on the command
line, you can put the names into a file, and then use the @value{files-from}
option to @code{tar}.  Give the name of the file which contains the list
of files to include as the argument to @value{files-from}.  In the list,
the file names should be separated by newlines.  You will frequently use
this option when you have generated the list of files to archive with the
@code{find} utility.

One can intermix @value{files-from} within the names given on the command
line, in which case the included list of file is logically inserted at the
proper point in the file name sequence.@footnote{It was not possible to
intermix @value{files-from} and names on a command line, with @code{tar}
version 1.12 and earlier versions.} The @value{files-from} option may even
be used more than once.  One consequence of the above is that, when this
option is specified early in the command, the names given on the command
line are collected after the list of files included by @value{files-from}.

If you give a single dash as a file name for @value{files-from}, (that
is, if you specify either @w{@kbd{--files-from=-}} or @w{@kbd{-T -}}),
then the file names are read from standard input.  Unless you are running
@code{tar} with @value{create}, you cannot use both @w{@kbd{--files-from=-}}
and @w{@kbd{--file=-}} (@w{@kbd{-f -}}) in the same command.  In fact,
the rule is that standard input may not be invoked more than once.

Unless @value{null} is set, file names in a @value{files-from} file
should quote special characters, at least newlines and backslashes, using
backslashed sequences.  Newlines may be represented by @samp{\n}, tabs
by @samp{\t}, form feeds by @samp{\f}, backspaces by @samp{\b}, carriage
returns by @samp{\r}, deletes by @samp{\?} and backslashes by @samp{\\}.
Characters may also be given in octal notation as per @samp{\@var{N}},
@samp{\@var{NN}} or @samp{\@var{NNN}}.  Other occurrences of backslashes
are merely dropped.

Using @value{files-from} and @value{directory} simultaneously on the command
line is a bit delicate, and the user should pay attention to a few things.
As the directory should usually be switched before interpreting file names
from the list, @value{directory} normally appears before @value{files-from}.
Yet, if the argument of @value{files-from} uses relative notation, it is
interpreted relative to the last specified directory.  Some shell trickery
might be needed, like this:

@smallexample
$ @kbd{tar --create --file=archive.tar --directory=where --files-from=`pwd`/list}
$ @kbd{tar cfCT archive.tar where `pwd`/list}
@end smallexample

@noindent
for reading the list of files from @file{list} in the current directory,
while interpreting each file it contains relative to the @file{where}
directory.  Another possibility is to to trigger a change of the directory
from within the file list contents, so avoiding the @value{directory}
option on the command line.  @xref{directory}.

@node find with files-from, null, files-from, Selecting Archive Members
@subsection Using @code{find} to generate a list of files

The following example shows how to use @code{find} to generate a list of
files smaller than 400K in length and put that list into a file called
@file{small-files}.  You can then use the @value{files-from} option to
@code{tar} to specify the files from that file, @file{small-files}, to create
the archive @file{little.tgz}.  (The @value{gzip} option to @code{tar}
compresses the archive with @code{gzip}; @pxref{gzip} for more information.)

@smallexample
$ @kbd{find . ! -type d -size -400 -print > small-files}
$ @kbd{tar -c -v -z -T small-files -f little.tgz}
@end smallexample

@noindent

The @kbd{! -type d} predicate is needed so that @code{find} won't print
the name @file{.} directory itself, if it happens to be small in size.
If @code{find} were to print the name of @file{.}, all of the files in
the current directory would end up in the archive, in addition to the
files that are smaller than 400KB!

You can use the @code{find} utility to generate a list of files.  You
can then pass this list to @code{tar} using the @value{files-from}
option.  For more information on using @code{find}, please consult
@FIXME{have to figure out how to do the xref for find, since i couldn't
get it to work}.

The following example shows how to use @code{find} to generate a list of
files smaller than 400K in length and put that list into a file
called @file{small-files}.  You can then use the @kbd{-T} option to
@code{tar} to specify the files from that file, @file{small-files}, to
create the archive @file{little.tgz}.  (The @kbd{-z} option to
@code{tar} compresses the archive with @code{gzip}; @pxref{gzip} for
more information.)

@smallexample
$ @kbd{find . -size -400 -print > small-files}
$ @kbd{tar -c -v -z -T small-files -f little.tgz}
@end smallexample

This example shows how to use @code{find} to generate a list of files
larger than 800K in length and put that list into a file called
@file{long-files}.  The @kbd{-print0} option to @code{find} just just
like @kbd{-print}, except that it separates files with a @code{NUL}
rather than with a newline.  You can then run @code{tar} with both the
@value{null} and @kbd{-T} options to specify that @code{tar} get the
files from that file, @file{long-files}, to create the archive
@file{big.tgz}.  The @value{null} option to @code{tar} will cause
@code{tar} to recognize the @code{NUL} separator between files.

@smallexample
$ @kbd{find . -size +800 -print0 > long-files}
$ @kbd{tar -c -v --null --files-from=long-files --file=big.tar}
@end smallexample

@node null, quick, find with files-from, Selecting Archive Members
@subsection @code{NUL} terminated file names
@cindex File names, terminated by @code{NUL}
@cindex @code{NUL} terminated file names

The @value{null} option causes @value{files-from} to read file
names terminated by a @code{NUL} instead of a newline, so files whose
names contain newlines can be archived using @value{files-from}.

So, the @value{null} option exists so that users can tell @code{tar}
to consider only @code{NUL} terminated file names, instead of files that
terminate in a newline.

The @value{null} option is just like the one in GNU @code{xargs} and
@code{cpio}, and is useful with the @kbd{-print0} predicate of GNU
@code{find}.  In @code{tar}, @value{null} also causes @value{directory}
options, when used from within a @value{files-from} inclusion, to be
treated as file names to archive, in case there are any files out there
called @file{-C}.

This example shows how to use @code{find} to generate a list of files
larger than 800K in length and put that list into a file called
@file{long-files}.  The @kbd{-print0} option to @code{find} works just
like @kbd{-print}, except that it separates files with a @code{NUL}
rather than with a newline.  You can then run @code{tar} with both the
@value{null} and @kbd{-T} options to specify that @code{tar} get the
files from that file, @file{long-files}, to create the archive
@file{big.tgz}.  The @value{null} option to @code{tar} will cause
@code{tar} to recognize the @code{NUL} separator between files.

@smallexample
$ @kbd{find . ! -type d -size +800 -print0 > long-files}
$ @kbd{tar -c -v --null --files-from=long-files --file=big.tar}
@end smallexample

@noindent
Again, you need the @kbd{! -type d} predicate to prevent @code{find}
from printing the @file{.} directory name, which would have caused
@code{tar} to include the entire directory in the archive.

Additionally, if the @value{list} option is used non-verbosely with
@value{null}, each listed file name will be terminated with @code{NUL}
instead of a newline.  Also, the quoting of some special characters,
which is usual in the produced output, gets inhibited.

@node quick,  , null, Selecting Archive Members
@subsection Trading speed versus duplicate entries
@cindex Quick extraction
@cindex Duplicate entries
@cindex Speed versus duplicate entries

Many users noticed that @code{tar} continues reading until the end of the
tape after requested files have been extracted.  The reason behind this is
that other tar options, like @value{append} or @value{update}, let users put
additional versions of the same files on the end of an existing archive.
However, in the practice of every day, it is very unusual that an archive
has many copies of a single entry, and running archives until their end may
be perceived as a waste of time.

The @value{quick} option alters the usual behavior of @code{tar}
at extraction time, so it considers itself satisfied when each given
argument specifying an entry name, in the archive, yielded some extraction.
Once this has been achieved, @code{tar} terminates its processing early.
Oh the other hand, for those unusual archives having multiple copies of
a single entry, using @value{quick} may not be a wise thing to do, as the
extracted files may not always be the latest to appear in the archive.

The speedup effect of @value{quick} is somewhat defeated by another feature
of @code{tar}, by which it drains archive coming from a pipe, as part of its
completion code.@footnote{This draining feature has been added, a while ago,
to avoid spurious diagnostics about broken pipes.  From the number of bug
reports received about such diagnostics, it is clear that they do annoy
users.} Such a pipe may be explict from the shell construct from which
@code{tar} is called, or sometimes, it might be implicit from @code{tar}
internal operations.  One important case of such implicit draining is
when the archive being read was compressed.  So currently, @value{quick}
is most effective when reading an uncompressed archive directly from the
disk or the tape holding it.

Wildcards in entry arguments create another difficulty.  To fully expand
wildcards from the archive contents, @code{tar} need to read the archive
completely.  So, if the @value{quick} is given and wildcards are used in
the same call, @code{tar} is receiving contradicting messages about what
it should do.  In such cases, @code{tar} produces a usage error and does
not process the archive.

When @value{quick} is used, and if an argument specifies an entry which
appears multiple times in the archive, this documentation does not specify
which entries, among those possible, are selected for processing.  This is
left unspecified on purpose, so @code{tar} behavior may later be changed
more easily.  Consider that @value{verbose} is your friend, here!

@node Exclusions, Time criteria, Selecting Archive Members, Choosing
@section Excluding files by name
@cindex File names, excluding files by
@cindex Excluding files by name and pattern
@cindex Excluding files by file system

To avoid operating on files whose names match a particular pattern, use
the @value{exclude} or @value{exclude-from} options.  These options are
available while creating an archive, as well as when listing an archive
or extracting from it.

@menu
* exclude::                     Excluding some files
* exclude-from::                Handling a lot of exclusions
* Wildcards::                   Wildcard patterns and matching
* Problems with exclude::       Problems with using the @code{exclude} options
@end menu

@node exclude, exclude-from, Exclusions, Exclusions
@subsection Excluding some files
@findex exclude

The @value{exclude} option causes @code{tar} to ignore files that match
the @var{pattern}.

The @value{exclude} option will prevent any file or member which matches
the shell wildcards (@var{pattern}) from being operated on (@var{pattern}
can be a single file name or a more complex expression; see @ref{Wildcards}).
For example, if you want to create an archive with all the contents of the
directory @file{foo} in @file{/tmp}, except the file @file{foo/bar}, you
can use the command @kbd{tar --create --file=arch.tar --exclude=foo/bar}.
You may give multiple @value{exclude} options.

@node exclude-from, Wildcards, exclude, Exclusions
@subsection Handling a lot of exclusions
@findex exclude-from

The @value{exclude-from} option causes @code{tar} to ignore files that
match the patterns listed in @var{file}.

Use the @value{exclude-from} option to read a list of shell wildcards,
one per line, from @var{file}; @code{tar} will ignore files matching
those wildcards.  Thus if @code{tar} is called as @w{@kbd{tar -c -X foo .}}
and the file @file{foo} contains a single line @file{*.o}, no files whose
names end in @file{.o} will be added to the archive.

@FIXME{Do the exclude options files need to have stuff separated by
newlines the same as the files-from option does?}

@node Wildcards, Problems with exclude, exclude-from, Exclusions
@subsection Wildcard patterns and matching

@dfn{Globbing} is the operation by which @dfn{wildcard} characters, @samp{*}
or @samp{?} for example, are replaced and expanded into all existing files
matching the given pattern.  However, @code{tar} often uses wildcard patterns
for matching (or globbing) archive members instead of actual files in the
filesystem.  Wildcard patterns are also used for verifying volume labels of
@code{tar} archives.  This section explains wildcard
syntax for @code{tar}.@footnote{For the literate programmer, suffice to say
that wildcarding is achieved through the @code{fnmatch} library routine,
used without flags for labels, or with @code{FNM_LEADING_DIR} for excludes.}

A @var{pattern} should be written according to shell syntax, using wildcard
characters to effect globbing.  Most characters in the pattern stand
for themselves in the matched string, and case is significant: @samp{a}
will match only @samp{a}, and not @samp{A}.  The character @samp{?} in the
pattern matches any single character in the matched string.  The character
@samp{*} in the pattern matches zero, one, or more single characters in
the matched string.  The character @samp{\} says to take the following
character of the pattern @emph{literally}; it is useful when one needs to
match the @samp{?}, @samp{*}, @samp{[}, or @samp{\} characters themselves.

The character @samp{[}, up to the matching @samp{]}, introduces a
@dfn{character class}.  A character class is a list of acceptable characters
for the next single character of the matched string.  For example,
@samp{[abcde]} would match any of the first five letters of the alphabet.
Note that within a character class all of the ``special characters''
listed above, other than @samp{\}, lose their special meaning; for example,
@samp{[-\\[*?]]} would match any of the characters @samp{-}, @samp{\},
@samp{[}, @samp{*}, @samp{?}, or @samp{]}.  In a character class, the special
construction @samp{[@var{a}-@var{e}]}, using an hyphen between two letters,
is meant to represent all characters between @var{a} and @var{e}, inclusive.
(Due to parsing constraints, the characters @samp{-} and @samp{]} must
come either @emph{first} or @emph{last} in a character class.)

@cindex Excluding characters from a character class
@cindex Character class, excluding characters from
If the first character of the class after the opening @samp{[}
is @samp{!} or @samp{^}, then the meaning of the class is reversed.
Rather than listing the characters to match, it lists those characters that
are @emph{forbidden} as the next single character of the matched string.

Other characters of the class stand for themselves.  The special
construction @samp{[@var{a}-@var{e}]}, using a hyphen between two
letters, is meant to represent all characters between @var{a} and
@var{e} inclusive.

Despite what some other tools do, periods (@samp{.}) or forward slashes
(@samp{/}) are not considered special for wildcard matches.  For example,
the pattern @samp{*baz} may match file @file{/foo/bar/baz} as well as file
@file{foobaz}.  Moreover, in exclude contexts, if a pattern completely
matches a directory prefix of a matched string, then it matches the full
matched string: so any pattern excluding a directory also excludes all
the files beneath it.

There are some discussions floating in the air asking for modifications
in the way @code{tar} accomplishes wildcard matches.  We perceive any change
of semantics in this area as a delicate thing to impose on @code{tar} users.
On the other hand, we should be progressive enough to correct any ill-design:
compatibility at any price is not always a good attitude.  In conclusion,
it is @emph{possible} that slight amendments be later brought to the
previous description.  Your opinions on the matter are welcome.

@node Problems with exclude, , Wildcards, Exclusions
@subsection Problems with using the @code{exclude} options

Some users find @kbd{exclude} options confusing.  Here are some common
pitfalls:

@itemize @bullet
@item
The @code{tar} program will always act on file names
listed on the command line, no matter whether or not there is an
exclusion that would otherwise affect them.  In the example above, if
you create an archive and exclude files that end with @file{*.o}, but
explicitly name the file @file{catc.o} after all the options have been
listed, @file{catc.o} @emph{will} be included in the archive.

@item
You can sometimes confuse the meanings of @value{exclude} and
@value{exclude-from}.  Be careful: use @value{exclude} when files
to be excluded are given as a pattern on the command line.  Use
@value{exclude-from} to introduce the name of a
file which contains a list of patterns, one per line; each of these
patterns can exclude zero, one, or many files.

@item
When you use @value{exclude}, be sure to quote the @var{pattern}
parameter, so @code{tar} sees wildcard characters like @samp{*}.
If you do not do this, the shell might expand the @samp{*} itself
using files at hand, so @code{tar} might receive a list of files
instead of one pattern, or none at all, making the command illegal.

For example, write:

@smallexample
$ @kbd{tar -c -f @var{archive.tar} -X '*/tmp/*' @var{directory}}
@end smallexample

@noindent
rather than:

@smallexample
$ @kbd{tar -c -f @var{archive.tar} -X */tmp/* @var{directory}}
@end smallexample

@item
You must use use shell syntax, or globbing, rather than @code{regexp}
syntax, when using exclude options in @code{tar}.  If you try to use
@code{regexp} syntax to describe files to be excluded, your command
might fail.  @xref{Wildcards}.

@item
In earlier versions of @code{tar}, what is now the @value{exclude-from}
option was called @w{@kbd{--exclude-@var{pattern}}} instead.  Now,
@w{@kbd{--exclude=@var{pattern}}} applies to patterns listed on the command
line and @w{@kbd{--exclude-from=@var{file-of-patterns}}} applies to patterns
listed in a file.

@end itemize

@node Time criteria, Walking, Exclusions, Choosing
@section Time based exclusions
@cindex Excluding file by age
@cindex Modification time, excluding files by
@cindex Age, excluding files by

These options limit @code{tar} to only operating on files which have
been modified after the date specified.  A file is considered to have
changed if the contents have been modified, or if the owner,
permissions, and so forth have been changed.  (For more information on
how to specify a date, see @ref{Date input formats}; remember that the
entire date argument must be quoted if it contains any spaces.)

Gurus would say that @value{after-date} tests both the @code{mtime}
(time the contents of the file were last modified) and the @code{ctime}
(time the file's status was last changed: owner, permissions, etc)
fields, while @value{newer-mtime} tests only @code{mtime} field.

To be precise, @value{after-date} checks @emph{both} @code{mtime} and
@code{ctime} and processes the file if either one is more recent than
@var{date}, while @value{newer-mtime} only checks @code{mtime} and
disregards @code{ctime}.  Neither uses @code{atime} (the last time the
contents of the file were looked at).

@cindex File time stamp on MS-DOS/MS-Windows
@cindex Modification time, on MS-DOS
The MS-DOS/MS-Windows file systems record only one time stamp per file
(Windows 9X and NT file systems have all three time fields).
On those file systems, @value{after-date} and @value{newer-mtime}
will have the same effect.  MS-DOS stores file time with 2-second
granularity; you need to consider this when setting the value of
@var{date} for these two options.

Date specifiers can have embedded spaces.  Because of this, you may need
to quote date arguments to keep the shell from parsing them as separate
arguments.

@FIXME{Need example of --newer-mtime with quoted argument.}

@quotation
@strong{Please note:} @value{after-date} and @value{newer-mtime}
should not be used for incremental backups.  Some files (such as those
in renamed directories) are not selected properly by these options.
@xref{incremental listed-incremental}.
@end quotation

You may use these options with any subcommand.  Note that these options
differ from the @value{update} subcommand in that they allow you to
specify a particular date against which @code{tar} can compare when
deciding whether or not to archive the files.

@menu
* after-date::                  Operating only on new files
* newer-mtime::                 Operating only on altered files
@end menu

@node after-date, newer-mtime, Time criteria, Time criteria
@subsection Operating only on new files

The @value{after-date} option causes @code{tar} to work only on files
whose modification or inode-changed times are newer than the @var{date}
given.  If you use this option when creating or appending to an archive,
the archive will only include new files.  If you use @value{after-date}
when extracting an archive, @code{tar} will only extract files newer
than the @var{date} you specify.

To select files newer than the modification time of a file that already
exists, you can use the @value{reference} option of GNU @code{date},
available in GNU shell utilities 1.13 or later.  For example, you could say:

@smallexample
$ @kbd{tar -cf @var{archive.tar} --newer="`date -r @var{file}`" /home}
@end smallexample

@noindent
The @code{date} command in this command returns the timestamp of that
already existing file; this timestamp expands to become the reference date
which @value{after-date} uses to determine which files to archive.

@xref{Date input formats}, for a precise specification of all date formats which
are usable with this option.  Many date notations have spaces included,
you should sure that you use quotes around the option value, so these
spaces are not interpreted by the shell as argument separators.

@node newer-mtime, , after-date, Time criteria
@subsection Operating only on altered files

The @value{newer-mtime} option causes @code{tar} to work only on files
whose modification time is newer than the @var{date} given.  If you use
this option when creating or appending to an archive, the archive will
only include new files.  If you use @value{newer-mtime} when extracting
an archive, @code{tar} will only extract files newer than the @var{date}
you specify.

If you only want @code{tar} to make the date comparison based on modification
of the actual contents of the file (rather than inode changes), then use
the @value{newer-mtime} option.  Option @value{newer-mtime} acts
like @value{after-date}, but only looks at modification times.

The acceptable date notations are the same as those the @value{after-date}
option accepts (@pxref{Date input formats}).

@node Walking, Relative, Time criteria, Choosing
@section Walking through directories

@menu
* no-recursion::                Descending into directories
* one-file-system::             Crossing filesystem boundaries
@end menu

@node no-recursion, one-file-system, Walking, Walking
@subsection Descending into directories
@cindex Avoiding recursion in directories
@cindex Descending directories, avoiding
@cindex Directories, avoiding recursion
@cindex Recursion in directories, avoiding

Usually, @code{tar} will recursively explore all directories (either
those given on the command line or through the @value{files-from}
option) for the various files they contain.  However, you may not always
want @code{tar} to act this way.

The @value{no-recursion} option inhibits @code{tar}'s recursive descent
into specified directories.  If you specify @value{no-recursion}, you can
use the @code{find} utility for hunting through levels of directories to
construct a list of file names which you could then pass to @code{tar}.
@code{find} allows you to be more selective when choosing which files to
archive; see @ref{files-from} for more information on using @code{find} with
@code{tar}.

The @value{no-recursion} option prevents @code{tar} from recursively
descending directories.

When you use @value{no-recursion}, @code{tar} grabs directory entries
themselves, but does not descend into them recursively.  Many people use
@code{find} for locating files they want to back up, and since
@code{tar} @emph{usually} recursively descends on directories, they have
to use the @kbd{@w{! -d}} option to @code{find} @FIXME{Needs more
explanation or a cite to another info file} as they usually do not want
all the files in a directory.  They then use the @value{files-from}
option to archive the files located via @code{find}.

The problem when restoring files archived in this manner is
that the directories themselves are not in the archive; so the
@value{same-permissions} option does not affect them---while users
might really like it to.  Specifying @value{no-recursion} is a way to
tell @code{tar} to grab only the directory entries given to it, adding no
new files on its own.

@node one-file-system, , no-recursion, Walking
@subsection Crossing filesystem boundaries
@cindex File system boundaries, not crossing

Normally @code{tar} will automatically cross file system boundaries in order
to archive files which are part of a directory tree.  You can change this
behavior by specifying @value{one-file-system}.
This option only affects files that are archived because they are in a
directory that is being archived; @code{tar} will still archive files
explicitly named on the command line or through @value{files-from},
regardless of where they reside.

The @value{one-file-system} option prevents @code{tar} from crossing
file system boundaries when archiving.  Use it in conjunction with any write
subcommand.

The @value{one-file-system} option causes @code{tar} to modify its
normal behavior in archiving the contents of directories.  If a file in
a directory is not on the same filesystem as the directory itself, then
@code{tar} will not archive that file.  If the file is a directory itself,
@code{tar} will not archive anything beneath it; in other words, @code{tar}
will not cross mount points.

It is reported that using this option, the mount point @strong{is}
archived, but nothing under it is.

This option is useful for making full or incremental archival backups
of a single file system.  If this option is used in conjunction with
@value{verbose}, files that are excluded are mentioned by name on the
standard error.

@node Relative, , Walking, Choosing
@section Relative notations for file names

@menu
* directory::                   Changing the working directory
* absolute-names::              Absolute file names
@end menu

@node directory, absolute-names, Relative, Relative
@subsection Changing the working directory

@cindex Changing directory mid-stream
@cindex Directory, changing mid-stream
@cindex Working directory, specifying

To change the working directory in the middle of a list of file names,
either on the command line or in a file specified using
@value{files-from}, use @value{directory}.  This will change the
working directory to the directory @var{directory} after that point in
the list.

The @value{directory} option changes the working directory in the middle
of a command line.

For example,

@smallexample
$ @kbd{tar -c -f jams.tar grape prune -C food cherry}
@end smallexample

@noindent
will place the files @file{grape} and @file{prune} from the current
directory into the archive @file{jams.tar}, followed by the file
@file{cherry} from the directory @file{food}.  This option is especially
useful when you have several widely separated files that you want to
store as if they were in the same directory.

Note that the file @file{cherry} is recorded in the archive under the
precise name @file{cherry}, @emph{not} @file{food/cherry}.  Thus, the
archive will contain three files that all appear to have come from the
same directory; if the archive is extracted with plain @kbd{tar
--extract}, all three files will be written in the current directory.

Contrast this with the command

@smallexample
$ @kbd{tar -c -f jams.tar grape prune food/cherry}
@end smallexample

@noindent
which records the third file in the archive under the name
@file{food/cherry} so that, if the archive is extracted using
@kbd{tar --extract}, the third file will be written in a subdirectory
named @file{food}.

You can use the @value{directory} option to make the archive
independent of the original name of the directory holding the files.
The following command places the files @file{/etc/passwd},
@file{/etc/hosts}, and @file{/lib/libc.a} into the archive
@file{foo.tar}:

@smallexample
$ @kbd{tar -c -f foo.tar -C /etc passwd hosts -C /lib libc.a}
@end smallexample

@noindent
However, the names of the archive members will be exactly what they were
on the command line: @file{passwd}, @file{hosts}, and @file{libc.a}.
They will not appear to be related by file name to the original
directories where those files were located.

Note that @value{directory} options are interpreted consecutively.  If
@value{directory} specifies a relative file name, it is interpreted
relative to the then current directory, which might not be the same as
the original current working directory of @code{tar}, due to a previous
@value{directory} option.

When using @value{files-from} (@pxref{files-from}), you can put @kbd{-C}
options in the file list, in which case the next line is interpreted as
a directory for the following entries.@footnote{Do not try using @kbd{-C}
and the directory on the same input line, separated with some white space.
this will not work.  You have to put @kbd{-C} alone on its line, followed
by the directory alone on its line.} This interpretation of @kbd{-C}
from within inclusion files is disabled when using the @value{null} option.

@node absolute-names, , directory, Relative
@subsection Absolute file names
@cindex absolute file names

When @code{tar} extracts archive members from an archive, it strips any
leading slashes (@samp{/}) from the member name.  This causes absolute member
names in the archive to be treated as relative file names.  This allows
you to have such members extracted wherever you want, instead of being
restricted to extracting the member in the exact directory named in the
archive.  For example, if the archive member has the name @file{/etc/passwd},
@code{tar} will extract it as if the name were really @file{etc/passwd}.
(On MS-DOS and MS-Windows, @code{tar} also strips the drive letter and
the colon that follows it, if the original file names include them, so
@file{d:/foo/bar} is archived as @file{foo/bar}.)

Other @code{tar} programs do not do this.  As a result, if you create an
archive whose member names start with a slash, they will be difficult for
other people to use with other @code{tar} programs.  Therefore, @code{tar}
also strips leading slashes from member names when putting members into the
archive.  For example, if you ask @code{tar} to add the file @file{/bin/ls}
to an archive, it will do so, but the member name will be @file{bin/ls}.

At either time, @code{tar} prints out a message about removing the @samp{/}
from file names.  This message appears once per @code{tar} invocation.
It is imperative that the user be warned about this; ignoring it can
cause very serious surprises later.  (On MS-DOS/MS-Windows, @code{tar}
also reports the removal of the drive specification.)  Some people,
nevertheless, do not want to see this message.  Wanting to play really
dangerously, one may of course redirect @code{tar} standard error to
the sink.  For example, under @code{sh}:

@smallexample
$ @kbd{tar cf archive.tar /home 2> /dev/null}
@end smallexample

@noindent
Another solution, both nicer and simpler, would be to change to the @file{/}
directory first, and then avoid absolute notation.  For example:

@smallexample
$ @kbd{(cd / && tar cf archive.tar home)}
$ @kbd{tar cfC archive.tar / home}
@end smallexample

If you want to extract the files in an archive to the same absolute names
that they had when the archive was created, you should use a similar recipe at
extract time.  Following the example above:

@smallexample
$ @kbd{(cd / && tar xf archive.tar)}
$ @kbd{tar xfC archive.tar /}
@end smallexample

@noindent
(On MS-DOS, include the drive specification in the @kbd{-C} option, or
change the current drive before the @kbd{cd} command.)

If you use the @value{absolute-names} option, @code{tar} will carry out neither
of these transformations, that is, it will not remove leading slashes when
adding archive members, and will not strip leading slashes from member
names when restoring an archive.  If you only invoked @code{tar} from the
root directory you would never need the @value{absolute-names} option,
but using this option may be more convenient than switching to root.  So,
the two examples above could be respectively replaced by these two lines:

@smallexample
$ @kbd{tar cfP archive.tar /home}
$ @kbd{tar xfP archive.tar}
@end smallexample

Using the @value{absolute-names} option also suppress the warning message.

@node Formats, Media, Choosing, Top
@chapter Controlling the archive format

@menu
* Portability::                 Making @code{tar} archives more portable
* Forced fields::               Options to preset file attributes
* Compression::                 Using less space through compression
* Other formats::               Other non-@code{tar} formats
@end menu

@node Portability, Forced fields, Formats, Formats
@section Making @code{tar} archives more portable

Creating a @code{tar} archive on a particular system that is to be
useful later on many other machines and with other versions of @code{tar}
is more challenging than you might think.  @code{tar} archive formats
have been evolving since the first versions of Unix.  Many such formats
are around, and they are not always compatible with each other.  This section
discusses a few problems, and gives some advice about making @code{tar}
archives more portable.

One golden rule is simplicity.  For example, limit your @code{tar}
archives to contain only regular files and directories, avoiding
other, special kinds of files.  Do not attempt to save sparse files or
contiguous files as such.  Let's discuss a few more problems, in turn.

@menu
* Portable names::              Portable names
* dereference::                 Symbolic links
* old-archive::                 Old V7 archives
* posix::                       @code{tar} and POSIX @code{tar}
* Checksumming::                Checksumming problems
@end menu

@node Portable names, dereference, Portability, Portability
@subsection Portable names

Use @emph{straight} file and directory names, made up of printable
ASCII characters, avoiding colons, slashes, backslashes, spaces, and
other @emph{dangerous} characters.  Avoid deep directory nesting.
Accounting for oldish System V machines, limit your file and directory
names to 14 characters or less.

If you intend for your @code{tar} archives to be read under MS-DOS,
you should not rely on case-sensitivity for file names, and you might use
the GNU @code{doschk} program for helping you further diagnosing illegal
MS-DOS names, which are even more limited than System V's.  @code{tar}
compiled for MS-DOS @emph{does} try to cope with filenames which are
illegal on MS-DOS file systems (@FIXME{pxref Subcommands??}), but the
best portability strategy is to avoid such problems in the first place.
Even newer versions of MS-Windows, such as Windows 9X and Windows NT, still
have some restrictions on characters which can appear in a file name.
Typically, characters which are special to the shell, like @samp{?},
@samp{*}, and @samp{|}, are not allowed and should be avoided.

@node dereference, old-archive, Portable names, Portability
@subsection Symbolic links
@cindex File names, using symbolic links
@cindex Symbolic link as file name

Normally, when @code{tar} archives a symbolic link, it writes a block to the
archive naming the target of the link.  In that way, the @code{tar} archive
is a faithful record of the filesystem contents.  The @value{dereference}
option is used with @value{create}, and causes @code{tar} to archive the
files symbolic links point to, instead of the links themselves.  So, when
this option is used, when @code{tar} encounters a symbolic link, it will
archive the linked-to file, instead of simply recording the presence of
a symbolic link.

When using @value{dereference}, the real name under which the file is
stored in the file system is not recorded in the archive.  To record both
the symbolic link name and the file name in the system, archive the file
under both names.  If all links were recorded automatically by @code{tar},
an extracted file might be linked to a file name that no longer exists in
the file system.

If a linked-to file is encountered again by @code{tar} while creating
the same archive, an entire second copy of it will be stored.  (This
@emph{might} be considered a bug.)

So, for portable archives, do not archive symbolic links as such, and
use @value{dereference}: many systems do not support symbolic links, and
moreover, your distribution might be unusable if it contains unresolved
symbolic links.

@node old-archive, posix, dereference, Portability
@subsection Old V7 archives
@cindex Format, old style
@cindex Old style format
@cindex Old style archives

Certain old versions of @code{tar} cannot handle additional information
recorded by newer @code{tar} programs.  To create an archive in V7
format (not ANSI), which can be read by these old versions, specify
the @value{old-archive} option in conjunction with the @value{create}.
When you specify it, @code{tar} leaves out information about directories,
pipes, FIFOs, contiguous files, and device files, and specifies file
ownership by group and user IDs instead of group and user names.

When updating an archive, do not use @value{old-archive}
unless the archive was created using this option.

In most cases, a @emph{new} format archive can be read by an @emph{old}
@code{tar} program without serious trouble, so this option should
seldom be needed.  On the other hand, most modern @code{tar}s are
able to read old format archives, so it might be safer for you to
always use @value{old-archive} for your distributions.

@node posix, Checksumming, old-archive, Portability
@subsection @code{tar} and POSIX @code{tar}

@code{tar} was based on an early draft of the POSIX 1003.1
@code{ustar} standard.  Extensions to this @code{tar}, such as the
support for file names longer than 100 characters, use portions of the
@code{tar} header record which were specified in that POSIX draft as
unused.  Subsequent changes in POSIX have allocated the same parts of
the header record for other purposes.  As a result, @code{tar} is
incompatible with the current POSIX spec, and with @code{tar} programs
that follow it.

We plan to reimplement these extensions in a new way which is
upward compatible with the latest POSIX @code{tar} format, but we
don't know when this will be done.

In the mean time, there is simply no way of telling what might happen if you
read a @code{tar} archive that uses the extensions using
some other @code{tar} program.  So if you want to read the archive
with another @code{tar} program, be sure to write it using the
@value{old-archive} option (@kbd{-o}).

@FIXME{Is there a way to tell which flavor of tar was used to write a
particular archive before you try to read it?}

Traditionally, old @code{tar}s have a limit of 100 characters.
@code{tar} attempted two different approaches to overcoming this limit,
using and extending a format specified by a draft of P1003.1.
The first way was not that successful, and involved @file{@@MaNgLeD@@}
file names, or such; while a second approach used @file{././@@LongLink}
and other tricks, yielding better success.  In theory, @code{tar}
should be able to handle file names of practically unlimited length.
So, if @code{tar} fails to dump and retrieve files having more
than 100 characters, then there is a bug in @code{tar}.

But, for strict conformity to POSIX, the limit was still 100 characters.
For various other purposes, @code{tar} used areas left unassigned
in the POSIX draft.  POSIX later revised the P1003.1 @code{ustar} format by
assigning previously unused header fields in such a way that the upper
limit for file name length was raised to 256 characters.  However, the
actual POSIX limit oscillates between 100 and 256, depending on the
precise location of slashes in full file name (this is rather ugly).
Since @code{tar} uses the same fields for quite other purposes,
it became incompatible with the latest POSIX standards.

For longer or non-fitting file names, we plan to use yet another set
of extensions, but this time, complying with the provisions POSIX
offers for extending the format, rather than conflicting with it.
Whenever an archive uses old @code{tar} extension format or POSIX
extensions, whether for very long file names or for other special cases,
this archive becomes non-portable to other @code{tar} implementations.
In fact, anything can happen.  The most forgiving @code{tar}s will
merely unpack the file using a wrong name, and maybe create another
file named something like @file{@@LongName}, with the true file name
in it.  @code{tar}s not protecting themselves may segment violate!

Compatibility concerns make all of these things more difficult, as we
will have to support @emph{all} these things together, for a while.
@code{tar} should be able to produce and read true POSIX format
files, while being able to detect old @code{tar} formats, including
old V7 format, and process them conveniently.  It will take years
before this whole area stabilizes @dots{}

There are plans to raise this 100 limit to 256, and yet produce POSIX
conformant archives.  Past 256, we do not know yet if @code{tar}
will go non-POSIX again, or merely refuse to archive the file.

There are plans for @code{tar} to support the latest POSIX format more fully,
while being able to read old V7 format, old GNU (semi-POSIX plus extensions),
and full POSIX.  One may ask if there is part of the POSIX format that we
still cannot support.  This simple question has a complex answer.  Maybe,
on closer inspection, some strong limitations will pop up, but up to now,
nothing looks too difficult (but see below).  We only have these few
pages of POSIX telling about `Extended tar format' (P1003.1-1990--section
10.1.1), and there are references to other parts of the standard we do
not have, which should normally enforce limitations on stored file names
(we suspect things like fixing what @kbd{/} and @kbd{@key{NUL}} mean).
There are also some points which the standard does not make clear.
Existing practice will then drive what we should do.

POSIX mandates that when a file name cannot fit within 100 to
256 characters (the variance comes from the fact a @kbd{/} is
ideally needed as the 156th character) or a link name cannot
fit within 100 characters, a warning should be issued and the file
@emph{not} be stored.  Unless the @value{posix} option is given
(or @code{POSIXLY_CORRECT} is set), we believe that @code{tar}
should disobey this specification, and automatically switch to using
extensions to overcome file name or link name length limitations.

There is a problem, however, which we have not intimately studied yet.
Given a truly POSIX archive with names having more than 100 characters,
we guess that @code{tar} up to 1.11.8 will process it as if it were an
old V7 archive, and be fooled by some fields which are coded differently.
So, the question is to decide if the next generation of @code{tar}
should produce POSIX format by default, whenever possible, producing
archives that older versions of @code{tar} might not be able to read
correctly.  We fear that we will have to suffer such a choice one of these
days, if we want @code{tar} to go closer to POSIX.  We might choose to
do that right away.
Another possibility is to produce the current @code{tar} format
by default for a few years, but have @code{tar} versions from some
1.@var{POSIX} and up able to recognize all three formats, and let older
@code{tar} fade out slowly.  Then, we could switch to producing POSIX
format by default, with not much harm to those still having (very old at
that time) @code{tar} versions prior to 1.@var{POSIX}.

POSIX format cannot represent very long names, volume headers,
splitting of files in multi-volumes, sparse files, and incremental
dumps; these would be all disallowed if @value{posix} is given or
@code{POSIXLY_CORRECT} is set.  Otherwise, if @code{tar} is given long
names, or @kbd{-[VMSgG]}, then it should automatically go non-POSIX.
We think this is easily granted without much discussion.

Another point is that only @code{mtime} is stored in POSIX
archives, while @code{tar} currently also stores @code{atime}
and @code{ctime}.  If we want @code{tar} to go closer to POSIX,
my choice would be to drop @code{atime} and @code{ctime} support on
average.  On the other hand, we perceive that full dumps or incremental
dumps need @code{atime} and @code{ctime} support, so for those special
applications, POSIX has to be avoided altogether.

A few users requested that @value{sparse} be always active by
default.  We think that before replying to them, we have to decide
if we want @code{tar} to go closer to POSIX on average, while
producing files.  My choice would be to go closer to POSIX in the
long run.  Besides possible double reading, we do not see any point
in not trying to save files as sparse when creating archives which
are neither POSIX nor old-V7, so the actual @value{sparse} would
become selected by default when producing such archives, whatever
the reason is.  So, @value{sparse} alone might be redefined to force
extended format archives, and recover its previous meaning from this fact.

Extended format as it exists now can easily fool other POSIX @code{tar}s,
as it uses fields which POSIX considers to be part of the file name
prefix.  We wonder if it would not be a good idea, in the long run,
to try changing extended format so that any added field (like @code{ctime},
@code{atime}, file offset in subsequent volumes, or sparse file
descriptions) would be wholly and always pushed into an extension block,
instead of using space in the POSIX header block.  We could manage
to do that portably between future @code{tar}s.  So other POSIX
@code{tar}s might at least be able to provide roughly correct listings
for the archives produced by @code{tar}, if not to process
them otherwise.

Using these projected extensions might induce older @code{tar}s to fail.
We would use the same approach as for POSIX.  We'll put out a @code{tar}
capable of reading POSIXier, yet extended archives, but will not produce
this format by default, when not in POSIX mode.  In a few years, when newer
@code{tar}s will have flooded out @code{tar} 1.11.X and earlier, we
could switch to producing POSIXier extended archives, with no real harm
to users, as almost all existing @code{tar}s will be ready to read
POSIXier format.  In fact, we'll do both changes at the same time, in a
few years, and just prepare @code{tar} for both changes, without effecting
them, from 1.@var{POSIX}.  (Both changes: 1---using POSIX conventions for
getting over 100 characters; 2---avoiding mangling POSIX headers for
extensions, using only POSIX mandated extension techniques).

So, a future @code{tar} will have a @value{posix}
flag forcing the usage of truly POSIX headers, and so, producing
archives that previous @code{tar}s will not be able to read.
So, @emph{once} pretest announces that feature, it would be
particularly useful for users to test how exchangeable archives will be
between @code{tar} with @value{posix} and other POSIX @code{tar}s.

In a few years, when @code{tar} will produce POSIX headers by
default, @value{posix} will have a strong meaning and will disallow
extensions.  But in the meantime, for a long while, @value{posix}
in @code{tar} will not disallow extensions like @value{label},
@value{multi-volume}, @value{sparse}, or very long file or link names.
However, @value{posix} with extensions will use POSIX
headers with reserved-for-users extensions to headers, and we will be
curious to know how well or badly POSIX @code{tar}s will react to these.

@code{tar} prior to 1.@var{POSIX}, and after 1.@var{POSIX} without
@value{posix}, generates and checks @samp{ustar@w{ }@w{ }}, with two
suffixed spaces.  This is sufficient for older @code{tar} not to
recognize POSIX archives, and consequently, wrongly decide those archives
are in old V7 format.  It is a useful bug for me, because @code{tar}
has other POSIX incompatibilities, and we need to segregate @code{tar}
semi-POSIX archives from truly POSIX archives, for @code{tar} should
be somewhat compatible with itself, while migrating closer to latest
POSIX standards.  So, we'll be very careful about how and when we will do
the correction.

@node Checksumming, , posix, Portability
@subsection Checksumming problems

SunOS and HP-UX @code{tar} fail to accept archives created using
@code{tar} and containing non-ASCII file names, that is, file names
having characters with the eighth bit set, because they use signed
checksums, while @code{tar} uses unsigned checksums when creating
archives, as per POSIX standards.  On reading, @code{tar} computes
both checksums and accepts either.  It is somewhat worrying that a lot of
people may go around doing backup of their files using faulty (or at
least non-standard) software, not learning about it until it's time
to restore their missing files with an incompatible file extractor,
or vice versa.

@code{tar} computes checksums both ways, and accepts either on read,
so @code{tar} can read Sun tapes even with their wrong checksums.
@code{tar} produces the standard checksum, however, raising
incompatibilities with Sun.  That is to say, @code{tar} has not
been modified to @emph{produce} incorrect archives to be read by buggy
@code{tar}s.  We've been told that more recent Sun @code{tar} now
reads standard archives, so maybe Sun did a similar patch, after all?

The story seems to be that when Sun first imported @code{tar}
sources on their system, they recompiled it without realizing that
the checksums were computed differently, because of a change in
the default signing of @code{char}s in their compiler.  So they
started computing checksums wrongly.  When they later realized their
mistake, they merely decided to stay compatible with it, and with
themselves afterwards.  Presumably, but we do not really know, HP-UX
has chosen that their @code{tar} archives to be compatible with Sun's.
The current standards do not favor Sun @code{tar} format.  In any
case, it now falls on the shoulders of SunOS and HP-UX users to get
a @code{tar} able to read the good archives they receive.

@node Forced fields, Compression, Portability, Formats
@section Options to preset file attributes

@menu
* mode::                        Presetting permissions
* owner::                       Forcing a given owner
* group::                       Forcing a given group
* numeric-owner::               Using numeric owner and group
@end menu

@node mode, owner, Forced fields, Forced fields
@subsection Presetting permissions

When adding files to an archive, @code{tar} will use @var{permissions}
for the archive members, rather than the permissions from the files.
The program @code{chmod} and this @code{tar} option share the same syntax
for what @var{permissions} might be.  @xref{File permissions, Permissions,
File permissions, filetutils, GNU file utilities}.  This reference also
has useful information for those not especially familiar with the Unix
permission system.

Of course, @var{permissions} might be plainly specified as an octal number.
However, using generic symbolic modifications to mode bits allows
more flexibility.  For example, the value @samp{a+rw} adds read and write
permissions for everybody, while retaining executable bits on directories
or on any other file already marked as executable.

@node owner, group, mode, Forced fields
@subsection Forcing a given owner

The @value{owner} option specifies that @code{tar} should use @var{user} as
the owner of members when creating archives, instead of the user associated
with the source file.  @var{user} is first decoded as a user symbolic name,
but if this interpretation fails, it has to be a decimal numeric user ID.

There is no value indicating a missing number, and @samp{0} usually means
@code{root}.  Some people like to force @samp{0} as the value to offer in
their distributions for the owner of files, because the @code{root} user is
anonymous anyway, so that might as well be the owner of anonymous archives.

@code{tar} on MS-DOS/MS-Windows allows @var{user} to be @emph{any}
string.  These systems don't support file ownership, so @code{tar} allows
them to give away files to anybody.  If @var{user} includes only digits,
it is treated as a numeric UID; otherwise, it is treated as a user name.

@node group, numeric-owner, owner, Forced fields
@subsection Forcing a given group

Given the @value{group} option, files added to the @code{tar}
archive will have a group ID of @var{group}, rather than the group from
the source file.  @var{group} is first decoded as a group symbolic name,
but if this interpretation fails, it has to be a decimal numeric group ID.
@code{tar} on MS-DOS/MS-Windows allows @var{group} to be @emph{any} string.
These systems don't support group IDs, so @code{tar} allows them to
give away files to anybody.  If @var{group} consists only of digits,
it is treated as a numeric GID; otherwise it is treated as a group name.

@node numeric-owner, , group, Forced fields
@subsection Using numeric owner and group

The @value{numeric-owner} option allows (ANSI) archives to be written
without user/group name information, or allows such information to be ignored
when extracting.  It effectively disables the generation and/or use of
user/group name information.  This option forces extraction using the
numeric IDs from the archive, ignoring the names.

This is useful in certain circumstances, when restoring a backup from
an emergency floppy with different passwd/group files for example.
It is otherwise impossible to extract files with the right ownerships
if the password file in use during the extraction does not match the
one belonging to the filesystem(s) being extracted.  This occurs,
for example, if you are restoring your files after a major crash and
had booted from an emergency floppy with no password file or put your
disk into another machine to do the restore.

The numeric IDs are @emph{always} saved into @code{tar} archives.
The identifying names are added at create time when provided by the
system, unless @value{old-archive} is used.  Numeric IDs could be
used when moving archives between a collection of machines using
a centralized management for attribution of numeric IDs to users
and groups.  This is often done via the NIS capabilities.

When making a @code{tar} file for distribution to other sites, it
is sometimes cleaner to use a single owner for all files in the
distribution, and nicer to specify the write permission bits of the
members as stored in the archive independently of their actual value on
the file system.  The way to prepare a clean distribution is usually
to have some makefile rule creating a directory, copying all needed
files in that directory, then setting ownership and permissions as
wanted (there are a lot of possible schemes), and only then making a
@code{tar} archive out of this directory, before cleaning everything
out.  Of course, we could add a lot of options to @code{tar} for
fine-tuning permissions and ownership.  This is not the best approach,
we think.  @code{tar} is already crowded with options, and
the approach just explained gives you a great deal of control already.

@node Compression, Other formats, Forced fields, Formats
@section Using less space through compression

@code{tar} has options built in to let you compress and uncompress archives
or individual members on the command line, at the same time that you create
or extract them.  Compressing an archive causes it to take up less space
in the system, but also might introduce a few difficulties.

You can compress your archives using several different methods and programs.
When compressing the whole archive, you can also create the archive without
using one of those options and pipe (@code{|}) the archive through a
compression program such as @code{gzip}.  Likewise, instead of using
options for compressing individual members, one might first have the
files compressed right on disk, before the archive is later made without
using related options; the serious drawback is that files are left altered
(compressed) by this two step process, which users do not want in general.

There are @code{tar} limitations with compressed archives.  You cannot
modify whole compressed archives (with @value{append}, @value{update}
or @value{delete}, for example).  You may also not use them in conjunction
with @value{multi-volume} related options.

@menu
* Archive compression::         Compressing the whole archive
* Member compression::          Compressing individual members
@end menu

@node Archive compression, Member compression, Compression, Compression
@subsection Compressing the whole archive

The @value{gzip}, @value{compress} and @value{use-compress-program}
options allow you to compress or uncompress a @code{tar} archive at the
same time as you create or extract the archive.  These options are useful
in saving time over networks, or saving space in pipes, and when storage
space is at a premium.

@value{gzip} runs the @code{gzip} utility; @value{compress} runs
@code{compress}; and @value{use-compress-program} allows you to choose
a compression program that you prefer.  If the selected compression utility
is not available, @code{tar} will report an error.

When any of the above options is specified, @code{tar} will compress (when
writing an archive), or uncompress (when reading an archive).  These options
are used in conjunction with the @value{create}, @value{extract},
@value{list}, and @value{compare} subcommands.  However, these
options will not work in conjunction with the @value{append},
@value{update}, @value{concatenate}, and @value{delete} subcommands.
@xref{Subcommands}, for more information on all these.

@cindex Corrupted archives
@cindex Compressed archives, modification of
In general, compression algorithms work by substituting a string of
characters for some longer string of characters in the original file.
The compression program keeps track of which strings in the compressed file
will substitute for individual longer bits of the file.  If you modify
a compressed file, the compression program will hopelessly lose track of
the data that was originally mapped to the compressed form of the data,
and the file will be corrupted and useless after the modification point.

Similarly, you should not compress a file that will be used as a backup on
a tape.  If your backup archive is compressed on a tape and even a small
portion of the tape is damaged in some way, you will be unable to recover
the contents of the archive following the damage, due to the way compression
algorithms work (described above).  If a tape containing an uncompressed
backup archive gets damaged, you can probably still recover the data from the
rest of the tape; there is no corrupted matching algorithm to work around.

For the @code{tar} and @code{gzip} tandem, as in the command @kbd{tar
tfz archive.tar.gz}, you need to decompress the full archive to see
its contents.  However, this may be done without needing disk space, by using
pipes internally.  (@code{tar} on MS-DOS and MS-Windows also supports this
on-the-fly compression with @code{gzip}, but since pipes are simulated with
disk files on MS-DOS, you @emph{do} need disk space to store the uncompressed
copy while @code{tar} runs.  In particular, make sure the disk with the
directory which is the value of the environment variable @code{TMPDIR}
has enough free space.  Many DOS users tend to point it to a RAM disk.)

You can use archive compression options on physical devices (tape drives
and so forth) and remote files as well as on normal files; data to or from such
devices or remote files is reblocked by a forked copy of the @code{tar}
program to enforce the specified (or default) record size.  It is also
useful to be able to call the compression option from within @code{tar},
instead of using external pipes, because compression utilities by themselves
cannot access remote tape drives.

It has been reported that if one writes compressed data (through the
@value{gzip} or @value{compress} options) to a DLT and tries to use
the DLT compression mode, the data will actually get bigger and one will
end up with less space on the tape.

Why does @code{tar} refuse to compress archives with @value{multi-volume}?
Here is a sort of explanation.  Each tape of a multi-volume set should have
a volume header entry at its beginning.  When compressing, another process
(like @code{gzip}, say) takes care of the compression.  @code{gzip} is not
able to detect the end of tape and inform @code{tar} of what is going on,
so @code{tar} would produce the new volume header.  Even then, @code{tar}
would not be able to withdraw already produced bytes up to the exact
point where the tape would be full after compression (further, @code{gzip}
itself produces write-ahead bytes in its own buffers).  On the other hand,
@code{tar} often forks itself @emph{after} gzip to reprocess its output,
so @code{gzip} is sort of transparently sandwiched between two copies
of @code{tar}.  Maybe some later @code{tar} version will execute the
multi-volume spanning code right in the post-processing @code{tar}?

On the other hand, I wonder if compressed multi-volumes are such a good idea.
If one has a huge archive spanned on many volumes, one looses all tapes
following the first having an error, and all hope with them @dots{}

@menu
* gzip::                        Using @code{gzip} compression
* compress::                    Using @code{compress} compression
* use-compress-program::        Using other compression programs
@end menu

@node gzip, compress, Archive compression, Archive compression
@subsubsection Using @code{gzip} compression
@cindex Compressed archives
@cindex Storing archives in compressed format

You can have archives compressed by using the @value{gzip} option.
This will arrange for @code{tar} to use the @code{gzip} program to be used
to compress or uncompress the whole archive when writing or reading it.

To perform compression and uncompression on the archive, @code{tar} runs the
@code{gzip} utility.  @code{tar} uses the default compression parameters;
if you need to override them, avoid the @value{gzip} option and run
the @code{gzip} utility explicitly.  (Or set the @code{GZIP} environment
variable.)

The following commands, for creating a compressed archive, are equivalent:

@smallexample
$ @kbd{tar cfz archive.tar.gz subdir}
$ @kbd{tar cf - subdir | gzip > archive.tar.gz}
@end smallexample

@noindent
They both save all of @file{subdir} into a @code{gzip}-ed archive.  Later you
can do either of:

@smallexample
$ @kbd{tar xfz archive.tar.gz}
$ @kbd{gunzip < archive.tar.gz | tar xf -}
@end smallexample

@noindent
to explode and unpack.

Although it is possible for @code{tar} and @code{gzip} to be done with a
single call, it is not precisely correct to say that @code{tar} is to work in concert
with @code{gzip} in a way similar to @code{zip}, say.  @xref{zip}, for
more information.

@node compress, use-compress-program, gzip, Archive compression
@subsubsection Using @code{compress} compression

@quotation
@strong{Please note:} The algorithm used by the @code{compress} program
is covered by a patent.  You could be sued for patent infringment merely
for running @code{compress}.  Even if the current patent holder apparently
tolerates such infringements, the safest attitude for everybody is to just
avoid becoming dependent on this program.  So, we recommend that you stop
using it.
@end quotation

The @value{compress} option gets the archive to be filtered through
the @code{compress} program.  Otherwise, it pretty much behaves like
@value{gzip}.  @xref{gzip}.

The @code{compress} option is older than @code{gzip}, and is now
obsolescent.  However, there is still a lot of older @code{tar} files
which have been compressed by @code{compress} in their time, and because
of that, it is still useful to offer an option in @code{tar} to read
them easily.

@node use-compress-program, , compress, Archive compression
@subsubsection Using other compression programs

The @value{use-compress-program} option asks for the archive to be filtered
through @var{program}.  For example, option @value{gzip} is pretty
much like writing @kbd{--use=gzip}, and option @value{compress}
is like writing @kbd{--use=compress}.  With this option, you might use
any program of your choice, for doing either compression, encryption, or
cyclic redundancy check processing, say, provided that the said program
acts as a filter (that is, it reads its standard input and produces
results on its standard output) and that it accepts a @code{-d} option.
This option is used by @code{tar} when calling @var{program} in contexts
where decompression would normally be done (as when listing or extracting
the archive); it is not used in contexts where compression would normally
be done (as when creating the archive).

To combine many features at once, like compression and redundancy checking,
for example, one can provide a single shell script for @var{program}.
When the @code{-d} option is not given to the script, it compresses its
standard input, and pipes the result into a program computing and adding
redundancy at regular intervals.@footnote{It is so sad that @code{ecc} had
to be withdrawn because of a serious, unrepairable algorithmic flaw.}
If the @code{-d} option is given, the script does the reverse operation
(in reverse order as well), that is, it checks its standard input for
redundancy and possibly recovers lost data while removing the redundancy
information, piping the result into the appropriate decompression program.

@node Member compression, , Archive compression, Compression
@subsection Compressing individual members

There are pending suggestions for having a per-volume or per-file compression
in @code{tar}, and these suggestions will be addressed.  This will allow
for viewing the contents without decompression, and for resynchronizing
decompression at every volume or file, in case of corrupted archives.
Doing so, we might sacrifice maximum compression to some extent, but in case
of partial tape loss, recovery might become possible, which would be a great
advantage.

In the meantime, the only compressionlike technique available for
individual archive members is related to sparse file processing, which
only takes care of big strings of zero bytes in certain contexts, thus making
compression very slight in the average case.

@menu
* sparse::                      Archiving sparse files
@end menu

@node sparse, , Member compression, Member compression
@subsubsection Archiving sparse files
@cindex Sparse Files

Files in the filesystem occasionally have ``holes''.  A hole in a file
is a section of the file's contents which was never written.  The
contents of a hole read as all zeros.  On many operating systems,
actual disk storage is not allocated for holes, but they are counted
in the length of the file.  If you archive such a file, @code{tar}
could create an archive longer than the original.  To have @code{tar}
attempt to recognize the holes in a file, use @value{sparse}.  When
you use the @value{sparse} option, then, for any file using less
disk space than would be expected from its length, @code{tar} searches
the file for consecutive stretches of zeros.  It then records in the
archive for the file where the consecutive stretches of zeros are, and
only archives the ``real contents'' of the file.  On extraction (using
@value{sparse} is not needed on extraction) any such files have
holes created wherever the continuous stretches of zeros were found.
Thus, if you use @value{sparse}, @code{tar} archives won't take
more space than the original.

For example, the @value{sparse} option is useful when many @code{dbm}
files are being backed up.  Using this option dramatically decreases the
amount of space needed to store such a file.

@quotation
@strong{Please note:} Always use @value{sparse} when performing file
system backups, to avoid archiving the expanded forms of files stored
sparsely in the system.

Even if your system has no sparse files currently, some may be
created in the future.  If you use @value{sparse} while making file
system backups as a matter of course, you can be assured the archive
will never take more space on the media than the files take on disk
(otherwise, archiving a disk filled with sparse files might take
hundreds of tapes).  @xref{incremental listed-incremental}.
@end quotation

Programs like @code{dump} do not have to read the entire file; by examining
the file system directly, they can determine in advance exactly where the
holes are and thus avoid reading through them.  The only data they need read
are the actual allocated data blocks.  @code{tar} uses a more portable and
straightforward archiving approach; it would be fairly difficult for it
to do otherwise.  On 1990-12-10, Elizabeth Zwicky wrote@footnote{This quote
comes from a reply from Elizabeth, after someone @emph{falsely} attributed
to her the sentence: @cite{One has to be pretty intimate with the disk,
to know where the holes are @dots{}}} to @file{comp.unix.internals}:

@quotation
What I did say is that you cannot tell the difference between a
hole and an equivalent number of @code{NUL}s without reading raw blocks.
@code{st_blocks} at best tells you how many holes there are; it doesn't
tell you @emph{where}.  Just as programs may, conceivably, care what
@code{st_blocks} is (care to name one that does?), they may also care
where the holes are (I have no examples of this one either, but it's
equally imaginable).

I conclude from this that good archivers are not portable.  One can
arguably conclude that if you want a portable program, you can in good
conscience restore files with as many holes as possible, since you can't
get it right.
@end quotation

Users should be well aware that at archive creation time, @code{tar}
still has to read the whole disk file to locate the @dfn{holes}, and so,
even if sparse files use little space on disk and in the archive, they
may sometimes require an inordinate amount of time for reading and examining
all-zero blocks of a file.  Although it works, it's painfully slow for a
large (sparse) file, even though the resulting @code{tar} archive may be small.
(One user reports that dumping a @file{core} file of over 400 megabytes,
but with only about 3 megabytes of actual data, took about 9 minutes on a
Sun Sparstation ELC, with full CPU utilisation.)  This reading is required
in all cases, even if the @value{sparse} option is not used.@footnote{Well!
When @value{sparse} is selected while creating an archive, the current
@code{tar} algorithm requires sparse files to be read twice, not once.
We hope to develop a new archive format for saving sparse files in which
one pass will be sufficient.}

In some later @code{tar} version, the @value{sparse} option might be
removed as such, and the testing and treatment of sparse files may be done
automatically with any special option calling for @emph{any} extension.
The matter is not fully decided yet.

@node Other formats, , Compression, Formats
@section Other non-@code{tar} formats

@menu
* cpio::                        Comparison of @code{tar} and @code{cpio}
* zip::                         Comparison of @code{tar} and @code{zip}
@end menu

@node cpio, zip, Other formats, Other formats
@subsection Comparison of @code{tar} and @code{cpio}

The @code{cpio} archive formats, like @code{tar}, have maximum pathname
lengths.  The binary and old ASCII formats have a max path length of 256,
and the new ASCII and CRC ASCII formats have a max path length of 1024.
This @code{cpio} can read and write archives with arbitrary pathname
lengths, but other @code{cpio} implementations may crash unexplainedly
trying to read them.

@code{tar} handles symbolic links in the form in which it comes in BSD;
@code{cpio} doesn't handle symbolic links in the form in which it comes in
System V prior to SVR4, and some vendors may have added symlinks to their
system without enhancing @code{cpio} to know about them.  Others may have
enhanced it in a way other than the way we did it at Sun, and which was
adopted by AT&T (and which is, we think, also present in the @code{cpio}
that Berkeley picked up from AT&T and put into a later BSD release---we
think we gave them our changes).

(SVR4 does some funny stuff with @code{tar}; basically, its @code{cpio}
can handle @code{tar} format input, and write it on output, and it
probably handles symbolic links.  They may not have bothered doing
anything to enhance @code{tar} as a result.)

@code{cpio} handles special files; traditional @code{tar} doesn't.

@code{tar} comes with V7, System III, System V, and BSD source;
@code{cpio} comes only with System III, System V, and later BSD
(4.3-tahoe and later).

@code{tar}'s way of handling multiple hard links to a file can handle
file systems that support 32-bit inumbers (e.g., the BSD file system);
@code{cpio}'s way requires you to play some games (in its ``binary''
format, i-numbers are only 16 bits, and in its ``portable ASCII'' format,
they're 18 bits---it would have to play games with the ``file system ID''
field of the header to make sure that the file system ID/i-number pairs
of different files were always different), and we don't know which
@code{cpio}s, if any, play those games.  Those that don't might get
confused and think two files are the same file when they're not, and
make hard links between them.

@code{tar}'s way of handling multiple hard links to a file places only
one copy of the link on the tape, but the name attached to that copy
is the @emph{only} one you can use to retrieve the file; @code{cpio}'s
way puts one copy for every link, but you can retrieve it using any
of the names.

@quotation
What type of checksum (if any) is used, and how is this calculated?
@end quotation

See the attached manual pages for @code{tar} and @code{cpio} format.
@code{tar} uses a checksum which is the sum of all the bytes in the
@code{tar} header for a file; @code{cpio} uses no checksum.

@quotation
Does anyone know why @code{cpio} was made when @code{tar} was present
at the Unix scene?
@end quotation

It wasn't.  @code{cpio} first showed up in PWB/Unix 1.0; no
generally-available version of Unix had @code{tar} at the time.  We don't
know whether any version that was generally available @emph{within AT&T}
had @code{tar}, or, if so, whether the people within AT&T who did
@code{cpio} knew about it.

On restore, if there is a corruption on a tape, @code{tar} will stop at
that point, while @code{cpio} will skip over it and try to restore the
rest of the files.

The main difference is just in the command syntax and header format.

@code{tar} is a little more tape-oriented in that everything is blocked
to start on a record boundary.

@quotation
Are there any differences in the ability to recover crashed
archives between the two of them?  (Is there any chance of recovering
crashed archives at all?)
@end quotation

Theoretically, it should be easier under @code{tar} since the blocking
lets you find a header with some variation of @kbd{dd skip=@var{nn}}.
However, modern @code{cpio}'s and variations have an option to just
search for the next file header after an error with a reasonable chance
of re-syncing.  Note that lots of tape driver software won't allow you to
continue past a media error, which should be the only reason for getting
out of sync unless a file changed sizes while you were writing the
archive.

@quotation
If anyone knows why @code{cpio} was made when @code{tar} was present
at the Unix scene, please tell me about this too.
@end quotation

Probably because it is more media efficient (by not blocking everything
and using only the space needed for the headers where @code{tar}
always uses 512 bytes per file header) and it knows how to archive
special files.

You might want to look at the freely available alternatives.  The major
ones are @code{afio}, @code{tar}, and @code{pax}, each of which
have their own extensions with some backwards compatibility.

Sparse files were @code{tar}red as sparse files (which you can easily test,
because the resulting archive gets smaller, and @code{cpio} can no longer
read it).

@node zip, , cpio, Other formats
@subsection Comparison of @code{tar} and @code{zip}

On 1993-01-26, Jean-loup Gailly published on @file{bug-gnu-utils} a
useful comparison between the @code{tar} and @code{gzip} combination,
and @code{zip}.  Here are the points of his letter.

@itemize @bullet
@item
@kbd{tar -z} (that is, @code{tar} with @code{gzip}) compresses a tar file
into a single stream.  To extract one specific member (with @kbd{tar xfz
foo.tar.z member}), @code{gunzip} decompresses the whole @file{tar.z}
file and passes that to @code{tar}.  This method improves compression
since @code{gzip} can take advantage of redundancy between files.

@item
@code{zip} compresses file members independently.  @code{unzip} is then able
to seek directly to the proper location for extraction of a single member.
This method degrades compression but enables recovery in case of damage
to a portion of the @code{zip} file.  If a @file{tar.z} file is damaged,
all data after the error is lost.

@item
The current version of @code{zip} does not store UID and GID,
and compresses hard links several times.  @code{tar} works correctly.

@item
@code{unzip} has many tricks to convert file names from one system to
another, restore special file attributes (for VMS and OS/2), and so
forth @dots{}
@code{gzip} is only a data compression program, which should be kept simple.

@end itemize

Jean-loup adds that he is thinking of adding an optional block size parameter
to @code{gzip} to improve error recovery, and refers to the @file{TODO}
file in the @code{gzip} 0.8.1 distribution.

@node Media, Backups, Formats, Top
@chapter Tapes and other archive media
@cindex Format Parameters
@cindex Format Options
@cindex Options, archive format specifying
@cindex Options, format specifying

Archives are usually written on removable media---tape cartridges, mag
tapes, or floppy disks.

The amount of data a tape or disk can hold depends not only on its size,
but also on how it is formatted.  A 2400 foot long reel of mag tape holds
40 megabytes of data when formated at 1600 bits per inch.  The physically
smaller EXABYTE tape cartridge holds 2.3 gigabytes.

Magnetic media are re-usable---once the archive on a tape is no longer
needed, the archive can be erased and the tape or disk used over.
Media quality does deteriorate with use, however.  Most tapes or disks
should be discarded when they begin to produce data errors.

Magnetic media are written and erased using magnetic fields, and should
be protected from such fields to avoid damage to stored data.  Sticking a
floppy disk to a filing cabinet using a magnet is probably not a good idea.

Format related parameters specify how an archive is written on the archive
media.  The best choice of format parameters will vary depending on the
type and number of files being archived, and on the media used to store
the archive.

To specify format parameters when accessing or creating an archive,
you can use the options described in the following sections.  If you do
not specify any format parameters, @code{tar} uses default parameters.
You cannot modify a compressed archive.  If you create an archive with the
@value{blocking-factor} option specified (@pxref{blocking-factor}),
you should specify that blocking factor when operating on the archive.
@xref{Formats}, for other examples of format parameter considerations.

When you access a previously created @code{tar} archive using @code{tar},
you should specify certain format parameters.  These parameters were
specified when the archive was created, and @code{tar} is not always able
to determine some of the parameters for itself.  The safest procedure is to
specify them again in order for @code{tar} to properly read and/or modify
the contents of the archive.

@menu
* Blocking::                    Blocking
* Many on one::                 Many archives on one tape
* One on many::                 Using multiple tapes
* Being careful::               Being even more careful
* Other tape considerations::   Other tape considerations
@end menu

@node Blocking, Many on one, Media, Media
@section Blocking

@dfn{Block} and @dfn{record} terminology is rather confused, and it is
even confusing to the expert reader.  Currently, @code{tar} uses the
POSIX terminology, in which the terms are exchanged with regard to the
IBM terminology.  On 1995-06, John Gilmore (the writer of the original
program which evolved into this current @code{tar}) wrote:

@quotation
The nomenclature of tape drives comes from IBM, where we believe they were
invented for the IBM 650 or so.  On IBM mainframes, what is recorded on
tape are tape blocks.  The logical organization of data is into records.
There are various ways of putting records into blocks, including @code{F}
(fixed sized records), @code{V} (variable sized records), @code{FB} (fixed
blocked: fixed size records, @var{n} to a block), @code{VB} (variable size
records, @var{n} to a block), @code{VSB} (variable spanned blocked: variable
sized records that can occupy more than one block), etc.  The @code{JCL}
@kbd{DD RECFORM=} parameter specified this to the operating system.

The Unix man page on @code{tar} was totally confused about this.  When I
wrote @code{PD TAR}, I used the historically correct terminology (@code{tar}
writes data records, which are grouped into blocks).  It appears that
the bogus terminology made it into POSIX (no surprise here), and now
Fran@,{c}ois has migrated that terminology back into the source code too.
@end quotation

@menu
* Blocks and records::          Blocks and records
* blocking-factor::             Setting the blocking factor
* record-size::                 Setting a record size
* Media types::                 Per-Media blocking considerations
* Reblocking::                  Automatic reblocking
@end menu

@node Blocks and records, blocking-factor, Blocking, Blocking
@subsection Blocks and records

The term @dfn{physical block} means the basic transfer chunk from or to a
device, after which reading or writing may stop without anything being lost.
In this manual, the term @dfn{block} usually refers to a physical disk
block, @emph{assuming} that each disk block is 512 bytes in length.  It is
true that some disk devices have different physical blocks, but @code{tar}
ignores these differences in its own format, which is meant to be portable,
so a @code{tar} block is always 512 bytes in length, and @dfn{block}
always means a @code{tar} block.@footnote{The term @dfn{logical block}
often represents the basic chunk of allocation of many disk blocks as
a single entity, which the operating system treats somewhat atomically;
this concept is used seldom if at all in @code{tar}.}  The term @dfn{physical
record} is another way of speaking about a physical block, those two terms
are somewhat interchangeable.

Contrarily to disks, tapes start and stop often.  An @dfn{inter-record gap}
(IRG), or @dfn{gap} for short, is a small landing area on the tape with
no information on it, used for decelerating the tape to a full stop, and
for later regaining reading or writing speed.  When the tape driver
starts reading a record, the record has to be read in its entirety
without stopping,
as a gap is needed to stop the tape motion without losing information.
Many such gaps must be managed at regular intervals, so the tape soon
finds a place to stop when this is needed.  The recorded data is split into
chunks that we call physical tape blocks, each of which is sandwiched between
two successive gaps.  In POSIX @code{tar} terminology, each physical tape
block is called a @dfn{record}.  Although each record might have its own
length, it is customary to set some maximum length for all records on a
given tape.  @code{tar} archives may be put on disk or used with pipes,
instead of being written to tape.  Nevertheless, @code{tar} tries to read
and write the archive one record at a time, whatever the medium in use.

For @code{tar}, a record@footnote{The term @dfn{logical record} refers
to the logical organization of many characters into something meaningful
to the application.  The term @dfn{unit record} describes a small set
of characters which are transmitted whole to or by the application, and
often refers to a line of text.  Those two last terms are unrelated to
what we call a @dfn{record} in @code{tar}.} is made up of an integral
number of blocks, and this operation of putting many disk blocks into a
single record is called @dfn{blocking}.  @code{tar} blocks are all fixed
size (512 bytes), and its scheme for putting them into records is to put a
whole number of them (one or more) into each record.  In a single archive,
all @code{tar} records are the same size; at the end of the file there's
a block containing all zeros, which is how you tell that the remainder of
the last record(s) is (are) garbage.  The usual number of disk blocks
that go
into a single record is called the @dfn{blocking factor} for that tape.

Using higher blocking (putting more disk blocks per record) will use
the tape more efficiently, as there will be fewer gaps.  But reading
such tapes may be more difficult for the system, as more memory will be
required to receive the whole record at once.  Further, if there is a
reading error on a huge record, it is less likely that the system will
succeed in recovering the information.  So blocking should not be too low,
nor it should be too high.  @code{tar} uses by default a blocking of 20 for
historical reasons, and it does not really matter when reading or writing
to disk.  Current tape technology would easily accomodate higher blockings.

@node blocking-factor, record-size, Blocks and records, Blocking
@subsection Setting the blocking factor
@cindex Blocking Factor
@cindex Record Size
@cindex Number of blocks per record
@cindex Number of bytes per record
@cindex Bytes per record
@cindex Blocks per record

In a standard @code{tar} file (no options), the block size is 512 bytes
and the record size is 10240 bytes, for a blocking factor of 20.  In fact,
the default blocking factor is set when @code{tar} is compiled, and is
typically 20.  The output of @kbd{tar --help}, near the end, shows the
default blocking factor which was compiled in the @code{tar} version you
are using.  Archives with blocking factors larger than 20 cannot be read by
very old versions of @code{tar}, or by some newer versions of @code{tar}
running on old machines with small address spaces.  With this @code{tar},
the blocking factor of an archive is limited only by the maximum record
size of the device containing the archive, or by the amount of available
virtual memory.

What the @value{blocking-factor} option does is to set the blocking
factor, that is, to change the record size while leaving the block size
at 512 bytes.  A blocking factor of 20 was fine for ancient 800 or 1600
bpi reel-to-reel tape
drives; most tape drives these days prefer much bigger records in order to
stream and not waste tape.  When writing tapes, some tend to use a factor
of the order of 2048, say, giving a record size of around one megabyte.
This is acceptable nowadays, as the tape technology is now much more
dependable that it once was, and errors are much less likely to occur.

When reading an archive, @code{tar} can usually figure out the record
size itself.  To get it to do this, you can use @value{blocking-factor}
to specify a blocking factor larger than real one, and @code{tar} will
diagnose the observed record size as shorter than expected.  In this
indirect way, you can use @code{tar} to learn about the actual record size
of the first record on a tape!  The diagnostic is not produced when the
observed record size matches the expected size.

Further complicating the problem is that some tape drives ignore the
blocking entirely.  For these, @code{tar} cannot easily determine the real
block size.  In such cases, specifying a larger record size in @code{tar}
can still improve performance a tiny bit, yet most of the improvement has
already been provided by the tape system itself.

If you use a non-default blocking factor when you create an archive,
you must specify the same blocking factor when you modify that archive.
Some archive devices will also require you to specify the blocking factor
when reading that archive; however, this is not typically the case.  Usually,
you can use @value{list} without specifying a blocking factor---@code{tar}
reports a non-default record size and then lists the archive members as
it would normally.  To extract files from an archive with a non-standard
blocking factor (particularly if you're not sure what the blocking factor
is), you can usually use the @value{read-full-records} option while
specifying a blocking factor larger then the blocking factor of the archive
(for example, @kbd{tar --extract --read-full-records --blocking-factor=300}).
@xref{list}, for more information on the @value{list} subcommand.
@xref{Reading}, for a more detailed explanation of that option.

If the archive is in a disk file or a pipe, some might sometimes want to
specify a smaller blocking factor, since a large one will result in more
@code{NUL} bytes at the end of the archive, but it might not be worth it.
Beware that for the @code{tar} blocking to be effective, @code{tar}
should directly write to the device.  Blocking is effectively defeated or
overridden when a pipe interposes another step between @code{tar} and the
device (like a call to @code{dd}, for instance).

@node record-size, Media types, blocking-factor, Blocking
@subsection Setting a record size

The @value{record-size} option instructs @code{tar} to use @var{size}
bytes per record when accessing the archive.  The value of @var{size}
should be evenly divisible by 512.  This option is an alternative to using
@value{blocking-factor}, except that the unit for @value{record-size}
is a single byte, while the unit for @value{blocking-factor} is a whole
@code{tar} block.  @xref{blocking-factor}.

@node Media types, Reblocking, record-size, Blocking
@subsection Per-Media blocking considerations

When handling various tapes or cartridges, you have to take care of selecting
a proper blocking, that is, the number of disk blocks you put together as
a single record on the tape, without intervening tape gaps.  Strangely,
on more than a few systems, the mere fact of not using an adequate blocking
factor yields rather unexpected or cryptic diagnostics, like:

@smallexample
Cannot write to /dev/dlt: Invalid argument
@end smallexample

@noindent
So, one might have to pay attention to the requirements of device drivers.
To make things a bit confusing, it also happens that the @code{tar} bundled
by the system is aware of record size idiosyncrasies, while @code{tar}
requires an explicit specification for the record size, which it cannot
guess.  This yields some people to believe that @code{tar} is misbehaving,
because by comparison, @cite{the bundled @code{tar} works OK}.  Merely using
something like @w{@kbd{-b 256}}, say, might resolve the problem.

@cindex Exabyte blocking
@cindex DAT blocking
@code{tar} uses a blocking factor of 20 by default for historical reasons, and
it does not really matter when reading or writing to disk.  Current tape
technology would easily accomodate higher blockings.  Sun recommends a
blocking of 126 for Exabytes and 96 for DATs.  Another source said that
Exabyte drives have a physical block size of 8KB, and that using @w{@kbd{-b
112}} solved their problems.  We were told that for some DLT drives,
the blocking should be a multiple of 4KB, preferably 64KB (@w{@kbd{-b
128}} or @kbd{256}), for decent performance.  Other manufacturers may use
different recommendations for the same tapes.  This might also depend of
the buffering techniques used by modern tape controllers.  Some impose
a minimum blocking, or a maximum blocking.  Others request blocking to be
some power of two.

So there is no fixed rule for blocking.  But blocking at read time should
ideally be the same as blocking used at write time.  At one place we know,
with a wide variety of equipment, they found it best to use a blocking
of 32 to guarantee that their tapes are fully interchangeable between all
systems they have.

We were also told that, for recycled tapes, prior erasure (by the exact
drive unit that will be used to create the archives) sometimes lowers the
error rates observed at rewriting time.

@node Reblocking, , Media types, Blocking
@subsection Automatic reblocking

When handling compressed archives, @code{tar} automatically unblocks the
archives before decompression occurs, or reblocks created archives just
after compression, as needed.@footnote{Prior to @code{tar} 1.12, unblocking
or reblocking did not occur unless the @kbd{--compress-block} option (or even
older: @kbd{--block-compress}) was given.  Such options are now obsolete.}

When older @code{gzip} programs are directly given such reblocked compressed
archives, they may complain like this:

@smallexample
$ @kbd{tar cfz - FILE | gzip -t}
gzip: stdin: decompression OK, trailing garbage ignored
@end smallexample

@noindent
Because of the reblocking, there may be extraneous zero blocks after the
@code{gzip} output, which older versions of @code{gzip} diagnose as garbage.
Jean-loup and I agreed, to handle this particular case, that newer versions
of @code{gzip} would be more tolerant to strings of zeros, and just ignore
them.  So, diagnostics like above will progressively disappear, as various
older @code{gzip} binaries get replaced.  In any case, they are innocuous.

As a special case, if a compressed archive is directly created on a local
disk, and not through stdout, and if the blocking factor is not explicitly
specified by the user, then the produced file will not be reblocked, and
so, might appear as if the last record has not been padded to full length.
In all other cases, reblocking occurs.

@node Many on one, One on many, Blocking, Media
@section Many archives on one tape

@findex ntape @r{device}
Most tape devices have two entries in the @file{/dev} directory, or
entries that come in pairs, which differ only in the minor number for
this device.  Let's take for example @file{/dev/tape}, which often
points to the only or usual tape device of a given system.  There might
be a corresponding @file{/dev/nrtape} or @file{/dev/ntape}.  The simpler
name is the @emph{rewinding} version of the device, while the name
having @samp{nr} in it is the @emph{no rewinding} version of the same
device.

A rewinding tape device will bring the tape back to its beginning point
automatically when this device is opened or closed.  Since @code{tar}
opens the archive file before using it and closes it afterwards, this
means that a simple

@smallexample
$ @kbd{tar cf /dev/tape @var{directory}}
@end smallexample

@noindent
will reposition the tape to its beginning both before and after saving the
@var{directory} contents to it, thus erasing the prior tape contents and
making it so that any subsequent write subcommand will destroy what has
just been saved.

@cindex tape positioning
So, a rewinding device is normally meant to hold one and only one file.
If you want to put more than one @code{tar} archive on a given tape, you will
need to avoid using the rewinding version of the tape device.  You will also
have to pay special attention to tape positioning.  Errors in positioning
may overwrite the valuable data already on your tape.  Many people, burned
by past experiences, will only use rewinding devices and limit themselves
to one file per tape, precisely to avoid the risk of such errors.  Be fully
aware that writing at the wrong position on a tape loses all information
past this point and most probably until the end of the tape, and this
destroyed information @emph{cannot} be easily recovered, if indeed it
can ever be recovered at all.

To save @var{directory-1} as a first archive at the beginning of a
tape, and leave that tape ready for a second archive, you should use the
@emph{non-rewinding} tape device:

@smallexample
$ @kbd{mt -f /dev/nrtape rewind}
$ @kbd{tar cf /dev/nrtape @var{directory-1}}
@end smallexample

@cindex tape marks
@dfn{Tape marks} are special magnetic patterns written on the tape media,
which are later recognizable by the reading hardware.  Tape marks consume
a @emph{lot} more space on the tape than a usual gap, and the tape drive
hardware is often able to detect them even while winding the tape at
higher speed.

These marks are used after each file, when there are many on a single tape.
An empty file (that is to say, two tape marks in a row) signals the logical
end of the tape, after which no files exist.  Clever non-rewinding tape
device drivers react to the close request issued by @code{tar} by first
writing two tape marks after your archive, and by backspacing over one
of these.  So, if you remove the tape at that time from the tape drive,
it is properly terminated.  But if you write another file at the current
position, the second tape mark gets erased by the new information, leaving
only one tape mark between files.

So, you may now save @var{directory-2} as a second archive after the
first on the same non-rewinding tape by issuing the command:

@smallexample
$ @kbd{tar cf /dev/nrtape @var{directory-2}}
@end smallexample

@noindent
and so on for all the archives you want to put on the same tape.

Another usual case is that you do not write all the archives the same
day, and you need to remove and store the tape between two archive
sessions.  In general, you must remember how many files are already
saved on your tape.  Suppose your tape already has 16 files on it, and
you are ready to write the 17th.  You have to take care to skip
the first 16 tape marks before saving @var{directory-17}, say, by using
these commands:

@smallexample
$ @kbd{mt -f /dev/nrtape rewind}
$ @kbd{mt -f /dev/nrtape fsf 16}
$ @kbd{tar cf /dev/nrtape @var{directory-17}}
@end smallexample

In all the previous examples, we put aside blocking considerations, but
you should do the proper things for that as well.  @xref{Blocking}.

@menu
* Tape positioning::            Tape positions and tape marks
* mt invocation::               The @code{mt} utility
@end menu

@node Tape positioning, mt invocation, Many on one, Many on one
@subsection Tape positions and tape marks

Just as archives can store more than one file from the file system,
tapes can store more than one archive file.  To keep track of where
archive files (or any other type of file stored on tape) begin and
end, tape archive devices write magnetic @dfn{tape marks} on the
archive media.  Tape drives write one tape mark between files,
two at the end of all the file entries.

If you think of data as a series of records ``RRRR'', and tape marks as
``*'', a tape might look like the following:

@example
RRRR*RRRRRR*RRRRR*RR*RRRRR**-------------------------
@end example

Tape devices read and write tapes using a read/write @dfn{tape head}---a
physical part of the device which can only access one point on the tape
at a time.  When you use @code{tar} to read or write archive data from
a tape device, the device will begin reading or writing from wherever
on the tape the tape head happens to be, regardless of which archive
or what part of the archive the tape head is on.  Before writing an
archive, you should make sure that no data on the tape will be overwritten
(unless it is no longer needed).  Before reading an archive, you should
make sure the tape head is at the beginning of the archive you want to
read.  (The @code{restore} script will find the archive automatically.
@FIXME{There is no such restore script!} @xref{Scripted restoration}.)
@xref{mt invocation}, for an explanation of the tape moving utility.

If you want to add new archive file entries to a tape, you should advance
the tape to the end of the existing file entries, backspace over the last
tape mark, and write the new archive file.  If you were to add two archives
to the example above, the tape might look like the following:

@example
RRRR*RRRRRR*RRRRR*RR*RRRRR*RRR*RRRR**----------------
@end example

@node mt invocation, , Tape positioning, Many on one
@subsection The @code{mt} utility

@FIXME{Is it true that this only works on non-block devices?
should explain the difference, (fixed or variable).}
@xref{blocking-factor}.

You can use the @code{mt} utility to advance or rewind a tape past a
specified number of archive files on the tape.  This will allow you
to move to the beginning of an archive before extracting or reading
it, or to the end of all the archives before writing a new one.
@FIXME{Why isn't there an ``advance until you find two tape marks
together''?}

The syntax of the @code{mt} command is:

@smallexample
$ @kbd{mt [-f @var{tapename}] @var{operation} [@var{number}]}
@end smallexample

where @var{tapename} is the name of the tape device, @var{number} is
the number of times a subcommand is performed (with a default of one),
and @var{operation} is one of the following:

@FIXME{Is there any use for record subcommands?}

@table @kbd
@item eof
@itemx weof
Writes @var{number} tape marks at the current position on the tape.

@item fsf
Moves tape position forward @var{number} files.

@item bsf
Moves tape position back @var{number} files.

@item rewind
Rewinds the tape.  (Ignores @var{number}).

@item offline
@itemx rewoff1
Rewinds the tape and takes the tape device off-line. (Ignores @var{number}).

@item status
Prints status information about the tape unit.

@end table

If you don't specify a @var{tapename}, @code{mt} uses the environment
variable @code{TAPE}; if @code{TAPE} is not defined, @code{mt} uses the
device @file{/dev/rmt12}.

@code{mt} returns a 0 exit status when the operation(s) were successful,
1 if the command was unrecognized, and 2 if a subcommand failed.

If you use @value{extract} with the @value{label} option specified,
@code{tar} will read an archive label (the tape head has to be
positioned on it) and print an error if the archive label doesn't
match the @var{archive-name} specified.  @var{archive-name} can be any
regular expression.  If the labels match, @code{tar} extracts the archive.
@xref{label}, @FIXME{pxref Matching Format Parameters}.  @kbd{tar --list
--label} will cause @code{tar} to print the label.

@FIXME{Program to list all the labels on a tape?}

@node One on many, Being careful, Many on one, Media
@section Using multiple tapes

Often you might want to write a large archive, one larger than will fit
on the actual tape you are using.  In such a case, you can run multiple
@code{tar} commands, but this can be inconvenient, particularly if you
are using options like @value{exclude} or dumping entire filesystems.
Therefore, @code{tar} supports multiple tapes automatically.

Use @value{multi-volume} on the command line, and then @code{tar} will,
when it reaches the end of the tape, prompt for another tape, and
continue the archive.  Each tape will have an independent archive, and
can be read without needing the other.  (As an exception to this, the
file that @code{tar} was archiving when it ran out of tape will usually
be split between the two archives; in this case you need to extract from
the first archive, using @value{multi-volume}, and then put in the
second tape when prompted, so @code{tar} can restore both halves of the
file.)

@code{tar} multi-volume archives do not use a truly portable format.
You need @code{tar} at both ends to process them properly.

When prompting for a new tape, @code{tar} accepts any of the following
responses:

@table @kbd
@item ?
Request @code{tar} to explain possible responses.
@item q
Request @code{tar} to exit immediately.
@item n @var{filename}
Request @code{tar} to write the next volume on the file @var{filename}.
@item !
Request @code{tar} to run a subshell.
@item y
Request @code{tar} to begin writing the next volume.
@end table

(You should type @kbd{y} only @strong{after} you have changed the tape;
otherwise @code{tar} will write over the volume it just finished.)

If you want more elaborate behavior than this, give @code{tar} the
@value{info-script} option.  The file @var{script-name} is expected
to be a program (or shell script) to be run instead of the normal
prompting procedure.  When the program finishes, @code{tar} will
immediately begin writing the next volume.  The behavior of the
@kbd{n} response to the normal tape-change prompt is not available
if you use @value{info-script}.

The method @code{tar} uses to detect end of tape is not perfect, and
fails on some operating systems or on some devices.  You can use the
@value{tape-length} option if @code{tar} can't detect the end of the
tape itself.  This option selects @value{multi-volume} automatically.
The @var{size} argument should then be the usable size of the tape.
But for many devices, and floppy disks in particular, this option is
never actually required, as far as we know.

If you want @code{tar} to cycle through a series of tape drives, then
you can use the @kbd{n} response to the tape-change prompt.  This is
error prone, however, and doesn't work at all with @value{info-script}.
Therefore, if you give @code{tar} multiple @value{file} options, then
the specified files will be used, in sequence, as the successive volumes
of the archive.  Only when the first one in the sequence needs to be
used again will @code{tar} prompt for a tape change (or run the info
script).

Multi-volume archives

With @value{multi-volume}, @code{tar} will not abort when it cannot
read or write any more data.  Instead, it will ask you to prepare a new
volume.  If the archive is on a magnetic tape, you should change tapes
now; if the archive is on a floppy disk, you should change disks, and so
forth.

Each volume of a multi-volume archive is an independent @code{tar}
archive, complete in itself.  For example, you can list or extract any
volume alone; just don't specify @value{multi-volume}.  However, if one
file in the archive is split across volumes, the only way to extract
it successfully is with a multi-volume extract command @kbd{--extract
--multi-volume} (@kbd{-xM}) starting on or before the volume where
the file begins.

For example, let's presume someone has two tape drives on a system,
named @file{/dev/tape0} and @file{/dev/tape1}.  To have
@code{tar} switch to the second drive when it needs to write the
second tape, and then back to the first tape, and so forth, just do either of:

@smallexample
$ @kbd{tar --create --multi-volume --file=/dev/tape0 --file=/dev/tape1 @var{files}}
$ @kbd{tar cMff /dev/tape0 /dev/tape1 @var{files}}
@end smallexample

@menu
* Multi-volume archives::       Archives longer than one tape or disk
* multi-volume::                Using multi-volume mode
* tape-length::                 Announcing the tape length
* info-script::                 Taking actions at volume switching
* volno-file::                  Changing the volume number in prompts
@end menu

@node Multi-volume archives, multi-volume, One on many, One on many
@subsection Archives longer than one tape or disk
@cindex Multi-volume archives

To create an archive that is larger than will fit on a single unit of
the media, use the @value{multi-volume} option in conjunction with
the @value{create} option (@pxref{create}).  A
@dfn{multi-volume} archive can be manipulated like any other archive
(provided the @value{multi-volume} option is specified), but is
stored on more than one tape or disk.

When you specify @value{multi-volume}, @code{tar} does not report an
error when it comes to the end of an archive volume (when reading) or
the end of the media (when writing).  Instead, it prompts you to load
a new storage volume.  If the archive is on a magnetic tape, you
should change tapes when you see the prompt; if the archive is on a
floppy disk, you should change disks; and so forth.

You can read each individual volume of a multi-volume archive as if it
were an archive by itself.  For example, to list the contents of one
volume, use @value{list}, without @value{multi-volume} specified.
To extract an archive member from one volume (assuming it is on
that volume), use @value{extract}, again without
@value{multi-volume}.

If an archive member is split across volumes (that is, its entry begins on
one volume of the media and ends on another), you need to specify
@value{multi-volume} to extract it successfully.  In this case, you
should load the volume where the archive member starts, and use
@kbd{tar --extract --multi-volume}---@code{tar} will prompt for later
volumes as it needs them.  @xref{Extracting archives}, for more
information about extracting archives.

@value{info-script} is like @value{multi-volume}, except that
@code{tar} does not prompt you directly to change media volumes when
a volume is full---instead, @code{tar} runs commands you have stored
in @var{script-name}.  For example, this option can be used to eject
cassettes, or to broadcast messages such as @samp{Someone please come
change my tape} when performing unattended backups.  When @var{script-name}
is done, @code{tar} will assume that the media has been changed.

Multi-volume archives can be modified like any other archive.  To add
files to a multi-volume archive, you need to only mount the last
volume of the archive media (and new volumes, if needed).  For all
other subcommands that modify the archive, you need to use the entire archive.

If a multi-volume archive was labeled using @value{label}
(@pxref{label}) when it was created, @code{tar} will not
automatically label volumes which are added later.  To label subsequent
volumes, specify @value{label} again in conjunction with the
@value{append}, @value{update} or @value{concatenate} subcommand.

@cindex Labelling multi-volume archives

@FIXME{There should be a sample program here, including an exit
before end.  Is the exit status even checked in tar?}

@node multi-volume, tape-length, Multi-volume archives, One on many
@subsection Using multi-volume mode

When the @value{multi-volume} option is given, @code{tar} creates a
multi-volume archive, when used in conjunction with @value{create}.
To perform any other subcommand on a multi-volume archive, specify
@value{multi-volume} in conjunction with that subcommand.  It creates,
lists, or extracts a multi-volume archive.

This option causes @code{tar} to write a @dfn{multi-volume} archive---one
that may be larger than will fit on the medium used to hold it.
@xref{Multi-volume archives}.

Beware that there is @emph{no} real standard about the proper way for a
@code{tar} archive to span volume boundaries.  If you have a multi-volume
created by some vendor's @code{tar}, there is almost no chance you could
read all the volumes with @code{tar}.  The converse is also true:
you should not expect multi-volume archives created by @code{tar} to
be fully recovered by any vendor's @code{tar}.  Since there is little chance
that, in mixed system configurations, some vendor's @code{tar} will work on
another vendor's machine, and there is a great chance that @code{tar}
will work on most of them, your best bet is to install @code{tar}
on all machines between which you know exchange of files is possible.

@node tape-length, info-script, multi-volume, One on many
@subsection Announcing the tape length

Option @value{tape-length} has the effect of forcing a change of the
tape after writing @var{num} x 1024 bytes.

This option might be useful when your tape drivers do not properly
detect the end of physical tapes.  By being slightly conservative on the
maximum tape length, you might avoid the problem entirely.

@node info-script, volno-file, tape-length, One on many
@subsection Taking actions at volume switching

The @value{info-script} option indicates the name of a program, or shell
script, meant to help create a multi-volume archive via a script.  Used in
conjunction with @value{create}.  It gets @file{file} executed at end of
each tape.  This implies @value{multi-volume}.

This script should exit with zero status if @code{tar} is to continue the
archiving operation.  @code{tar} interprets a non-zero exit (or any other
kind of error) as a request to abort processing right away.  For example,
this could ease the termination of @code{tar} when the script determines
it runs out of tapes, or in other situations of unattented environments.

@node volno-file, , info-script, One on many
@subsection Changing the volume number in prompts

The volume number used by @code{tar} in its tape-change prompt
can be changed; if you give the @value{volno-file} option, then
@var{file-of-number} should be a nonexistent file to be created, or
a file already containing a decimal number.  That number will be used
as the volume number of the first volume written.  When @code{tar} is
finished, it will rewrite the file with the now-current volume number.
(This does not change the volume number written on a tape label, as
per @ref{label}; it @emph{only} affects the number used in
the prompt.)

@node Being careful, Other tape considerations, One on many, Media
@section Being even more careful

@menu
* label::                       Including labels in the archive
* verify::                      Verifying data as it is stored
* Write protection::            Write protection
@end menu

@node label, verify, Being careful, Being careful
@subsection Including labels in the archive
@cindex Labeling an archive
@cindex Labels on the archive media

To give the archive a name which will be recorded in it, use the
@value{label} option.  This will write a special block identifying
@var{volume-label} as the name of the archive to the front of the archive,
which will be displayed when the archive is listed with @value{list}.
If you are creating a multi-volume archive with @value{multi-volume}
(@pxref{One on many}), then the volume label will have @samp{Volume
@var{nnn}} appended to the name you give, where @var{nnn} is the number
of the volume of the archive.  If you use the @value{label} option when
reading an archive, it checks to make sure the label on the tape matches
the one you give.  @xref{label}.

When @code{tar} writes an archive to tape, it creates a single tape file.
If multiple archives are written to the same tape, one after the other, they
each get written as separate tape files.  When extracting, it is necessary
to position the tape at the right place before running @code{tar}.  To do
this, use the @code{mt} command.  For more information on the @code{mt}
command and on the organization of tapes into a sequence of tape files,
see @ref{mt invocation}.

People often seem to do:

@smallexample
$ @kbd{tar --label="@var{some-prefix} `date +@var{some-format}`"}
@end smallexample

@noindent
or such, to put a common date on all volumes or an archive set.

The @value{label} option creates an archive with volume name @var{name}.

This option causes @code{tar} to write out a @dfn{volume header} at
the beginning of the archive.  If @value{multi-volume} is used, each
volume of the archive will have a volume header of @samp{@var{name}
Volume @var{n}}, where @var{n} is 1 for the first volume, 2 for the
next, and so on.

@FIXME{Should the arg to --label be a quoted string??  No.}

To avoid problems caused by misplaced paper labels on the archive media,
you can include a @dfn{label} entry---an archive member which contains
the name of the archive---in the archive itself.  Use the @value{label}
option in conjunction with the @value{create} subcommand to include a
label entry in the archive as it is being created.

If you create an archive using both @value{label} and @value{multi-volume},
each volume of the archive will have an archive label of the form
@samp{@var{archive-label} Volume @var{n}}, where @var{n} is 1 for the
first volume, 2 for the next, and so on.  @xref{Multi-volume archives},
for information on creating multiple volume archives.

If you list or extract an archive using @value{label}, @code{tar} will
print an error if the archive label doesn't match the @var{archive-label}
specified, and will then not list nor extract the archive.  In those cases,
the @var{archive-label} argument is interpreted as a globbing-style pattern
which must match the actual magnetic volume label.  @xref{Wildcards}, for
a precise description of how the match is attempted.@footnote{Previous versions
of @code{tar} used full regular expression matching, or before that, only
exact string matching, instead of wildcard matching.  We decided for the
sake of simplicity to use a uniform matching device throughout @code{tar}.}
If the switch @value{multi-volume} is being used, the volume label
matcher will also suffix @var{archive-label} by @w{@samp{ Volume [1-9]*}}
if the initial match fails, before giving up.  Since the volume numbering
is automatically added in labels at creation time, it sounded logical to
help the user take care of it when the archive is being read as well.

The @value{label} option was once called @w{@kbd{--volume}}, but is not available
under that name anymore.

To find out an archive's label entry (or to find out if an archive has
a label at all), use @kbd{tar --list --verbose}.  @code{tar} will print the
label first, and then print archive member information, as in the
example below:

@smallexample
$ @kbd{tar --verbose --list --file=iamanarchive}
V--------- 0 0 0 1992-03-07 12:01 iamalabel--Volume Header--
-rw-rw-rw- myself users 40 1990-05-21 13:30 iamafilename
@end smallexample

The @value{label} option includes an @dfn{archive-label} at the
beginning of the archive when the archive is being created, when used in
conjunction with the @value{create} option.  Check to make sure the
archive label matches the one specified (when used in conjunction with
the @value{extract} option).

To get a common label on all tapes of a series, use the
@value{label} option.  To ensure that this label is different in each
series created through a single script used on a regular basis, just
manage to get a date string as part of the label.  For example:

@smallexample
$ @kbd{tar cfMV /dev/tape "Daily backup for `date +%Y-%m-%d`"}
$ @kbd{tar --create --file=/dev/tape --multi-volume \
     --label="Daily backup for `date +%Y-%m-%d`"}
@end smallexample

Also note that each label has its own date and time, which corresponds
to when @code{tar} initially attempted to write it, often soon
after the operator launches @code{tar} or types the carriage return
telling that the next tape is ready.  Comparing date labels gives
an idea of tape throughput only if the delays for rewinding tapes
and the operator switching them were negligible, which is usually
not the case.

@FIXME{was --volume}

@node verify, Write protection, label, Being careful
@subsection Verifying data as it is stored
@cindex Verifying a write operation
@cindex Double-checking a write operation

Option @value{verify} attempts to verify the archive after writing.

This option causes @code{tar} to verify the archive after writing it.
Each volume is checked after it is written, and any discrepancies
are recorded on the standard error output.

Verification requires that the archive be on a backspaceable medium.
This means that pipes, some cartridge tape drives, and some other devices
cannot be verified.

You can ensure the accuracy of an archive by comparing files in the
filesystem with archive members.  @code{tar} can compare an archive to the
filesystem as the archive is being written, to verify a write
operation, or can compare a previously written archive, to ensure that
it is up to date.

To check for discrepancies in an archive immediately after it is
written, use the @value{verify} option in conjunction with
the @value{create} subcommand.  When this option is
specified, @code{tar} checks archive members against their counterparts
in the file system, and reports discrepancies on the standard error.  In
multi-volume archives, each volume is verified after it is written,
before the next volume is written.

To verify an archive, you must be able to read it from before the end
of the last written entry.  This option is useful for detecting data
errors on some tapes.  Archives written to pipes, some cartridge tape
drives, and some other devices cannot be verified.

One can explicitly compare an already made archive with the file system
by using the @value{compare} option, instead of using the more automatic
@value{verify} option.  @xref{compare}.

Note that these two options have a slightly different intent.  The
@value{compare} option checks how similar are the logical contents of some
archive to what is on your disks, while the @value{verify} option is
really for checking if the physical contents agree and if the recording
media itself is of dependable quality.  So, for the @value{verify}
option, @code{tar} tries to defeat all in-memory cache pertaining to
the archive, while it leaves the speed optimization undisturbed for the
@value{compare} option.  If you nevertheless use @value{compare} for
media verification, you may have to defeat the in-memory cache yourself,
maybe by opening and reclosing the door latch of your recording unit,
forcing some doubt in your operating system about the fact this is really
the same volume as the one just written or read.

The @value{verify} option would not be necessary if drivers were indeed
able to detect dependably all write failures.  This sometimes requires many
magnetic heads, some able to read after the writes occurred.  One would
not say that drivers unable to detect all cases are necessarily flawed,
as far as programming is concerned.

@node Write protection, , verify, Being careful
@subsection Write protection

Almost all tapes and diskettes, and in a few rare cases even disks, can
be @dfn{write protected}, to protect data on them from being changed.
Once an archive is written, you should write protect the media to prevent
the archive from being accidently overwritten or deleted.  (This will
protect the archive from being changed with a tape or floppy drive---it
will not protect it from magnetic fields or other physical hazards).

The write protection device itself is usually an integral part of the
physical media, and can be a two position (write enabled/write
disabled) switch, a notch which can be popped out or covered, a ring
which can be removed from the center of a tape reel, or some other
changeable feature.

@node Other tape considerations, , Being careful, Media
@section Other tape considerations

@cindex Ultrix 3.1 and write failure
Some versions of Unix (Ultrix 3.1 is known to have this problem),
can claim that a short write near the end of a tape succeeded,
when it actually failed.  This will result in the -M option not
working correctly.  The best workaround at the moment is to use a
significantly larger blocking factor than the default 20.

In order to update an archive, @code{tar} must be able to backspace the
archive in order to reread or rewrite a record that was just read (or
written).  This is currently possible only on two kinds of files: normal
disk files (or any other file that can be backspaced with @code{lseek}),
and industry-standard 9-track magnetic tape (or any other kind of tape
that can be backspaced with the @code{MTIOCTOP} @code{ioctl}).

This means that the @value{append}, @value{update},
@value{concatenate}, and @value{delete} commands will not work on any
other kind of file.  Some media simply cannot be backspaced, which
means that these commands and options will never be able to work on them.
These non-backspacing media include pipes and cartridge tape drives.

Some other media can be backspaced, and @code{tar} will work on them
once @code{tar} is modified to do so.

Archives created with the @value{multi-volume}, @value{label}, and
@value{incremental} options may not be readable by other versions
of @code{tar}.  In particular, restoring a file that was split over
a volume boundary will require some careful work with @code{dd}, if
it can be done at all.  Other versions of @code{tar} may also create
an empty file whose name is that of the volume header.  Some versions
of @code{tar} may create normal files instead of directories archived
with the @value{incremental} option.

@ifclear PUBLISH

@format
errors from system:
permission denied
no such file or directory
not owner

errors from @code{tar}:
directory checksum error
header format error

errors from media/system:
i/o error
device busy
@end format

@end ifclear

@node Backups, All options, Media, Top
@chapter Performing backups and restoring files

@code{tar} is distributed along with the scripts which the Free
Software Foundation uses for performing backups.  There are no corresponding
scripts available yet for doing restoration of files.  Even though there is
a good chance those scripts may be satisfactory to you, they are not the
only scripts or methods available for doing backups and restores.  You may
well create your own, or use more sophisticated packages dedicated to
that purpose.

Some users are enthusiastic about @code{Amanda} (The Advanced Maryland
Automatic Network Disk Archiver), a backup system developed by James da
Silva (@email{jds@@cs.umd.edu}) and available on many Unix systems.  This is
free software, and it is available at these places:

@example
http://www.cs.umd.edu/projects/amanda/amanda.html
ftp://ftp.cs.umd.edu/pub/amanda
@end example

@ifclear PUBLISH

Here is a possible plan for a future documentation about the backup
scripts which are provided within the @code{tar} distribution.

@format
.* dumps
. + what are dumps

. + different levels of dumps
.  - full dump = dump everything
.  - level 1, level 2 dumps etc, -
	A level n dump dumps everything changed since the last level
	n-1 dump (?)

. + how to use scripts for dumps  (ie, the concept)
.  - scripts to run after editing backup specs (details)

. + Backup Specs, what is it.
.  - how to customize
.  - actual text of script  [/sp/dump/backup-specs]

. + Problems
.  - rsh doesn't work
.  - rtape isn't installed
.  - (others?)

. + the --incremental option of tar

. + tapes
.  - write protection
.  - types of media
.   : different sizes and types, useful for different things
.  - files and tape marks
     one tape mark between files, two at end.
.  - positioning the tape
     MT writes two at end of write,
       backspaces over one when writing again.
@end format

@end ifclear

This chapter documents both the provided FSF scripts and the @code{tar}
options which are more specific to use as a backup tool.

To @dfn{back up} a file system means to create archives that contain
all the files in that file system.  Those archives can then be used to
restore any or all of those files (for instance if a disk crashes or a
file is accidently deleted).  File system @dfn{backups} are also
called @dfn{dumps}.

@menu
* incremental listed-incremental::  The incremental options
* Backup levels::               Levels of backups
* Backup parameters::           Setting parameters for backups and restoration
* Scripted backups::            Using the backup scripts
* Scripted restoration::        Using the restore script
@end menu

@node incremental listed-incremental, Backup levels, Backups, Backups
@section The incremental options

@menu
* incremental::                 Backing up without a snapshot list
* listed-incremental::          Backing up with a snapshot list
@end menu

@node incremental, listed-incremental, incremental listed-incremental, incremental listed-incremental
@subsection Backing up without a snapshot list

@value{incremental} is used in conjunction with @value{create},
@value{extract}, or @value{list} when backing up and restoring file
systems.  An archive cannot be extracted or listed with the
@value{incremental} option specified unless it was created with this
option specified.  This option should only be used by a script, not by
the user, and is usually disregarded in favor of
@value{listed-incremental}, which is described below.

@value{incremental} in conjunction with @value{create} causes
@code{tar} to write, at the beginning of the archive, an entry for
each of the directories that will be archived.  The entry for a
directory includes a list of all the files in the directory at the
time the archive was created and a flag for each file indicating
whether or not the file is going to be put in the archive.

Note that this option causes @code{tar} to create a non-standard
archive that may not be readable by other versions of the @code{tar}
program.

@value{incremental} in conjunction with @value{extract} causes
@code{tar} to read the lists of directory contents previously stored
in the archive, @emph{delete} files in the file system that did @emph{not}
exist in their directories when the archive was created, and then
extract the files in the archive.

This behavior is convenient when restoring a damaged file system from
a succession of incremental backups: it restores the entire state of
the file system to that which obtained when the backup was made.  If
@value{incremental} isn't specified, the file system will probably
fill up with files that shouldn't exist any more.

@value{incremental} in conjunction with @value{list} causes
@code{tar} to print, for each directory in the archive, the list of
files in that directory at the time the archive was created.  This
information is put out in a format that is not easy for humans to
read, but which is unambiguous for a program: each file name is
preceded by either a @samp{Y} if the file is present in the archive,
an @samp{N} if the file is not included in the archive, or a @samp{D}
if the file is a directory (and is included in the archive).  Each
file name is terminated by a null character.  The last file is followed
by an additional null and a newline to indicate the end of the data.

@node listed-incremental, , incremental, incremental listed-incremental
@subsection Backing up with a snapshot list

@value{listed-incremental} acts like @value{incremental}, but when used in
conjunction with @value{create} will also cause @code{tar} to use the file
@var{snapshot-file}, which contains information about the state of the file
system at the time of the last backup, to decide which files to include in
the archive being created.  That file will then be updated by @code{tar}.
If the file @var{file} does not exist when this option is specified,
@code{tar} will create it, and include all appropriate files in the archive.
However, if the created archive is sent to the sink (by creating over
@file{/dev/null}), the snapshot file is neither created nor updated.

The file @var{file}, which is archive independent, contains the date
it was last modified and a list of devices, inode numbers and
directory names.  @code{tar} will archive files with newer mod dates
or inode change times, and directories with an unchanged inode number
and device but a changed directory name.  The file is updated after
the files to be archived are determined, but before the new archive is
actually created.

Although it should be obvious that a device has a non-volatile value, NFS
devices have non-dependable values when an automounter gets into the picture.
This leads to a great deal of spurious redumping in incremental dumps,
so it is somewhat useless to compare two NFS device numbers over time.
So @code{tar} now considers all NFS devices as being equal when it comes
to comparing directories; this is fairly gross, but there does not seem
to be a better way to go.

@node Backup levels, Backup parameters, incremental listed-incremental, Backups
@section Levels of backups

An archive containing all the files in the file system is called a
@dfn{full backup} or @dfn{full dump}.  You could ensure your data by
creating a full dump every day.  This strategy, however, would waste a
substantial amount of archive media and user time, as unchanged files
are daily re-archived.

It is more efficient to do a full dump only occasionally.  To back up
files between full dumps, you can do an incremental dump.  A @dfn{level
one} dump archives all the files that have changed since the last full
dump.

A typical dump strategy would be to perform a full dump once a week,
and a level one dump once a day.  This means some versions of files
will in fact be archived more than once, but this dump strategy makes
it possible to restore a file system to within one day of accuracy by
only extracting two archives---the last weekly (full) dump and the
last daily (level one) dump.  The only information lost would be in
files changed or created since the last daily backup.  (Doing dumps
more than once a day is usually not worth the trouble).

@code{tar} comes with scripts you can use to do full and level-one
dumps.  Using scripts (shell programs) to perform backups and
restoration is a convenient and reliable alternative to typing out
file name lists and @code{tar} commands by hand.

Before you use these scripts, you need to edit the file
@file{backup-specs}, which specifies parameters used by the backup
scripts and by the restore script.  @FIXME{There is no such restore
script!}  @xref{Script syntax}.  Once the backup parameters
are set, you can perform backups or restoration by running the
appropriate script.

The name of the restore script is @code{restore}.  @FIXME{There is
no such restore script!}  The names of the level one and full backup
scripts are, respectively, @code{level-1} and @code{level-0}.
The @code{level-0} script also exists under the name @code{weekly}, and
the @code{level-1} under the name @code{daily}---these additional names
can be changed according to your backup schedule.  @xref{Scripted
restoration}, for more information on running the restoration script.
@xref{Scripted backups}, for more information on running the
backup scripts.

@strong{Please note:} The backup scripts and the restoration scripts are
designed to be used together.  While it is possible to restore files by
hand from an archive which was created using a backup script, and to create
an archive by hand which could then be extracted using the restore script,
it is easier to use the scripts.  @FIXME{There is no such restore script!}
@xref{incremental}, and @ref{listed-incremental},
before making such an attempt.

@menu
* Full dumps::                  Using @code{tar} to perform full dumps
* Incremental dumps::           Using @code{tar} to perform incremental dumps
@end menu

@node Full dumps, Incremental dumps, Backup levels, Backup levels
@subsection Using @code{tar} to perform full dumps

@cindex full dumps
@cindex dumps, full

@cindex corrupted archives
Full dumps should only be made when no other people or programs
are modifying files in the filesystem.  If files are modified while
@code{tar} is making the backup, they may not be stored properly in
the archive, in which case you won't be able to restore them if you
have to.  (Files being modified are written with no trouble, and do
not corrupt the entire archive.)

You will want to use the @value{label} option to give the archive a
volume label, so you can tell what this archive is even if the label
falls off the tape, or anything like that.

Unless the filesystem you are dumping is guaranteed to fit on
one volume, you will need to use the @value{multi-volume} option.
Make sure you have enough tapes on hand to complete the backup.

If you want to dump each filesystem separately you will need to use
the @value{one-file-system} option to prevent @code{tar} from crossing
filesystem boundaries when storing (sub)directories.

The @value{incremental} option is not needed, since this is a complete
copy of everything in the filesystem, and a full restore from this
backup would only be done onto a completely empty disk.

Unless you are in a hurry, and trust the @code{tar} program (and your
tapes), it is a good idea to use the @value{verify} option, to make
sure your files really made it into the dump properly.  This will
also detect cases where the file was modified while (or just after)
it was being archived.  Not all media (notably cartridge tapes) are
capable of being verified, unfortunately.

@value{listed-incremental} always takes a file name argument.  If the
file doesn't exist, @code{tar} runs a level zero dump, creating the
file.  If the file exists, @code{tar} uses that file to see what has
changed.

@value{incremental} handles old extended format incremental backup.

The @value{incremental} option means the archive is an incremental
backup.  Its meaning depends on the command that it modifies.

When this option is used for creating an incremental backup of
a filesystem, @code{tar}
writes, at the beginning of the archive, an entry for each of the
directories that will be operated on.  The entry for a directory
includes a list of all the files in the directory at the time the
dump was done, and a flag for each file indicating whether the file
is going to be put in the archive.  This information is used when
doing a complete incremental restore.

Note that this option causes @code{tar} to create a non-standard
archive that may not be readable by other versions of the @code{tar}
program.

If the @value{incremental} option is used with @value{list}, @code{tar}
will list, for each directory in the archive, the list of files in
that directory at the time the archive was created.  This information
is put out in a format that is not easy for humans to read, but which
is unambiguous for a program: each file name is preceded by either a
@samp{Y} if the file is present in the archive, an @samp{N} if the
file is not included in the archive, or a @samp{D} if the file is
a directory (and is included in the archive).  Each file name is
terminated by a null character.  The last file is followed by an
additional null and a newline to indicate the end of the data.

If the @value{incremental} option is used with @value{extract}, then
when the entry for a directory is found, all files that currently
exist in that directory but are not listed in the archive @emph{are
deleted from the directory}.

This behavior is convenient when you are restoring a damaged file
system from a succession of incremental backups: it restores the
entire state of the file system to that which obtained when the backup
was made.  If you don't use @value{incremental}, the file system will
probably fill up with files that shouldn't exist any more.

@value{listed-incremental} handles new extended format incremental backup.

@value{listed-incremental} acts like @value{incremental}, but when
used in conjunction with @value{create} will also cause @code{tar} to
use the file @var{file}, which contains information about the state
of the filesystem at the time of the last backup, to decide which
files to include in the archive being created.  That file will then
be updated by @code{tar}.  If the file @var{file} does not exist when
this option is specified, @code{tar} will create it, and include all
appropriate files in the archive.

The file, which is archive independent, contains the date it was last
modified and a list of devices, inode numbers and directory names.
@code{tar} will archive files with newer mod dates or inode change
times, and directories with an unchanged inode number and device but
a changed directory name.  The file is updated after the files to
be archived are determined, but before the new archive is actually
created.

When restoring, only files newer than the saved time are
restored, and the directory list is used to speed up subcommands.

@code{tar} actually writes the file twice: once before the data
is written, and once after.

@node Incremental dumps, , Full dumps, Backup levels
@subsection Using @code{tar} to perform incremental dumps

@cindex incremental dumps
@cindex dumps, incremental

Performing incremental dumps is similar to performing full dumps,
although a few more options will usually be needed.

You will need to use the @kbd{-N @var{date}} option to tell @code{tar}
to only store files that have been modified since @var{date}.
@var{date} should be the date and time of the last full/incremental
dump.  @xref{after-date}.

A standard scheme is to do a @emph{monthly} (full) dump once a month,
a @emph{weekly} dump once a week of everything since the last monthly,
and a @emph{daily} dump every day of everything since the last (weekly or
monthly) dump.

Here is a copy of the script used to dump the filesystems of the
machines here at the Free Software Foundation.  This script is run via
@code{cron} late at night when people are least likely to be using the
machines.  This script dumps several filesystems from several machines
at once (via NFS).  The operator is responsible for ensuring that all
the machines will be up at the time the dump happens.  If a machine is
not running, its files will not be dumped, and the next day's
incremental dump will @emph{not} store files that would have gone onto
that dump.

@smallexample
#!/bin/csh
# Dump thingie
set now = `date`
set then = `cat date.nfs.dump`
/u/hack/bin/tar -c -G -v\
 -f /dev/rtu20\
 -b 126\
 -N "$then"\
 -V "Dump from $then to $now"\
 /alpha-bits/gp\
 /gnu/hack\
 /hobbes/u\
 /spiff/u\
 /sugar-bombs/u
echo $now > date.nfs.dump
mt -f /dev/rtu20 rew
@end smallexample

Output from this script is stored in a file, for the operator to
read later.

This script uses the file @file{date.nfs.dump} to store the date and time
of the last dump.

Since this is a streaming tape drive, no attempt to verify the archive
is made.  This is also why the high blocking factor (126) is used.
The tape drive must also be rewound by the @code{mt} command after
the dump is made.  @FIXME{Care to explain why?}

@node Backup parameters, Scripted backups, Backup levels, Backups
@section Setting parameters for backups and restoration

The file @file{backup-specs} specifies backup parameters for the
backup and restoration scripts provided with @code{tar}.  You must
edit @file{backup-specs} to fit your system configuration and schedule
before using these scripts.

@xref{Script syntax}, for an explanation of this syntax.

@file{backup-specs} specifies the following parameters:

@table @code
@item ADMINISTRATOR
The user name of the backup administrator.

@item BACKUP_HOUR
The hour at which the backups are done.  This can be a number from 0
to 23, or the string @samp{now}.

@item TAPE_FILE
The device @code{tar} writes the archive to.  This device should be
attached to the host on which the dump scripts are run.

@item TAPE_STATUS
The command to use to obtain the status of the archive device,
including error count.  On some tape drives there may not be such a
command; in that case, simply use `TAPE_STATUS=false'.

@item BLOCKING
The blocking factor @code{tar} will use when writing the dump archive.
@xref{blocking-factor}.

@item BACKUP_DIRS
A list of file systems to be dumped.  You can include any directory
name in the list---subdirectories on that file system will be
included, regardless of how they may look to other networked machines.
Subdirectories on other file systems will be ignored.

@item HOST_NAME
The host name specifies which host to run @code{tar} on, and should
normally be the host that actually contains the file system.  However,
the host machine must have @code{tar} installed, and must be able
to access the directory containing the backup scripts and their
support files using the same file name that is used on the machine
where the scripts are run (that is, what @code{pwd} will print when in that
directory on that machine).  If the host that contains the file system
does not have this capability, you can specify another host as long as
it can access the file system through NFS.

@item BACKUP_FILES
A list of individual files to be dumped.  These should be accessible
from the machine on which the backup script is run.

@end table

@menu
* backup-specs example::        An example text of @file{backup-specs}
* Script syntax::               Syntax for @file{backup-specs}
@end menu

@node backup-specs example, Script syntax, Backup parameters, Backup parameters
@subsection An example text of @file{backup-specs}

The following is the text of @file{backup-specs} as it appears at FSF:

@smallexample
# site-specific parameters for file system backup.

ADMINISTRATOR=friedman
BACKUP_HOUR=1
TAPE_FILE=/dev/nrsmt0
TAPE_STATUS="mts -t $TAPE_FILE"
BLOCKING=124
BACKUP_DIRS="
	albert:/fs/fsf
	apple-gunkies:/gd
	albert:/fs/gd2
	albert:/fs/gp
	geech:/usr/jla
	churchy:/usr/roland
	albert:/
	albert:/usr
	apple-gunkies:/
	apple-gunkies:/usr
	gnu:/hack
	gnu:/u
	apple-gunkies:/com/mailer/gnu
	apple-gunkies:/com/archive/gnu"

BACKUP_FILES="/com/mailer/aliases /com/mailer/league*[a-z]"

@end smallexample

@node Script syntax, , backup-specs example, Backup parameters
@subsection Syntax for @file{backup-specs}

@file{backup-specs} is in shell script syntax.  The following
conventions should be considered when editing the script:

A quoted string is considered to be contiguous, even if it is on more
than one line.  Therefore, you cannot include commented-out lines
within a multi-line quoted string.  BACKUP_FILES and BACKUP_DIRS are
the two parameters most likely to be multi-line.

A quoted string typically cannot contain wildcards.  In
@file{backup-specs}, however, the parameters BACKUP_DIRS and
BACKUP_FILES can contain wildcards.

@node Scripted backups, Scripted restoration, Backup parameters, Backups
@section Using the backup scripts

The syntax for running a backup script named @var{script-name} is:

@smallexample
$ @var{script-name} [@var{time-to-be-run}]
@end smallexample

where @var{time-to-be-run} can be a specific system time, or can be
@kbd{now}.  If you do not specify a time, the script runs at the time
specified in @file{backup-specs} (@pxref{Script syntax}).

You should start a script with a tape or disk mounted.  Once you
start a script, it prompts you for new tapes or disks as it
needs them.  Media volumes don't have to correspond to archive
files---a multi-volume archive can be started in the middle of a
tape that already contains the end of another multi-volume archive.
The @code{restore} script prompts for media by its archive volume,
so to avoid an error message you should keep track of which tape
(or disk) contains which volume of the archive.  @FIXME{There is
no such restore script!}  @xref{Scripted restoration}.
@FIXME{Have file names changed?}

The backup scripts write two files on the file system.  The first is a
record file in @file{/etc/tar-backup/}, which is used by the scripts
to store and retrieve information about which files were dumped.  This
file is not meant to be read by humans, and should not be deleted by
them.  @xref{incremental listed-incremental}, for a more
detailed explanation of this file.

The second file is a log file containing the names of the file systems
and files dumped, the time when the backup was made, and any error
messages that were generated, as well as how much space was left in
the media volume after the last volume of the archive was written.
You should check this log file after every backup.  The file name is
@file{log-@var{mmm-ddd-yyyy}-level-1} or
@file{log-@var{mmm-ddd-yyyy}-full}.

The script also prints the name of each system being dumped to the
standard output.

@node Scripted restoration, , Scripted backups, Backups
@section Using the restore script

@ifset PUBLISH

The @code{tar} distribution does not provide restoring scripts.

@end ifset

@ifclear PUBLISH

@quotation
@strong{Warning:} The @code{tar} distribution does @emph{not}
provide any such @code{restore} script yet.  This section is only
listed here for documentation maintenance purposes.  In any case,
all contents are subject to change as things develop.
@end quotation

@FIXME{A section on non-scripted restore may be a good idea.}

To restore files that were archived using a scripted backup, use the
@code{restore} script.  The syntax for the script is:

where ***** are the file systems to restore from, and
***** is a regular expression which specifies which files to
restore.  If you specify @samp{--all}, the script restores all the files
in the file system.

You should start the restore script with the media containing the
first volume of the archive mounted.  The script will prompt for other
volumes as they are needed.  If the archive is on tape, you don't need
to rewind the tape to its beginning---if the tape head is
positioned past the beginning of the archive, the script will rewind
the tape as needed.  @xref{Media}, for a discussion of tape
positioning.

If you specify @samp{--all} as the @var{files} argument, the
@code{restore} script extracts all the files in the archived file
system into the active file system.

@quotation
@strong{Warning:} The script will delete files from the active file
system if they were not in the file system when the archive was made.
@end quotation

@xref{incremental}, and @ref{listed-incremental},
for an explanation of how the script makes that determination.

@end ifclear

@node All options, Date input formats, Backups, Top
@appendix All @code{tar} options

This appendix contain an alphabetical listing of all @code{tar} subcommands
and options, with brief descriptions and cross-references to more in-depth
explanations in the body of the manual.  It also contains an alphabetically
arranged table of the short option forms with their corresponding long
option.  You can use this table as a reference for deciphering @code{tar}
commands in scripts.

@menu
* Subcommand summary::          Subcommands
* Option summary::              @code{tar} options
* Short option summary::        Short options cross-reference
@end menu

@node Subcommand summary, Option summary, All options, All options
@appendixsec Subcommands

Any particular division of all options into subcommands and fine-tuning
options is debatable, and surely subject to change.  The following table
gives a particular view, which may help users to acquire a better grasp
of the main operating modes for @code{tar}.

@table @asis
@item @value{append}
Appends files to the end of the archive.  @xref{append}.

@item @kbd{--catenate}
Same as @kbd{--concatenate}.  @xref{concatenate}.

@item @value{compare}
Compares archive members with their counterparts in the file
system, and reports differences in file size, mode, owner,
modification date and contents.  @xref{compare}.

@item @value{concatenate}
Appends other @code{tar} archives to the end of the archive.
@xref{concatenate}.

@item @value{create}
Creates a new @code{tar} archive.  @xref{create}.

@item @value{delete}
Deletes members from the archive.  Don't try this on an archive on a
magnetic tape!  @xref{delete}.

@item @kbd{--diff}
Same as @kbd{--compare}.  @xref{compare}.

@item @value{extract}
Extracts members from the archive into the file system.  @xref{extract}.

@item @kbd{--get}
Same as @kbd{--extract}.   @xref{extract}.

@item @value{list}
Lists the members in an archive.  @xref{list}.

@item @value{update}
Adds files to the end of the archive, but only if they are newer than
their counterparts already in the archive, or if they do not already
exist in the archive.  @xref{update}.

@end table

@node Option summary, Short option summary, Subcommand summary, All options
@appendixsec @code{tar} options

Here is an alphabetical listing of all options accepted by @code{tar},
whether they appear or not in the summary of subcommands (@pxref{Subcommand
summary}.  Each option is accompanied by a reference to where it is more
fully explained.

@table @asis

@item @kbd{-[0-7][lmh]}
Specify drive and density.  @xref{lmh}.

@item @value{absolute-names}
Normally when creating an archive, @code{tar} converts absolute file
names to relative, by stripping an initial @samp{/} from member names
(on MS-DOS and MS-Windows, @code{tar} also strips the drive letter and
the colon that follows it).  This option disables that behavior.
@xref{absolute-names}.

@item @kbd{--absolute-paths}
This obsolete option has been replaced with @kbd{--absolute-names}.

@item @value{after-date}
When creating an archive, @code{tar} will only add files that have changed
since @var{date}.  @xref{after-date}.

@item @value{append}
Appends files to the end of the archive.  @xref{append}.

@item @value{atime-preserve}
Tells @code{tar} to preserve the access (and modification) times field in
a file's inode when dumping it.  @xref{atime-preserve}.

@item @value{backup}
Rather than deleting files from the file system, @code{tar} will back
them up using simple or numbered backups, depending upon @var{method}.
@xref{backup}.

@item @kbd{--block-compress}
This obsolete option has been deleted, as @code{tar} now decides
automatically about when to reblock the output of the compression filter.

@item @value{block-number}
With this option present, @code{tar} prints error messages for read errors
with the block number in the archive file.  @xref{block-number}.

@item @kbd{--block-size}
This obsolete option has been replaced by @kbd{--blocking-factor}.

@item @value{blocking-factor}
Sets the blocking factor @code{tar} uses to @var{blocking} x 512 bytes per
record.  @xref{blocking-factor}.

@item @kbd{--catenate}
Same as @kbd{--concatenate}.  @xref{concatenate}.

@item @value{checkpoint}
This option directs @code{tar} to print periodic checkpoint messages as
it reads through the archive.  @xref{checkpoint}.

@item @value{compare}
Compares archive members with their counterparts in the file system,
and reports differences in file size, mode, owner, modification date,
and contents.  @xref{compare}.

@item @value{compress}
@code{tar} will use the @code{compress} program when reading or writing the
archive.  This allows you to act directly on archives while saving space.
@xref{compress}.

@item @value{concatenate}
Appends other @code{tar} archives to the end of the archive.
@xref{concatenate}.

@item @kbd{--confirmation}
Same as @kbd{--interactive}.  @xref{interactive}.

@item @value{create}
Creates a new @code{tar} archive.  @xref{create}.

@item @value{delete}
Deletes members from the archive.  Don't try this on an archive on a
magnetic tape!  @xref{delete}.

@item @value{dereference}
When creating a @code{tar} archive, @code{tar} will archive the file
that a symbolic link points to, rather than archiving the symlink.
@xref{dereference}.

@item @kbd{--diff}
Same as @kbd{--compare}.  @xref{compare}.

@item @value{directory}
When this option is specified, @code{tar} will change its current directory
to @var{dir} before performing any subcommands.  When this option is used
during archive creation, it is order-sensitive.  @xref{directory}.

@item @value{exclude}
When performing subcommands, @code{tar} will skip files that match
@var{pattern}.  @xref{exclude}.

@item @value{exclude-from}
Similar to @kbd{--exclude}, except that @code{tar} will use the list of patterns
in the file @var{file}.  @xref{exclude-from}.

@item @value{extract}
Extracts members from the archive into the file system.  @xref{extract}.

@item @value{file}
@code{tar} will use the file @var{archive} as the @code{tar} archive it
performs subcommands on, rather than @code{tar}'s compilation-dependent
default.  @xref{file}.

@item @value{files-from}
@code{tar} will use the contents of @var{file} as a list of archive members
or files to operate on, in addition to those specified on the command line.
@xref{files-from}.

@item @value{force-local}
Forces @code{tar} to interpret the filename given to @value{file}
as a local file, even if it looks like a remote tape drive name.
@xref{force-local}.

@item @kbd{--get}
Same as @kbd{--extract}.   @xref{extract}.

@item @value{group}
Files added to the @code{tar} archive will have a group id of @var{group},
rather than the group from the source file.  @xref{group}.

@item @kbd{--gunzip}
This obsolete option has been replaced by @kbd{--gzip}.

@item @value{gzip}
This option tells @code{tar} to read or write archives through @code{gzip},
allowing @code{tar} to directly operate on several kinds of compressed
archives transparently.  @xref{gzip}.

@item @value{help}
@code{tar} will print out a short message summarizing the subcommands and
options to @code{tar} and exit.  @xref{help}.

@item @value{ignore-failed-read}
Instructs @code{tar} to exit successfully if it encounters an
unreadable file.  @xref{ignore-failed-read}.

@item @value{ignore-zeros}
With this option, @code{tar} will ignore zeroed blocks in the archive,
which normally signals the end of the archive file.  @xref{ignore-zeros}.

@item @value{incremental}
Used to inform @code{tar} that it is working with an old extended format
incremental backup archive.  It is intended primarily for backward
compatibility.  @xref{incremental}.

@item @value{info-script}
When @code{tar} is performing multi-tape backups, @var{script-name} is
run at the end of each tape.  @xref{info-script}.

@item @value{interactive}
Specifies that @code{tar} should ask the user for confirmation before
performing potentially destructive operations, such as overwriting files.
@xref{interactive}.

@item @value{keep-old-files}
When extracting files from an archive, @code{tar} will not overwrite
existing files if this option is present.  @xref{keep-old-files}.

@item @value{label}
When creating an archive, instructs @code{tar} to write @var{name}
as a name record in the archive.  When extracting or listing archives,
@code{tar} will only operate on archives that have a label matching the
pattern specified in @var{name}.  @xref{label}.

@item @value{list}
Lists the members in an archive.  @xref{list}.

@item @value{listed-incremental}
During a @value{create} subcommand, specifies that the archive that
@code{tar} creates is a new extended format incremental backup, using
@var{snapshot-file} to determine which files to backup.  With other
subcommands, informs @code{tar} that the archive is in incremental format.
@xref{listed-incremental}.

@item @value{mode}
When adding files to an archive, @code{tar} will use @var{permissions}
for the archive members, rather than the permissions from the files.
@xref{mode}.

@item @kbd{--modification-time}
This obsolete option has been replaced by @kbd{--touch}.

@item @value{multi-volume}
Informs @code{tar} that it should create or otherwise operate on a
multi-volume @code{tar} archive.  @xref{multi-volume}.

@item @value{name-prefix}
To prepend the given prefix to each archive file name as it is gathered
into the archive.  This prefix won't show in any @value{verbose}
progress message, but it will if you list the archive.  @xref{name-prefix}.

@item @kbd{--new-volume-script}
Same as @kbd{--info-script}.  @xref{info-script}.

@item @kbd{--newer}
Same as @kbd{--after-date}.  @xref{after-date}.

@item @value{newer-mtime}
@code{tar} will only add files whose contents have changed (as opposed
to just @w{@kbd{--after-date}}, which will also back up files for which
any status information has changed).  On MS-DOS, where there is only one
time stamp for a file, @w{@kbd{--after-date}} and @w{@kbd{--newer-mtime}}
have identical effect.  @xref{newer-mtime}.

@item @value{no-attributes}
@code{tar} will not try restoring any file attribute while extracting files.
This option might disappear in some later version.  @xref{no-attributes}.

@item @value{no-recursion}
With this option, @code{tar} will not recurse into directories
unless a directory is explicitly named as an argument to @code{tar}.
@xref{no-recursion}.

@item @value{null}
When @code{tar} is using the @value{files-from} option, this option
instructs @code{tar} to expect filenames terminated with @code{NUL},
so @code{tar} can correctly work with file names that contain newlines.
@xref{null}.

@item @value{numeric-owner}
This option will notify @code{tar} that it should use numeric user
and group IDs when creating a @code{tar} file, rather than names.
@xref{numeric-owner}.

@item @value{old-archive}
Tells @code{tar} to create an archive that is compatible with Unix V7
@code{tar}.  @xref{old-archive}.

@item @value{one-file-system}
Used when creating an archive.  Prevents @code{tar} from recursing into
directories that are on different file systems from the current directory.
@xref{one-file-system}.

@item @value{owner}
Specifies that @code{tar} should use @var{user} as the owner of members
when creating archives, instead of the user associated with the source file.
@xref{owner}.

@item @kbd{--portability}
Same as @w{@kbd{--old-archive}}.  @xref{old-archive}.

@item @value{posix}
Instructs @code{tar} to create a POSIX compliant @code{tar} archive.
@xref{posix}.

@item @value{preserve}
Synonymous with specifying both @w{@kbd{--same-permissions}} and
@w{@kbd{--same-order}}.  @xref{preserve}.

@item @kbd{--preserve-order}
Same as @w{@kbd{--same-order}}.  @xref{same-order}.

@item @kbd{--preserve-permissions}
Same as @w{@kbd{--same-permissions}}.  @xref{same-permissions}.

@item @kbd{--read-full-blocks}
This obsolete option has been replaced by @w{@kbd{--read-full-records}}.

@item @value{read-full-records}
Specifies that @code{tar} should reblock its input, for reading from pipes
on systems with buggy implementations.  @xref{read-full-records}.

@item @kbd{--record-number}
This obsolete option has been replaced by @w{@kbd{--block-number}}.

@item @value{record-size}
Instructs @code{tar} to use @var{size} bytes per record when accessing the
archive.  @xref{record-size}.

@item @value{recursive-unlink}
Similar to the @value{unlink-first} option, removing existing directory
hierarchies before extracting directories of the same name from the archive.
@xref{recursive-unlink}.

@item @value{remove-files}
Directs @code{tar} to remove the source file from the file system after
appending it to an archive.  @xref{remove-files}.

@item @value{rsh-command}
Notifies @code{tar} that is should use @var{cmd} to communicate with
remote devices.  @xref{rsh-command}.

@item @value{same-order}
This option is an optimization for @code{tar} when running on machines
with small amounts of memory.  It informs @code{tar} that the list of file
arguments has already been sorted to match the order of files in the archive.
@xref{same-order}.

@item @value{same-owner}
When extracting an archive, @code{tar} will attempt to preserve the
owner specified in the @code{tar} archive with this option present.
@xref{same-owner}.

@item @value{same-permissions}
When @code{tar} is extracting an archive, it normally subtracts the user's
umask from the permissions specified in the archive and uses that number
as the permissions to create the destination file.  Specifying this option
instructs @code{tar} that it should use the permissions directly from
the archive.  @xref{same-permissions}.

@item @value{show-omitted-dirs}
Instructs @code{tar} to mention directories it's skipping over when
operating on a @code{tar} archive.  @xref{show-omitted-dirs}.

@item @value{sparse}
Invokes an extended format when adding files to an archive that handles
sparse files efficiently.  @xref{sparse}.

@item @value{starting-file}
This option affects extraction only; @code{tar} will skip extracting
files in the archive until it finds one that matches @var{name}.
@xref{starting-file}.

@item @value{suffix}
Alters the suffix @code{tar} uses when backing up files from the default
@samp{~}.  @xref{suffix}.

@item @value{tape-length}
Specifies the length of tapes that @code{tar} is writing as
@w{@var{num} x 1024} bytes long.  @xref{tape-length}.

@item @value{to-stdout}
During extraction, @code{tar} will extract files to stdout rather than to
the file system.  @xref{to-stdout}.

@item @value{totals}
Displays the total number of bytes written after creating an archive.
@xref{totals}.

@item @value{touch}
Sets the modification time of extracted files to the extraction time,
rather than the modification time stored in the archive.  @xref{touch}.

@item @kbd{--uncompress}
This obsolete option has been replaced with @w{@kbd{--compress}}.

@item @kbd{--ungzip}
This obsolete option has been replaced with @w{@kbd{--gzip}}.

@item @value{unlink-first}
Directs @code{tar} to remove the corresponding file from the file system
before extracting it from the archive.  @xref{unlink-first}.

@item @value{update}
Adds files to the end of the archive, but only if they are newer than their
counterparts already in the archive, or if they do not already exist in
the archive.  @xref{update}.

@item @value{use-compress-program}
Instructs @code{tar} to access the archive through @var{prog},
which is presumed to be a compression program of some sort.
@xref{use-compress-program}.

@item @value{verbose}
Specifies that @code{tar} should be more verbose about the subcommands
it is performing.  This option can be specified multiple times for some
subcommands to increase the amount of information displayed.  @xref{verbose}.

@item @value{verify}
Verifies that the archive was correctly written when creating an archive.
@xref{verify}.

@item @value{version}
@code{tar} will print an informational message about what version it is,
a copyright message, and some credits, and then exit.  @xref{version}.

@item @kbd{--version-control}
This obsolete option has been replaced with @w{@kbd{--backup}}.

@item @value{volno-file}
Used in conjunction with @value{multi-volume}.  @code{tar} will keep
track of which volume of a multi-volume archive it is working on in
@var{file}.  @xref{volno-file}.

@end table

@node Short option summary, , Option summary, All options
@appendixsec Short options cross-reference

Here is an alphabetized list of all of the short option forms, matching
them with the equivalent long option.

@example
@kbd{-A}     @kbd{--concatenate}
@kbd{-B}     @kbd{--read-full-records}
@kbd{-C}     @kbd{--directory}
@kbd{-F}     @kbd{--info-script}
@kbd{-G}     @kbd{--incremental}
@kbd{-K}     @kbd{--starting-file}
@kbd{-L}     @kbd{--tape-length}
@kbd{-M}     @kbd{--multi-volume}
@kbd{-N}     @kbd{--newer}
@kbd{-O}     @kbd{--to-stdout}
@kbd{-P}     @kbd{--absolute-names}
@kbd{-R}     @kbd{--block-number}
@kbd{-S}     @kbd{--sparse}
@kbd{-T}     @kbd{--files-from}
@kbd{-U}     @kbd{--unlink-first}
@kbd{-V}     @kbd{--label}
@kbd{-W}     @kbd{--verify}
@kbd{-X}     @kbd{--exclude-from}
@kbd{-Z}     @kbd{--compress}
@kbd{-b}     @kbd{--blocking-factor}
@kbd{-c}     @kbd{--create}
@kbd{-d}     @kbd{--compare}
@kbd{-f}     @kbd{--file}
@kbd{-g}     @kbd{--listed-incremental}
@kbd{-h}     @kbd{--dereference}
@kbd{-i}     @kbd{--ignore-zeros}
@kbd{-k}     @kbd{--keep-old-files}
@kbd{-l}     @kbd{--one-file-system}
@kbd{-m}     @kbd{--touch}
@kbd{-o}     @kbd{--portability}
@kbd{-p}     @kbd{--same-permissions}
@kbd{-r}     @kbd{--append}
@kbd{-s}     @kbd{--same-order}
@kbd{-t}     @kbd{--list}
@kbd{-u}     @kbd{--update}
@kbd{-v}     @kbd{--verbose}
@kbd{-w}     @kbd{--interactive}
@kbd{-x}     @kbd{--extract}
@kbd{-z}     @kbd{--gzip}
@end example

@node Date input formats, Archive format, All options, Top
@appendix Date input formats

@cindex date input formats
@findex getdate

@quotation
Our units of temporal measurement, from seconds on up to months, are so
complicated, asymmetrical and disjunctive so as to make coherent mental
reckoning in time all but impossible.  Indeed, had some tyrannical god
contrived to enslave our minds to time, to make it all but impossible
for us to escape subjection to sodden routines and unpleasant surprises,
he could hardly have done better than handing down our present system.
It is like a set of trapezoidal building blocks, with no vertical or
horizontal surfaces, like a language in which the simplest thought
demands ornate constructions, useless particles and lengthy
circumlocutions.  Unlike the more successful patterns of language and
science, which enable us to face experience boldly or at least
level-headedly, our system of temporal calculation silently and
persistently encourages our terror of time. @dots{}

It is as though architects had to measure length in feet, width
in meters and height in ells; as though basic instruction manuals
demanded a knowledge of five different languages.  It is no wonder then
that we often look into our own immediate past or future, last Tuesday
or a week from Sunday, with feelings of helpless confusion.

--- Robert Grudin, @cite{Time and the Art of Living}.
@end quotation

This section describes the textual date representations that some free
programs accept.  These are the strings you, as a user, can supply as
arguments to the various programs.  The C interface (via the @code{getdate}
function) is not described here.

@cindex beginning of time, for Unix
@cindex epoch, for Unix
Although the date syntax here can represent any possible time since zero
@sc{a.d.}, computer integers are not big enough for such a (comparatively)
long time.  The earliest date semantically allowed on Unix systems is
midnight, 1970-01-01 UCT.

@menu
* General date syntax::         General date syntax
* Calendar date item::          Calendar date item
* Time of day item::            Time of day item
* Timezone item::               Timezone item
* Day of week item::            Day of week item
* Relative item in date strings::  Relative item in date strings
* Pure numbers in date strings::  Pure numbers in date strings
* Authors of getdate::          Authors of @code{getdate}
@end menu

@node General date syntax, Calendar date item, Date input formats, Date input formats
@appendixsec General date syntax

@cindex General date syntax
@cindex items in date strings
A @dfn{date} is a string, possibly empty, containing many items
separated by whitespace.  The whitespace may be omitted when no
ambiguity arises.  The empty string means the beginning of today (that is,
midnight).  Order of the items is immaterial.  A date string may contain
many flavors of items:

@itemize @bullet
@item calendar date items
@item time of the day items
@item time zone items
@item day of the week items
@item relative items
@item pure numbers.
@end itemize

@noindent We describe each of these item types in turn, below.

@cindex numbers, written-out
@cindex ordinal numbers
@findex first @r{in date strings}
@findex next @r{in date strings}
@findex last @r{in date strings}
A few numbers may be written out in words in most contexts.  This is
most useful for specifying day of the week items or relative items (see
below).  Here is the list: @samp{first} for 1, @samp{next} for 2,
@samp{third} for 3, @samp{fourth} for 4, @samp{fifth} for 5,
@samp{sixth} for 6, @samp{seventh} for 7, @samp{eighth} for 8,
@samp{ninth} for 9, @samp{tenth} for 10, @samp{eleventh} for 11, and
@samp{twelfth} for 12.  Also, @samp{last} means exactly @math{-1}.

@cindex months, written-out
When a month is written this way, it is still considered to be written
numerically, instead of being ``spelled in full''; this changes the
allowed strings.

@cindex case, ignored in dates
@cindex comments, in dates
Alphabetic case is completely ignored in dates.  Comments may be introduced
between round parentheses, as long as included parentheses are properly
nested.  Hyphens not followed by a digit are currently ignored.  Leading
zeros on numbers are ignored.

@node Calendar date item, Time of day item, General date syntax, Date input formats
@appendixsec Calendar date item

@cindex Calendar date item
A @dfn{calendar date item} specifies a day of the year.  It is
specified differently, depending on whether the month is specified
numerically or literally.  All these strings specify the same calendar date:

@example
1970-09-17           # ISO 8601.
70-9-17              # This century assumed by default.
70-09-17             # Leading zeros are ignored.
9/17/72              # Common U.S. writing.
24 September 1972
24 Sept 72           # September has a special abbreviation.
24 Sep 72            # Three-letter abbreviations always allowed.
Sep 24, 1972
24-sep-72
24sep72
@end example

The year can also be omitted.  In this case, the last specified year is
used, or the current year if none.  For example:

@example
9/17
sep 17
@end example

Here are the rules.

@cindex ISO 8601 date format
@cindex date format, ISO 8601
For numeric months, the ISO 8601 format
@samp{@var{year}-@var{month}-@var{day}} is allowed, where @var{year} is
any positive number, @var{month} is a number between 01 and 12, and
@var{day} is a number between 01 and 31.  A leading zero must be present
if a number is less than ten.  If @var{year} is less than 100, then 1900
is added to it to force a date in this century.  The construct
@samp{@var{month}/@var{day}/@var{year}}, popular in the United States,
is accepted.  Also @samp{@var{month}/@var{day}}, omitting the year.

@cindex month names in date strings
@cindex abbreviations for months
Literal months may be spelled out in full: @samp{January},
@samp{February}, @samp{March}, @samp{April}, @samp{May}, @samp{June},
@samp{July}, @samp{August}, @samp{September}, @samp{October},
@samp{November}, or @samp{December}.  Literal months may be abbreviated
to their first three letters, possibly followed by an abbreviating dot.
It is also permitted to write @samp{Sept} instead of @samp{September}.

When months are written literally, the calendar date may be given as any
of the following:

@example
@var{day} @var{month} @var{year}
@var{day} @var{month}
@var{month} @var{day} @var{year}
@var{day}-@var{month}-@var{year}
@end example

Or, omitting the year:

@example
@var{month} @var{day}
@end example

@node Time of day item, Timezone item, Calendar date item, Date input formats
@appendixsec Time of day item

@cindex Time of day item
A @dfn{time of day item} in date strings specifies the time on a given
day.  Here are some examples, all of which represent the same time:

@example
20:02:0
20:02
8:02pm
20:02-0500      # In EST (Eastern U.S. Standard Time).
@end example

More generally, the time of the day may be given as
@samp{@var{hour}:@var{minute}:@var{second}}, where @var{hour} is
a number between 0 and 23, @var{minute} is a number between 0 and
59, and @var{second} is a number between 0 and 59.  Alternatively,
@samp{:@var{second}} can be omitted, in which case it is taken to
be zero.

@findex am @r{in date strings}
@findex pm @r{in date strings}
@findex midnight @r{in date strings}
@findex noon @r{in date strings}
If the time is followed by @samp{am} or @samp{pm} (or @samp{a.m.}
or @samp{p.m.}), @var{hour} is restricted to run from 1 to 12, and
@samp{:@var{minute}} may be omitted (taken to be zero).  @samp{am}
indicates the first half of the day, @samp{pm} indicates the second
half of the day.  In this notation, 12 is the predecessor of 1:
midnight is @samp{12am} while noon is @samp{12pm}.

@cindex timezone correction
@cindex minutes, timezone correction by
The time may alternatively be followed by a timezone correction,
expressed as @samp{@var{s}@var{hh}@var{mm}}, where @var{s} is @samp{+}
or @samp{-}, @var{hh} is a number of zone hours, and @var{mm} is a number
of zone minutes.  When a timezone correction is given this way, it
forces interpretation of the time in UTC, overriding any previous
specification for the timezone or the local timezone.  The @var{minute}
part of the time of the day may not be elided when a timezone correction
is used.  This is the only way to specify a timezone correction by
fractional parts of an hour.

Either @samp{am}/@samp{pm} or a timezone correction may be specified,
but not both.

@node Timezone item, Day of week item, Time of day item, Date input formats
@appendixsec Timezone item

@cindex Timezone item
A @dfn{timezone item} specifies an international timezone, indicated by
a small set of letters.  Any included period is ignored.  Military
timezone designations use a single letter.  Currently, only integral
zone hours may be represented in a timezone item.  See the previous
section for a finer control over the timezone correction.

Here are many non-daylight-savings-time timezones, indexed by the zone
hour value.

@table @code
@item +000
@cindex Greenwich Mean Time
@cindex Universal Coordinated Time
@cindex Western European Time
@samp{GMT} for Greenwich Mean, @samp{UT} or @samp{UTC} for Universal
(Coordinated), @samp{WET} for Western European and @samp{Z} for
military.
@item +100
@cindex West African Time
@samp{WAT} for West Africa and
@samp{A} for military.
@item +200
@cindex Azores Time
@samp{AT} for Azores and @samp{B} for military.
@item +300
@samp{C} for military.
@item +400
@cindex Atlantic Standard Time
@samp{AST} for Atlantic Standard and @samp{D} for military.
@item +500
@cindex Eastern Standard Time
@samp{E} for military and @samp{EST} for Eastern Standard.
@item +600
@cindex Central Standard Time
@samp{CST} for Central Standard and @samp{F} for military.
@item +700
@cindex Mountain Standard Time
@samp{G} for military and @samp{MST} for Mountain Standard.
@item +800
@cindex Pacific Standard Time
@samp{H} for military and @samp{PST} for Pacific Standard.
@item +900
@cindex Yukon Standard Time
@samp{I} for military and @samp{YST} for Yukon Standard.
@item +1000
@cindex Alaska-Hawaii Time
@cindex Central Alaska Time
@cindex Hawaii Standard Time
@samp{AHST} for Alaska-Hawaii Standard, @samp{CAT} for Central Alaska,
@samp{HST} for Hawaii Standard and @samp{K} for military.
@item +1100
@cindex Nome Standard Time
@samp{L} for military and @samp{NT} for Nome.
@item +1200
@cindex International Date Line West
@samp{IDLW} for International Date Line West and @samp{M} for
military.
@item -100
@cindex Central European Time
@cindex Middle European Time
@cindex Middle European Winter Time
@cindex French Winter Time
@cindex Swedish Winter Time
@samp{CET} for Central European, @samp{FWT} for French Winter,
@samp{MET} for Middle European, @samp{MEWT} for Middle European
Winter, @samp{N} for military and @samp{SWT} for Swedish Winter.
@item -200
@cindex Eastern European Time
@cindex USSR Zone
@samp{EET} for Eastern European, USSR Zone 1 and @samp{O} for military.
@item -300
@cindex Baghdad Time
@samp{BT} for Baghdad, USSR Zone 2 and @samp{P} for military.
@item -400
@samp{Q} for military and @samp{ZP4} for USSR Zone 3.
@item -500
@samp{R} for military and @samp{ZP5} for USSR Zone 4.
@item -600
@samp{S} for military and @samp{ZP6} for USSR Zone 5.
@item -700
@cindex West Australian Standard Time
@samp{T} for military and @samp{WAST} for West Australian Standard.
@item -800
@cindex China Coast Time
@samp{CCT} for China Coast, USSR Zone 7 and @samp{U} for military.
@item -900
@cindex Japan Standard Time
@samp{JST} for Japan Standard, USSR Zone 8 and @samp{V} for military.
@item -1000
@cindex East Australian Standard Time
@cindex Guam Standard Time
@samp{EAST} for East Australian Standard, @samp{GST} for Guam
Standard, USSR Zone 9 and @samp{W} for military.
@item -1100
@samp{X} for military.
@item -1200
@cindex International Date Line East
@cindex New Zealand Standard Time
@samp{IDLE} for International Date Line East, @samp{NZST} for
New Zealand Standard, @samp{NZT} for New Zealand and @samp{Y} for
military.
@end table

@cindex daylight savings time
Here are many DST timezones, indexed by the zone hour value.  Also, by
following a non-DST timezone by the string @samp{DST} in a separate word
(that is, separated by some whitespace), the corresponding DST timezone
may be specified.

@table @code
@item 0
@samp{BST} for British Summer.
@item +400
@samp{ADT} for Atlantic Daylight.
@item +500
@samp{EDT} for Eastern Daylight.
@item +600
@samp{CDT} for Central Daylight.
@item +700
@samp{MDT} for Mountain Daylight.
@item +800
@samp{PDT} for Pacific Daylight.
@item +900
@samp{YDT} for Yukon Daylight.
@item +1000
@samp{HDT} for Hawaii Daylight.
@item -100
@samp{MEST} for Middle European Summer, @samp{MESZ} for Middle European
Summer, @samp{SST} for Swedish Summer and @samp{FST} for French Summer.
@item -700
@samp{WADT} for West Australian Daylight.
@item -1000
@samp{EADT} for Eastern Australian Daylight.
@item -1200
@samp{NZDT} for New Zealand Daylight.
@end table

@node Day of week item, Relative item in date strings, Timezone item, Date input formats
@appendixsec Day of week item

@cindex Day of week item
The explicit mention of a day of the week will forward the date
(only if necessary) to reach that day of the week in the future.

Days of the week may be spelled out in full: @samp{Sunday},
@samp{Monday}, @samp{Tuesday}, @samp{Wednesday}, @samp{Thursday},
@samp{Friday}, or @samp{Saturday}.  Days may be abbreviated to their
first three letters, optionally followed by a period.  The special
abbreviations @samp{Tues} for @samp{Tuesday}, @samp{Wednes} for
@samp{Wednesday}, and @samp{Thur} or @samp{Thurs} for @samp{Thursday} are
also allowed.

@findex next @var{day}
@findex last @var{day}
A number may precede a day of the week item to move forward
supplementary weeks.  It is best used in an expression like @samp{third
monday}.  In this context, @samp{last @var{day}} or @samp{next
@var{day}} is also acceptable; they move one week before or after
the day that @var{day} by itself would represent.

A comma following a day of the week item is ignored.

@node Relative item in date strings, Pure numbers in date strings, Day of week item, Date input formats
@appendixsec Relative item in date strings

@cindex Relative items in date strings
@cindex Displacement of dates
@dfn{Relative items} adjust a date (or the current date if none) forward
or backward.  The effect of relative items accumulate.  Here are some
examples:

@example
1 year
1 year ago
3 years
2 days
@end example

@findex year @r{in date strings}
@findex month @r{in date strings}
@findex fortnight @r{in date strings}
@findex week @r{in date strings}
@findex day @r{in date strings}
@findex hour @r{in date strings}
@findex minute @r{in date strings}
The unit of time displacement may be selected by the string @samp{year}
or @samp{month} for moving by whole years or months.  These are fuzzy
units, as years and months are not all of equal duration.  More precise
units are @samp{fortnight} (14 days), @samp{week} (7
days), @samp{day} (24 hours), @samp{hour} (60 minutes),
@samp{minute} or @samp{min} (60 seconds), and @samp{second} or
@samp{sec} (one second).  An @samp{s} suffix on these units is
accepted and ignored.

@findex ago @r{in date strings}
The unit of time may be preceded by a multiplier, given as an optionally
signed number.  Unsigned numbers are taken as positively signed.  No
number at all implies 1 for a multiplier.  Following a relative item by
the string @samp{ago} is equivalent to preceding the unit by a
multiplier with value @math{-1}.

@findex day @r{in date strings}
@findex tomorrow @r{in date strings}
@findex yesterday @r{in date strings}
The string @samp{tomorrow} equates to one day in the future (equivalent
to @samp{day}), the string @samp{yesterday} equates to
one day in the past (equivalent to @samp{day ago}).

@findex now @r{in date strings}
@findex today @r{in date strings}
@findex this @r{in date strings}
The strings @samp{now} and @samp{today} are relative items corresponding
to zero-valued time displacement.  These strings come from the fact
a zero-valued time displacement represents the current time when not
altered by previous items.  They may be used to stress other
items, as in @samp{12:00 today}.  The string @samp{this} also has
the meaning of a zero-valued time displacement, but is preferred in
date strings like @samp{this thursday}.

When a relative item causes the resulting date to cross the boundary
between DST and non-DST (or vice-versa), the hour is adjusted according
to the local time.

@node Pure numbers in date strings, Authors of getdate, Relative item in date strings, Date input formats
@appendixsec Pure numbers in date strings

@cindex Pure numbers in date strings
The precise interpretation of a pure decimal number is dependent on
the context in the date string.

If the decimal number is of the form @var{yyyy}@var{mm}@var{dd} and no
other calendar date item (@pxref{Calendar date item}) appears before it
in the date string, then @var{yyyy} is read as the year, @var{mm} as the
month number, and @var{dd} as the day of the month for the specified
calendar date.

If the decimal number is of the form @var{hh}@var{mm} and no other time
of day item appears before it in the date string, then @var{hh} is read
as the hour of the day and @var{mm} as the minute of the hour for the
specified time of the day.  @var{mm} can also be omitted.

If both a calendar date and a time of day appear to the left of a number
in the date string, but no relative item, then the number overrides the
year.

@node Authors of getdate, , Pure numbers in date strings, Date input formats
@appendixsec Authors of @code{getdate}

@cindex Authors of @code{getdate}
@cindex Bellovin, Steven M.
@cindex Salz, Rich
@cindex Berets, Jim
@cindex MacKenzie, David
@cindex Meyering, Jim
@code{getdate} was originally implemented by Steven M. Bellovin
(@email{smb@@research.att.com}) while at the University of North Carolina
at Chapel Hill.  The code was later tweaked by a couple of people on
Usenet, then completely overhauled by Rich $alz (@email{rsalz@@bbn.com})
and Jim Berets (@email{jberets@@bbn.com}) in 1990-08.  Various
revisions for the GNU system were made by David MacKenzie, Jim Meyering,
and others.

@cindex Pinard, F.
@cindex Berry, K.
Fran@,{c}ois Pinard (@email{pinard@@iro.umontreal.ca}) wrote the
above description out of the @file{getdate.y} source code.  K.@: Berry
(@email{kb@@cs.umb.edu}) later edited it.

@node Archive format, Index, Date input formats, Top
@appendix Format of archive files

While an archive may contain many files, the archive itself is a single
ordinary file.  Like any other file, an archive file can be written to
a storage device such as a tape or disk, sent through a pipe or over
a network, saved on the active file system, or even stored in another
archive.  An archive file is not easy to read or manipulate without using
the @code{tar} utility or other special tools, such as @code{tar} mode in
GNU Emacs.

Physically, an archive consists of a series of file entries terminated by an
end-of-archive entry (which consists of a block of 512 zero bytes).  A file
entry usually describes one of the files in the archive (an @dfn{archive
member}) and consists of a file header and the contents of the file.
File headers contain file names and statistics, checksum information that
@code{tar} uses to detect file corruption, and information about file types.

Archives are permitted to have more than one member with the same member
name.  One way this situation can occur is if more than one version of
a file has been stored in the archive.  For information about adding new
versions of a file to an archive, see @ref{update}, and to learn more about
having more than one archive member with the same name, see @ref{backup}.

In addition to entries describing archive members, an archive may contain
entries which @code{tar} itself uses to store information.  @xref{label},
for an example of such an archive entry.

The remainder of this appendix contains a long quote from @code{tar} sources,
expressing the structure of a header block directly in the C language.
This description encompasses both POSIX and non-POSIX aspects of the format.
The two sections following the C description provide more explanations
about the POSIX standard format, and then about the extensions to that format
which @code{tar} uses.  These sections also refer to various constants or
fields introduced in the C description.

@menu
* tar-h::                       The C description of a header block
* Standard format::             The standard format
* Extended format::             Extensions to the archive format
@end menu

@node tar-h, Standard format, Archive format, Archive format
@appendixsec The C description of a header block

The header block is defined in C as follows.  In the @code{tar} distribution,
this is part of file @file{src/tar.h}:

@sp 2
@smallexample
@include header.texi
@end smallexample

@node Standard format, Extended format, tar-h, Archive format
@appendixsec The standard format

A @code{tar} archive file contains a series of blocks.  Each block contains
@code{BLOCKSIZE} bytes.  Although this format may be thought of as being
on magnetic tape, other media are often used.  Each file archived is
represented by a header block which describes the file, followed by zero or
more blocks which give the contents of the file.  At the end of the archive
file there may be a block filled with binary zeros as an end-of-file marker.
A reasonable @code{tar} program should write a block of zeros at the end,
but must not assume that such a block exists when reading an archive.

The blocks may be further @dfn{blocked} into records for physical I/O
subcommands.  Each record of @var{n} blocks (where @var{n} is set by the
@value{blocking-factor} option to @code{tar}) is written with a single
@w{@code{write ()}} subcommand.  On magnetic tapes, the result of such a
write is a single record.  When writing an archive, the last record of
blocks should be written at the full size, with blocks after the zero
block containing all zeros.  When reading an archive, @code{tar} should
properly handle an archive whose last record is shorter than the rest,
or which contains garbage records after a zero block, as such things exist
in practice.

There is no relation between record boundaries and archive member boundaries.
The initial header block for an archive member may start in any block
position within a record, either at the very beginning of the first record
of an archive file, or immediately after the last block of the preceding
archive member, possibly in the same record.

All characters in header blocks are represented by using 8-bit characters
in the local extension of ASCII.  Each field within the structure is
contiguous; that is, there is no padding used within the structure.
Each character on the archive medium is stored contiguously.

Bytes representing the contents of files (after the header block of
each file) are not translated in any way and are not constrained to
represent characters in any character set.  The @code{tar} format does
not distinguish text files from binary files, and no translation of file
contents is performed.

The @code{name}, @code{linkname}, @code{magic}, @code{uname}, and
@code{gname} are null-terminated character strings.  All other fileds
are zero-filled octal numbers in ASCII.  Each numeric field of width
@var{w} contains @var{w} minus 2 digits, a space, and a null, except
@code{size} and @code{mtime}, which do not contain the trailing null.

The @code{name} field is the file name of the file, with directory names
(if any) preceding the file name, separated by slashes.

@FIXME{How big a name before field overflows?}

The @code{mode} field provides nine bits specifying file permissions
and three bits to specify the setuid, setgid, and Save Text
(@dfn{sticky}) modes.  Values for these bits are defined above.
When special permissions are required to create a file with a given
mode, and the user restoring files from the archive does not hold such
permissions, the mode bit(s) specifying those special permissions
are ignored.  Modes which are not supported by the operating system
restoring files from the archive will be ignored.  Unsupported modes
should be faked up when creating or updating an archive; for example, the
group permission could be copied from the @emph{other} permission.

The @code{uid} and @code{gid} fields are the numeric user and group
IDs of the file owner, respectively.  If the operating system does
not support numeric user or group IDs, these fields should be ignored.

The @code{size} field is the size of the file in bytes; linked files
are archived with this field specified as zero.  @xref{Backups}, in
particular the @value{incremental} option.

The @code{mtime} field is the modification time of the file at the time
it was archived.  It is the ASCII representation of the octal value of
the last time the file was modified, represented as an integer number of
seconds since 1970-01-01, 00:00 Coordinated Universal Time.

The @code{chksum} field is the ASCII representation of the octal value
of the simple sum of all bytes in the header block.  Each 8-bit
byte in the header is added to an unsigned integer, initialized to
zero, the precision of which shall be no less than seventeen bits.
When calculating the checksum, the @code{chksum} field is treated as
if it were all blanks.

The @code{typeflag} field specifies the type of file archived.  If a
particular implementation does not recognize or permit the specified type,
the file will be extracted as if it were a regular file.  As this action
occurs, @code{tar} issues a warning to the standard error.  The POSIX
types are listed in the following table.

@table @asis

@item @code{REGTYPE}
@itemx @code{AREGTYPE}
These flags represent a regular file.  In order to be compatible
with older versions of @code{tar}, a @code{typeflag} value of
@code{AREGTYPE} should be silently recognized as a regular file.
New archives should be created using @code{REGTYPE}.  Also, for
backward compatibility, @code{tar} treats a regular file whose name
ends with a slash as a directory.

@item @code{LNKTYPE}
This flag represents a file linked to another file, of any type,
previously archived.  Such files are identified in Unix by each
file having the same device and inode number.  The linked-to name is
specified in the @code{linkname} field with a trailing null.

@item @code{SYMTYPE}
This represents a symbolic link to another file.  The linked-to name
is specified in the @code{linkname} field with a trailing null.

@item @code{CHRTYPE}
@itemx @code{BLKTYPE}
These represent character special files and block special files
respectively.  In this case the @code{devmajor} and @code{devminor}
fields will contain the major and minor device numbers respectively.
Operating systems may map the device specifications to their own
local specification, or may ignore the entry.

@item @code{DIRTYPE}
This flag specifies a directory or subdirectory.  The directory
name in the @code{name} field should end with a slash.  On systems where
disk allocation is performed on a directory basis, the @code{size} field
will contain the maximum number of bytes (which may be rounded to
the nearest disk block allocation unit) which the directory may
hold.  A @code{size} field of zero indicates no such limit.  Systems
which do not support limiting in this manner should ignore the
@code{size} field.

@item @code{FIFOTYPE}
This specifies a FIFO special file.  Note that the archiving of a
FIFO file archives the existence of this file and not its contents.

@item @code{CONTTYPE}
This specifies a contiguous file, which is the same as a normal
file except that, in operating systems which support it, all its
space is allocated contiguously on the disk.  Operating systems
which do not allow contiguous allocation should silently treat this
type as a normal file.

@item @code{A} @dots{} @code{Z}
These are reserved for custom implementations.  Some of these are
used in the extended format (@pxref{Extended format}).

@end table

@noindent
Other values are reserved for specification in future revisions of
the P1003 standard, and should not be used by any @code{tar} program.

The @code{atime} and @code{ctime} fields are used in making incremental
backups; they store, respectively, the particular file's access time
and last inode-change time.

The @code{offset} is used by the @value{multi-volume} option, when
making a multi-volume archive.  The offset is number of bytes into
the file that we need to restart at to continue the file on the next
tape, that is, where we store the location that a continued file is
continued at.

The @code{magic} field indicates that this archive was output in
the P1003 archive format.  If this field contains @code{TMAGIC},
the @code{uname} and @code{gname} fields will contain the ASCII
representation of the owner and group of the file respectively.
If found, the user and group IDs are used rather than the values in
the @code{uid} and @code{gid} fields.

For references, see ISO/IEC 9945--1:1990 or IEEE Std 1003.1--1990, pages
169--173 (section 10.1) for @cite{Archive/Interchange File Format}; and
IEEE Std 1003.2--1992, pages 380--388 (section 4.48) and pages 936--940
(section E.4.48) for @cite{pax---Portable archive interchange}.

@node Extended format, , Standard format, Archive format
@appendixsec Extensions to the archive format

The extended format specifies additional values in the @code{typeflag}
field to describe new types of files in an archive.  These are listed below.

@table @code
@item OLDGNU_DUMPDIR
@itemx 'D'
This represents a directory and a list of files created by the
@value{incremental} option.  The @code{size} field gives the total size
of the associated list of files.  Each file name is preceded by either a
@samp{Y} (the file should be in this archive) or an @samp{N}.  (The file is
a directory, or is not stored in the archive.)  Each file name is terminated
by @code{NUL}.  There is an additional @code{NUL} after the last file name.

@item OLDGNU_MULTIVOL
@itemx 'M'
This represents a file continued from another volume of a multi-volume
archive created with the @value{multi-volume} option.  The original type
of the file is not given here.  The @code{size} field gives the maximum
size of this piece of the file (assuming the volume does not end before the
file is written out).  The @code{offset} field gives the offset from the
beginning of the file where this part of the file begins.  Thus @code{size}
plus @code{offset} should equal the original size of the file.

@item OLDGNU_SPARSE
@itemx 'S'
This flag indicates that we are dealing with a sparse file.  Note that
archiving a sparse file requires special subcommands to find holes in the
file, which mark the positions of these holes, along with the number of
bytes of data to be found after the hole.

@item OLDGNU_VOLHDR
@itemx 'V'
This file type is used to mark the volume header that was given with the
@value{label} option when the archive was created.  The @code{name}
field contains the @code{name} given after the @value{label} option.
The @code{size} field is zero.  Only the first file in each volume of an
archive should have this type.

@end table

You may have trouble reading an extended format archive with some other
@code{tar} if the options @value{incremental}, @value{multi-volume},
@value{sparse}, or @value{label} were used when writing the archive.
In general, if @code{tar} does not use the extension format fields of the
header, other versions of @code{tar} should be able to read the archive.
Otherwise, the @code{tar} program will give an error, the most likely one
being a checksum error.

A few fields were added to the POSIX header to deal with sparse files.
A file is @dfn{sparse} if it takes in unallocated blocks which end up
being represented as zeros, that is, no useful data.  A test to see if a
file is sparse is to look at the number of blocks allocated for it versus
the number of characters in the file; if there are fewer blocks allocated
for the file than would normally be allocated for a file of that size,
then the file is sparse.  This is the method @code{tar} uses to detect a
sparse file, and once such a file is detected, it is treated differently
from non-sparse files.

Sparse files are often @code{dbm} files, or other database-type files
which have data at some points and emptiness in the greater part of
the file.  Such files can appear to be very large when an @kbd{ls
-l} is done on them, when in truth there may be a very small amount
of important data contained in the file.  It is thus undesirable
to have @code{tar} think that it must back up this entire file, as
great quantities of room are wasted on empty blocks, which can lead
to running out of room on a tape far earlier than is necessary.
Thus, sparse files are dealt with so that these empty blocks are
not written to the tape.  Instead, what is written to the tape is a
description, of sorts, of the sparse file: where the holes are, how
big the holes are, and how much data is found at the end of the hole.
This way, the file takes up potentially far less room on the tape,
and when the file is extracted later on, it will look exactly the way
it looked beforehand.  The following is a description of the fields
used to handle a sparse file:

The @code{sp} is an array of @code{struct sparse}.  Each @code{struct
sparse} contains two 12-character strings which represent an offset
into the file and a number of bytes to be written at that offset.
The offset is absolute, and not relative to the offset in the preceding
array element.

The header can hold four of these @code{struct sparse} at the moment;
if more are needed, they are not stored in the header.

The @code{isextended} flag is set when an @code{extended_header}
is needed to deal with a file.  Note that this means that this flag
can only be set when dealing with a sparse file, and it is only set
in the event that the description of the file will not fit in the
alloted room for sparse structures in the header.  In other words,
an extended_header is needed.

The @code{extended_header} structure is used for sparse files which
need more sparse structures than can fit in the header.  The header can
fit 4 such structures; if more are needed, the flag @code{isextended}
gets set and the next block is an @code{extended_header}.

Each @code{extended_header} structure contains an array of 21
sparse structures, along with an @code{isextended} flag similar to the one
that the header had.  There can be an indeterminate number of such
@code{extended_header}s to describe a sparse file.

@node Index, , Archive format, Top
@unnumbered Index

@printindex cp

@summarycontents
@contents
@bye

@c Local variables:
@c texinfo-column-for-description: 32
@c End:
